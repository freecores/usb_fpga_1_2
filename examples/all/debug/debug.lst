                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 2.8.0 #5117 (May 15 2008) (UNIX)
                              4 ; This file was generated Wed Sep  8 20:23:26 2010
                              5 ;--------------------------------------------------------
                              6 	.module debug_tmp
                              7 	.optsdcc -mmcs51 --model-small
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _sendStringDescriptor_PARM_3
                             13 	.globl _sendStringDescriptor_PARM_2
                             14 	.globl _EmptyStringDescriptor
                             15 	.globl _FullSpeedConfigDescriptor_PadByte
                             16 	.globl _FullSpeedConfigDescriptor
                             17 	.globl _HighSpeedConfigDescriptor_PadByte
                             18 	.globl _HighSpeedConfigDescriptor
                             19 	.globl _DeviceQualifierDescriptor
                             20 	.globl _DeviceDescriptor
                             21 	.globl _PadByte
                             22 	.globl _configurationString
                             23 	.globl _productString
                             24 	.globl _manufacturerString
                             25 	.globl _main
                             26 	.globl _init_USB
                             27 	.globl _EP8_ISR
                             28 	.globl _EP6_ISR
                             29 	.globl _EP4_ISR
                             30 	.globl _EP2_ISR
                             31 	.globl _EP1OUT_ISR
                             32 	.globl _EP1IN_ISR
                             33 	.globl _EP0ACK_ISR
                             34 	.globl _HSGRANT_ISR
                             35 	.globl _URES_ISR
                             36 	.globl _SUSP_ISR
                             37 	.globl _SUTOK_ISR
                             38 	.globl _SOF_ISR
                             39 	.globl _abscode_identity
                             40 	.globl _debug_read_ep0
                             41 	.globl _debug_init
                             42 	.globl _debug_add_msg
                             43 	.globl _eeprom_write_ep0
                             44 	.globl _eeprom_read_ep0
                             45 	.globl _eeprom_write
                             46 	.globl _eeprom_read
                             47 	.globl _eeprom_select
                             48 	.globl _i2c_waitStop
                             49 	.globl _i2c_waitStart
                             50 	.globl _i2c_waitRead
                             51 	.globl _i2c_waitWrite
                             52 	.globl _MEM_COPY1_int
                             53 	.globl _uwait
                             54 	.globl _wait
                             55 	.globl _abscode_intvec
                             56 	.globl _EIPX6
                             57 	.globl _EIPX5
                             58 	.globl _EIPX4
                             59 	.globl _PI2C
                             60 	.globl _PUSB
                             61 	.globl _BREG7
                             62 	.globl _BREG6
                             63 	.globl _BREG5
                             64 	.globl _BREG4
                             65 	.globl _BREG3
                             66 	.globl _BREG2
                             67 	.globl _BREG1
                             68 	.globl _BREG0
                             69 	.globl _EIEX6
                             70 	.globl _EIEX5
                             71 	.globl _EIEX4
                             72 	.globl _EI2C
                             73 	.globl _EUSB
                             74 	.globl _ACC7
                             75 	.globl _ACC6
                             76 	.globl _ACC5
                             77 	.globl _ACC4
                             78 	.globl _ACC3
                             79 	.globl _ACC2
                             80 	.globl _ACC1
                             81 	.globl _ACC0
                             82 	.globl _SMOD1
                             83 	.globl _ERESI
                             84 	.globl _RESI
                             85 	.globl _INT6
                             86 	.globl _CY
                             87 	.globl _AC
                             88 	.globl _F0
                             89 	.globl _RS1
                             90 	.globl _RS0
                             91 	.globl _OV
                             92 	.globl _F1
                             93 	.globl _PF
                             94 	.globl _TF2
                             95 	.globl _EXF2
                             96 	.globl _RCLK
                             97 	.globl _TCLK
                             98 	.globl _EXEN2
                             99 	.globl _TR2
                            100 	.globl _CT2
                            101 	.globl _CPRL2
                            102 	.globl _SM0_1
                            103 	.globl _SM1_1
                            104 	.globl _SM2_1
                            105 	.globl _REN_1
                            106 	.globl _TB8_1
                            107 	.globl _RB8_1
                            108 	.globl _TI_1
                            109 	.globl _RI_1
                            110 	.globl _PS1
                            111 	.globl _PT2
                            112 	.globl _PS0
                            113 	.globl _PT1
                            114 	.globl _PX1
                            115 	.globl _PT0
                            116 	.globl _PX0
                            117 	.globl _IOD7
                            118 	.globl _IOD6
                            119 	.globl _IOD5
                            120 	.globl _IOD4
                            121 	.globl _IOD3
                            122 	.globl _IOD2
                            123 	.globl _IOD1
                            124 	.globl _IOD0
                            125 	.globl _EA
                            126 	.globl _ES1
                            127 	.globl _ET2
                            128 	.globl _ES0
                            129 	.globl _ET1
                            130 	.globl _EX1
                            131 	.globl _ET0
                            132 	.globl _EX0
                            133 	.globl _IOC7
                            134 	.globl _IOC6
                            135 	.globl _IOC5
                            136 	.globl _IOC4
                            137 	.globl _IOC3
                            138 	.globl _IOC2
                            139 	.globl _IOC1
                            140 	.globl _IOC0
                            141 	.globl _SM0_0
                            142 	.globl _SM1_0
                            143 	.globl _SM2_0
                            144 	.globl _REN_0
                            145 	.globl _TB8_0
                            146 	.globl _RB8_0
                            147 	.globl _TI_0
                            148 	.globl _RI_0
                            149 	.globl _IOB7
                            150 	.globl _IOB6
                            151 	.globl _IOB5
                            152 	.globl _IOB4
                            153 	.globl _IOB3
                            154 	.globl _IOB2
                            155 	.globl _IOB1
                            156 	.globl _IOB0
                            157 	.globl _TF1
                            158 	.globl _TR1
                            159 	.globl _TF0
                            160 	.globl _TR0
                            161 	.globl _IE1
                            162 	.globl _IT1
                            163 	.globl _IE0
                            164 	.globl _IT0
                            165 	.globl _IOA7
                            166 	.globl _IOA6
                            167 	.globl _IOA5
                            168 	.globl _IOA4
                            169 	.globl _IOA3
                            170 	.globl _IOA2
                            171 	.globl _IOA1
                            172 	.globl _IOA0
                            173 	.globl _EIP
                            174 	.globl _BREG
                            175 	.globl _EIE
                            176 	.globl _ACC
                            177 	.globl _EICON
                            178 	.globl _PSW
                            179 	.globl _TH2
                            180 	.globl _TL2
                            181 	.globl _RCAP2H
                            182 	.globl _RCAP2L
                            183 	.globl _T2CON
                            184 	.globl _SBUF1
                            185 	.globl _SCON1
                            186 	.globl _GPIFSGLDATLNOX
                            187 	.globl _GPIFSGLDATLX
                            188 	.globl _GPIFSGLDATH
                            189 	.globl _GPIFTRIG
                            190 	.globl _EP01STAT
                            191 	.globl _IP
                            192 	.globl _OEE
                            193 	.globl _OED
                            194 	.globl _OEC
                            195 	.globl _OEB
                            196 	.globl _OEA
                            197 	.globl _IOE
                            198 	.globl _IOD
                            199 	.globl _AUTOPTRSETUP
                            200 	.globl _EP68FIFOFLGS
                            201 	.globl _EP24FIFOFLGS
                            202 	.globl _EP2468STAT
                            203 	.globl _IE
                            204 	.globl _INT4CLR
                            205 	.globl _INT2CLR
                            206 	.globl _IOC
                            207 	.globl _AUTOPTRL2
                            208 	.globl _AUTOPTRH2
                            209 	.globl _AUTOPTRL1
                            210 	.globl _AUTOPTRH1
                            211 	.globl _SBUF0
                            212 	.globl _SCON0
                            213 	.globl __XPAGE
                            214 	.globl _MPAGE
                            215 	.globl _EXIF
                            216 	.globl _IOB
                            217 	.globl _CKCON
                            218 	.globl _TH1
                            219 	.globl _TH0
                            220 	.globl _TL1
                            221 	.globl _TL0
                            222 	.globl _TMOD
                            223 	.globl _TCON
                            224 	.globl _PCON
                            225 	.globl _DPS
                            226 	.globl _DPH1
                            227 	.globl _DPL1
                            228 	.globl _DPH0
                            229 	.globl _DPL0
                            230 	.globl _SP
                            231 	.globl _IOA
                            232 	.globl _ISOFRAME_COUNTER
                            233 	.globl _ep0_vendor_cmd_setup
                            234 	.globl _ep0_prev_setup_request
                            235 	.globl _ep0_payload_transfer
                            236 	.globl _ep0_payload_remaining
                            237 	.globl _SN_STRING
                            238 	.globl _MODULE_RESERVED
                            239 	.globl _INTERFACE_CAPABILITIES
                            240 	.globl _INTERFACE_VERSION
                            241 	.globl _FW_VERSION
                            242 	.globl _PRODUCT_ID
                            243 	.globl _ZTEXID
                            244 	.globl _ZTEX_DESCRIPTOR_VERSION
                            245 	.globl _ZTEX_DESCRIPTOR
                            246 	.globl _debug_read_addr
                            247 	.globl _debug_msg_buf
                            248 	.globl _debug_stack_ptr
                            249 	.globl _debug_stack
                            250 	.globl _debug_msg_size
                            251 	.globl _debug_stack_size
                            252 	.globl _debug_counter
                            253 	.globl _eeprom_write_checksum
                            254 	.globl _eeprom_write_bytes
                            255 	.globl _eeprom_addr
                            256 	.globl _INTVEC_GPIFWF
                            257 	.globl _INTVEC_GPIFDONE
                            258 	.globl _INTVEC_EP8FF
                            259 	.globl _INTVEC_EP6FF
                            260 	.globl _INTVEC_EP2FF
                            261 	.globl _INTVEC_EP8EF
                            262 	.globl _INTVEC_EP6EF
                            263 	.globl _INTVEC_EP4EF
                            264 	.globl _INTVEC_EP2EF
                            265 	.globl _INTVEC_EP8PF
                            266 	.globl _INTVEC_EP6PF
                            267 	.globl _INTVEC_EP4PF
                            268 	.globl _INTVEC_EP2PF
                            269 	.globl _INTVEC_EP8ISOERR
                            270 	.globl _INTVEC_EP6ISOERR
                            271 	.globl _INTVEC_EP4ISOERR
                            272 	.globl _INTVEC_EP2ISOERR
                            273 	.globl _INTVEC_ERRLIMIT
                            274 	.globl _INTVEC_EP8PING
                            275 	.globl _INTVEC_EP6PING
                            276 	.globl _INTVEC_EP4PING
                            277 	.globl _INTVEC_EP2PING
                            278 	.globl _INTVEC_EP1PING
                            279 	.globl _INTVEC_EP0PING
                            280 	.globl _INTVEC_IBN
                            281 	.globl _INTVEC_EP8
                            282 	.globl _INTVEC_EP6
                            283 	.globl _INTVEC_EP4
                            284 	.globl _INTVEC_EP2
                            285 	.globl _INTVEC_EP1OUT
                            286 	.globl _INTVEC_EP1IN
                            287 	.globl _INTVEC_EP0OUT
                            288 	.globl _INTVEC_EP0IN
                            289 	.globl _INTVEC_EP0ACK
                            290 	.globl _INTVEC_HISPEED
                            291 	.globl _INTVEC_USBRESET
                            292 	.globl _INTVEC_SUSPEND
                            293 	.globl _INTVEC_SUTOK
                            294 	.globl _INTVEC_SOF
                            295 	.globl _INTVEC_SUDAV
                            296 	.globl _INT12VEC_IE6
                            297 	.globl _INT11VEC_IE5
                            298 	.globl _INT10VEC_GPIF
                            299 	.globl _INT9VEC_I2C
                            300 	.globl _INT8VEC_USB
                            301 	.globl _INT7VEC_USART1
                            302 	.globl _INT6VEC_RESUME
                            303 	.globl _INT5VEC_T2
                            304 	.globl _INT4VEC_USART0
                            305 	.globl _INT3VEC_T1
                            306 	.globl _INT2VEC_IE1
                            307 	.globl _INT1VEC_T0
                            308 	.globl _INT0VEC_IE0
                            309 	.globl _EP8FIFOBUF
                            310 	.globl _EP6FIFOBUF
                            311 	.globl _EP4FIFOBUF
                            312 	.globl _EP2FIFOBUF
                            313 	.globl _EP1INBUF
                            314 	.globl _EP1OUTBUF
                            315 	.globl _EP0BUF
                            316 	.globl _GPIFABORT
                            317 	.globl _GPIFREADYSTAT
                            318 	.globl _GPIFREADYCFG
                            319 	.globl _XGPIFSGLDATLNOX
                            320 	.globl _XGPIFSGLDATLX
                            321 	.globl _XGPIFSGLDATH
                            322 	.globl _EP8GPIFTRIG
                            323 	.globl _EP8GPIFPFSTOP
                            324 	.globl _EP8GPIFFLGSEL
                            325 	.globl _EP6GPIFTRIG
                            326 	.globl _EP6GPIFPFSTOP
                            327 	.globl _EP6GPIFFLGSEL
                            328 	.globl _EP4GPIFTRIG
                            329 	.globl _EP4GPIFPFSTOP
                            330 	.globl _EP4GPIFFLGSEL
                            331 	.globl _EP2GPIFTRIG
                            332 	.globl _EP2GPIFPFSTOP
                            333 	.globl _EP2GPIFFLGSEL
                            334 	.globl _GPIFTCB0
                            335 	.globl _GPIFTCB1
                            336 	.globl _GPIFTCB2
                            337 	.globl _GPIFTCB3
                            338 	.globl _FLOWSTBHPERIOD
                            339 	.globl _FLOWSTBEDGE
                            340 	.globl _FLOWSTB
                            341 	.globl _FLOWHOLDOFF
                            342 	.globl _FLOWEQ1CTL
                            343 	.globl _FLOWEQ0CTL
                            344 	.globl _FLOWLOGIC
                            345 	.globl _FLOWSTATE
                            346 	.globl _GPIFADRL
                            347 	.globl _GPIFADRH
                            348 	.globl _GPIFCTLCFG
                            349 	.globl _GPIFIDLECTL
                            350 	.globl _GPIFIDLECS
                            351 	.globl _GPIFWFSELECT
                            352 	.globl _wLengthH
                            353 	.globl _wLengthL
                            354 	.globl _wIndexH
                            355 	.globl _wIndexL
                            356 	.globl _wValueH
                            357 	.globl _wValueL
                            358 	.globl _bRequest
                            359 	.globl _bmRequestType
                            360 	.globl _SETUPDAT
                            361 	.globl _SUDPTRCTL
                            362 	.globl _SUDPTRL
                            363 	.globl _SUDPTRH
                            364 	.globl _EP8FIFOBCL
                            365 	.globl _EP8FIFOBCH
                            366 	.globl _EP6FIFOBCL
                            367 	.globl _EP6FIFOBCH
                            368 	.globl _EP4FIFOBCL
                            369 	.globl _EP4FIFOBCH
                            370 	.globl _EP2FIFOBCL
                            371 	.globl _EP2FIFOBCH
                            372 	.globl _EP8FIFOFLGS
                            373 	.globl _EP6FIFOFLGS
                            374 	.globl _EP4FIFOFLGS
                            375 	.globl _EP2FIFOFLGS
                            376 	.globl _EP8CS
                            377 	.globl _EP6CS
                            378 	.globl _EP4CS
                            379 	.globl _EP2CS
                            380 	.globl _EPXCS
                            381 	.globl _EP1INCS
                            382 	.globl _EP1OUTCS
                            383 	.globl _EP0CS
                            384 	.globl _EP8BCL
                            385 	.globl _EP8BCH
                            386 	.globl _EP6BCL
                            387 	.globl _EP6BCH
                            388 	.globl _EP4BCL
                            389 	.globl _EP4BCH
                            390 	.globl _EP2BCL
                            391 	.globl _EP2BCH
                            392 	.globl _EP1INBC
                            393 	.globl _EP1OUTBC
                            394 	.globl _EP0BCL
                            395 	.globl _EP0BCH
                            396 	.globl _FNADDR
                            397 	.globl _MICROFRAME
                            398 	.globl _USBFRAMEL
                            399 	.globl _USBFRAMEH
                            400 	.globl _TOGCTL
                            401 	.globl _WAKEUPCS
                            402 	.globl _SUSPEND
                            403 	.globl _USBCS
                            404 	.globl _UDMACRCQUALIFIER
                            405 	.globl _UDMACRCL
                            406 	.globl _UDMACRCH
                            407 	.globl _EXTAUTODAT2
                            408 	.globl _XAUTODAT2
                            409 	.globl _EXTAUTODAT1
                            410 	.globl _XAUTODAT1
                            411 	.globl _I2CTL
                            412 	.globl _I2DAT
                            413 	.globl _I2CS
                            414 	.globl _PORTECFG
                            415 	.globl _PORTCCFG
                            416 	.globl _PORTACFG
                            417 	.globl _INTSETUP
                            418 	.globl _INT4IVEC
                            419 	.globl _INT2IVEC
                            420 	.globl _CLRERRCNT
                            421 	.globl _ERRCNTLIM
                            422 	.globl _USBERRIRQ
                            423 	.globl _USBERRIE
                            424 	.globl _GPIFIRQ
                            425 	.globl _GPIFIE
                            426 	.globl _EPIRQ
                            427 	.globl _EPIE
                            428 	.globl _USBIRQ
                            429 	.globl _USBIE
                            430 	.globl _NAKIRQ
                            431 	.globl _NAKIE
                            432 	.globl _IBNIRQ
                            433 	.globl _IBNIE
                            434 	.globl _EP8FIFOIRQ
                            435 	.globl _EP8FIFOIE
                            436 	.globl _EP6FIFOIRQ
                            437 	.globl _EP6FIFOIE
                            438 	.globl _EP4FIFOIRQ
                            439 	.globl _EP4FIFOIE
                            440 	.globl _EP2FIFOIRQ
                            441 	.globl _EP2FIFOIE
                            442 	.globl _OUTPKTEND
                            443 	.globl _INPKTEND
                            444 	.globl _EP8ISOINPKTS
                            445 	.globl _EP6ISOINPKTS
                            446 	.globl _EP4ISOINPKTS
                            447 	.globl _EP2ISOINPKTS
                            448 	.globl _EP8FIFOPFL
                            449 	.globl _EP8FIFOPFH
                            450 	.globl _EP6FIFOPFL
                            451 	.globl _EP6FIFOPFH
                            452 	.globl _EP4FIFOPFL
                            453 	.globl _EP4FIFOPFH
                            454 	.globl _EP2FIFOPFL
                            455 	.globl _EP2FIFOPFH
                            456 	.globl _ECC2B2
                            457 	.globl _ECC2B1
                            458 	.globl _ECC2B0
                            459 	.globl _ECC1B2
                            460 	.globl _ECC1B1
                            461 	.globl _ECC1B0
                            462 	.globl _ECCRESET
                            463 	.globl _ECCCFG
                            464 	.globl _EP8AUTOINLENL
                            465 	.globl _EP8AUTOINLENH
                            466 	.globl _EP6AUTOINLENL
                            467 	.globl _EP6AUTOINLENH
                            468 	.globl _EP4AUTOINLENL
                            469 	.globl _EP4AUTOINLENH
                            470 	.globl _EP2AUTOINLENL
                            471 	.globl _EP2AUTOINLENH
                            472 	.globl _EP8FIFOCFG
                            473 	.globl _EP6FIFOCFG
                            474 	.globl _EP4FIFOCFG
                            475 	.globl _EP2FIFOCFG
                            476 	.globl _EP8CFG
                            477 	.globl _EP6CFG
                            478 	.globl _EP4CFG
                            479 	.globl _EP2CFG
                            480 	.globl _EP1INCFG
                            481 	.globl _EP1OUTCFG
                            482 	.globl _GPIFHOLDAMOUNT
                            483 	.globl _REVCTL
                            484 	.globl _REVID
                            485 	.globl _FIFOPINPOLAR
                            486 	.globl _UART230
                            487 	.globl _BPADDRL
                            488 	.globl _BPADDRH
                            489 	.globl _BREAKPT
                            490 	.globl _FIFORESET
                            491 	.globl _PINFLAGSCD
                            492 	.globl _PINFLAGSAB
                            493 	.globl _IFCONFIG
                            494 	.globl _CPUCS
                            495 	.globl _GPCR2
                            496 	.globl _GPIF_WAVE3_DATA
                            497 	.globl _GPIF_WAVE2_DATA
                            498 	.globl _GPIF_WAVE1_DATA
                            499 	.globl _GPIF_WAVE0_DATA
                            500 	.globl _GPIF_WAVE_DATA
                            501 	.globl _eeprom_write_PARM_3
                            502 	.globl _eeprom_write_PARM_2
                            503 	.globl _eeprom_read_PARM_3
                            504 	.globl _eeprom_read_PARM_2
                            505 	.globl _eeprom_select_PARM_2
                            506 ;--------------------------------------------------------
                            507 ; special function registers
                            508 ;--------------------------------------------------------
                            509 	.area RSEG    (DATA)
                    0080    510 _IOA	=	0x0080
                    0081    511 _SP	=	0x0081
                    0082    512 _DPL0	=	0x0082
                    0083    513 _DPH0	=	0x0083
                    0084    514 _DPL1	=	0x0084
                    0085    515 _DPH1	=	0x0085
                    0086    516 _DPS	=	0x0086
                    0087    517 _PCON	=	0x0087
                    0088    518 _TCON	=	0x0088
                    0089    519 _TMOD	=	0x0089
                    008A    520 _TL0	=	0x008a
                    008B    521 _TL1	=	0x008b
                    008C    522 _TH0	=	0x008c
                    008D    523 _TH1	=	0x008d
                    008E    524 _CKCON	=	0x008e
                    0090    525 _IOB	=	0x0090
                    0091    526 _EXIF	=	0x0091
                    0092    527 _MPAGE	=	0x0092
                    0092    528 __XPAGE	=	0x0092
                    0098    529 _SCON0	=	0x0098
                    0099    530 _SBUF0	=	0x0099
                    009A    531 _AUTOPTRH1	=	0x009a
                    009B    532 _AUTOPTRL1	=	0x009b
                    009D    533 _AUTOPTRH2	=	0x009d
                    009E    534 _AUTOPTRL2	=	0x009e
                    00A0    535 _IOC	=	0x00a0
                    00A1    536 _INT2CLR	=	0x00a1
                    00A2    537 _INT4CLR	=	0x00a2
                    00A8    538 _IE	=	0x00a8
                    00AA    539 _EP2468STAT	=	0x00aa
                    00AB    540 _EP24FIFOFLGS	=	0x00ab
                    00AC    541 _EP68FIFOFLGS	=	0x00ac
                    00AF    542 _AUTOPTRSETUP	=	0x00af
                    00B0    543 _IOD	=	0x00b0
                    00B1    544 _IOE	=	0x00b1
                    00B2    545 _OEA	=	0x00b2
                    00B3    546 _OEB	=	0x00b3
                    00B4    547 _OEC	=	0x00b4
                    00B5    548 _OED	=	0x00b5
                    00B6    549 _OEE	=	0x00b6
                    00B8    550 _IP	=	0x00b8
                    00BA    551 _EP01STAT	=	0x00ba
                    00BB    552 _GPIFTRIG	=	0x00bb
                    00BD    553 _GPIFSGLDATH	=	0x00bd
                    00BE    554 _GPIFSGLDATLX	=	0x00be
                    00BF    555 _GPIFSGLDATLNOX	=	0x00bf
                    00C0    556 _SCON1	=	0x00c0
                    00C1    557 _SBUF1	=	0x00c1
                    00C8    558 _T2CON	=	0x00c8
                    00CA    559 _RCAP2L	=	0x00ca
                    00CB    560 _RCAP2H	=	0x00cb
                    00CC    561 _TL2	=	0x00cc
                    00CD    562 _TH2	=	0x00cd
                    00D0    563 _PSW	=	0x00d0
                    00D8    564 _EICON	=	0x00d8
                    00E0    565 _ACC	=	0x00e0
                    00E8    566 _EIE	=	0x00e8
                    00F0    567 _BREG	=	0x00f0
                    00F8    568 _EIP	=	0x00f8
                            569 ;--------------------------------------------------------
                            570 ; special function bits
                            571 ;--------------------------------------------------------
                            572 	.area RSEG    (DATA)
                    0080    573 _IOA0	=	0x0080
                    0081    574 _IOA1	=	0x0081
                    0082    575 _IOA2	=	0x0082
                    0083    576 _IOA3	=	0x0083
                    0084    577 _IOA4	=	0x0084
                    0085    578 _IOA5	=	0x0085
                    0086    579 _IOA6	=	0x0086
                    0087    580 _IOA7	=	0x0087
                    0088    581 _IT0	=	0x0088
                    0089    582 _IE0	=	0x0089
                    008A    583 _IT1	=	0x008a
                    008B    584 _IE1	=	0x008b
                    008C    585 _TR0	=	0x008c
                    008D    586 _TF0	=	0x008d
                    008E    587 _TR1	=	0x008e
                    008F    588 _TF1	=	0x008f
                    0090    589 _IOB0	=	0x0090
                    0091    590 _IOB1	=	0x0091
                    0092    591 _IOB2	=	0x0092
                    0093    592 _IOB3	=	0x0093
                    0094    593 _IOB4	=	0x0094
                    0095    594 _IOB5	=	0x0095
                    0096    595 _IOB6	=	0x0096
                    0097    596 _IOB7	=	0x0097
                    0098    597 _RI_0	=	0x0098
                    0099    598 _TI_0	=	0x0099
                    009A    599 _RB8_0	=	0x009a
                    009B    600 _TB8_0	=	0x009b
                    009C    601 _REN_0	=	0x009c
                    009D    602 _SM2_0	=	0x009d
                    009E    603 _SM1_0	=	0x009e
                    009F    604 _SM0_0	=	0x009f
                    00A0    605 _IOC0	=	0x00a0
                    00A1    606 _IOC1	=	0x00a1
                    00A2    607 _IOC2	=	0x00a2
                    00A3    608 _IOC3	=	0x00a3
                    00A4    609 _IOC4	=	0x00a4
                    00A5    610 _IOC5	=	0x00a5
                    00A6    611 _IOC6	=	0x00a6
                    00A7    612 _IOC7	=	0x00a7
                    00A8    613 _EX0	=	0x00a8
                    00A9    614 _ET0	=	0x00a9
                    00AA    615 _EX1	=	0x00aa
                    00AB    616 _ET1	=	0x00ab
                    00AC    617 _ES0	=	0x00ac
                    00AD    618 _ET2	=	0x00ad
                    00AE    619 _ES1	=	0x00ae
                    00AF    620 _EA	=	0x00af
                    00B0    621 _IOD0	=	0x00b0
                    00B1    622 _IOD1	=	0x00b1
                    00B2    623 _IOD2	=	0x00b2
                    00B3    624 _IOD3	=	0x00b3
                    00B4    625 _IOD4	=	0x00b4
                    00B5    626 _IOD5	=	0x00b5
                    00B6    627 _IOD6	=	0x00b6
                    00B7    628 _IOD7	=	0x00b7
                    00B8    629 _PX0	=	0x00b8
                    00B9    630 _PT0	=	0x00b9
                    00BA    631 _PX1	=	0x00ba
                    00BB    632 _PT1	=	0x00bb
                    00BC    633 _PS0	=	0x00bc
                    00BD    634 _PT2	=	0x00bd
                    00BE    635 _PS1	=	0x00be
                    00C0    636 _RI_1	=	0x00c0
                    00C1    637 _TI_1	=	0x00c1
                    00C2    638 _RB8_1	=	0x00c2
                    00C3    639 _TB8_1	=	0x00c3
                    00C4    640 _REN_1	=	0x00c4
                    00C5    641 _SM2_1	=	0x00c5
                    00C6    642 _SM1_1	=	0x00c6
                    00C7    643 _SM0_1	=	0x00c7
                    00C8    644 _CPRL2	=	0x00c8
                    00C9    645 _CT2	=	0x00c9
                    00CA    646 _TR2	=	0x00ca
                    00CB    647 _EXEN2	=	0x00cb
                    00CC    648 _TCLK	=	0x00cc
                    00CD    649 _RCLK	=	0x00cd
                    00CE    650 _EXF2	=	0x00ce
                    00CF    651 _TF2	=	0x00cf
                    00D0    652 _PF	=	0x00d0
                    00D1    653 _F1	=	0x00d1
                    00D2    654 _OV	=	0x00d2
                    00D3    655 _RS0	=	0x00d3
                    00D4    656 _RS1	=	0x00d4
                    00D5    657 _F0	=	0x00d5
                    00D6    658 _AC	=	0x00d6
                    00D7    659 _CY	=	0x00d7
                    00DB    660 _INT6	=	0x00db
                    00DC    661 _RESI	=	0x00dc
                    00DD    662 _ERESI	=	0x00dd
                    00DF    663 _SMOD1	=	0x00df
                    00E0    664 _ACC0	=	0x00e0
                    00E1    665 _ACC1	=	0x00e1
                    00E2    666 _ACC2	=	0x00e2
                    00E3    667 _ACC3	=	0x00e3
                    00E4    668 _ACC4	=	0x00e4
                    00E5    669 _ACC5	=	0x00e5
                    00E6    670 _ACC6	=	0x00e6
                    00E7    671 _ACC7	=	0x00e7
                    00E8    672 _EUSB	=	0x00e8
                    00E9    673 _EI2C	=	0x00e9
                    00EA    674 _EIEX4	=	0x00ea
                    00EB    675 _EIEX5	=	0x00eb
                    00EC    676 _EIEX6	=	0x00ec
                    00F0    677 _BREG0	=	0x00f0
                    00F1    678 _BREG1	=	0x00f1
                    00F2    679 _BREG2	=	0x00f2
                    00F3    680 _BREG3	=	0x00f3
                    00F4    681 _BREG4	=	0x00f4
                    00F5    682 _BREG5	=	0x00f5
                    00F6    683 _BREG6	=	0x00f6
                    00F7    684 _BREG7	=	0x00f7
                    00F8    685 _PUSB	=	0x00f8
                    00F9    686 _PI2C	=	0x00f9
                    00FA    687 _EIPX4	=	0x00fa
                    00FB    688 _EIPX5	=	0x00fb
                    00FC    689 _EIPX6	=	0x00fc
                            690 ;--------------------------------------------------------
                            691 ; overlayable register banks
                            692 ;--------------------------------------------------------
                            693 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     694 	.ds 8
                            695 ;--------------------------------------------------------
                            696 ; overlayable bit register bank
                            697 ;--------------------------------------------------------
                            698 	.area BIT_BANK	(REL,OVR,DATA)
   0000                     699 bits:
   0000                     700 	.ds 1
                    8000    701 	b0 = bits[0]
                    8100    702 	b1 = bits[1]
                    8200    703 	b2 = bits[2]
                    8300    704 	b3 = bits[3]
                    8400    705 	b4 = bits[4]
                    8500    706 	b5 = bits[5]
                    8600    707 	b6 = bits[6]
                    8700    708 	b7 = bits[7]
                            709 ;--------------------------------------------------------
                            710 ; internal ram data
                            711 ;--------------------------------------------------------
                            712 	.area DSEG    (DATA)
   0000                     713 _eeprom_select_PARM_2:
   0000                     714 	.ds 1
   0001                     715 _eeprom_read_PARM_2:
   0001                     716 	.ds 2
   0003                     717 _eeprom_read_PARM_3:
   0003                     718 	.ds 1
   0004                     719 _eeprom_write_PARM_2:
   0004                     720 	.ds 2
   0006                     721 _eeprom_write_PARM_3:
   0006                     722 	.ds 1
                            723 ;--------------------------------------------------------
                            724 ; overlayable items in internal ram 
                            725 ;--------------------------------------------------------
                            726 	.area	OSEG    (OVR,DATA)
                            727 	.area	OSEG    (OVR,DATA)
                            728 	.area	OSEG    (OVR,DATA)
                            729 	.area	OSEG    (OVR,DATA)
                            730 	.area	OSEG    (OVR,DATA)
                            731 	.area	OSEG    (OVR,DATA)
                            732 	.area	OSEG    (OVR,DATA)
                            733 	.area	OSEG    (OVR,DATA)
                            734 	.area	OSEG    (OVR,DATA)
   0000                     735 _sendStringDescriptor_PARM_2::
   0000                     736 	.ds 1
   0001                     737 _sendStringDescriptor_PARM_3::
   0001                     738 	.ds 1
                            739 ;--------------------------------------------------------
                            740 ; Stack segment in internal ram 
                            741 ;--------------------------------------------------------
                            742 	.area	SSEG	(DATA)
   0000                     743 __start__stack:
   0000                     744 	.ds	1
                            745 
                            746 ;--------------------------------------------------------
                            747 ; indirectly addressable internal ram data
                            748 ;--------------------------------------------------------
                            749 	.area ISEG    (DATA)
                            750 ;--------------------------------------------------------
                            751 ; absolute internal ram data
                            752 ;--------------------------------------------------------
                            753 	.area IABS    (ABS,DATA)
                            754 	.area IABS    (ABS,DATA)
                            755 ;--------------------------------------------------------
                            756 ; bit data
                            757 ;--------------------------------------------------------
                            758 	.area BSEG    (BIT)
                            759 ;--------------------------------------------------------
                            760 ; paged external ram data
                            761 ;--------------------------------------------------------
                            762 	.area PSEG    (PAG,XDATA)
                            763 ;--------------------------------------------------------
                            764 ; external ram data
                            765 ;--------------------------------------------------------
                            766 	.area XSEG    (XDATA)
                    E400    767 _GPIF_WAVE_DATA	=	0xe400
                    E400    768 _GPIF_WAVE0_DATA	=	0xe400
                    E420    769 _GPIF_WAVE1_DATA	=	0xe420
                    E440    770 _GPIF_WAVE2_DATA	=	0xe440
                    E460    771 _GPIF_WAVE3_DATA	=	0xe460
                    E50D    772 _GPCR2	=	0xe50d
                    E600    773 _CPUCS	=	0xe600
                    E601    774 _IFCONFIG	=	0xe601
                    E602    775 _PINFLAGSAB	=	0xe602
                    E603    776 _PINFLAGSCD	=	0xe603
                    E604    777 _FIFORESET	=	0xe604
                    E605    778 _BREAKPT	=	0xe605
                    E606    779 _BPADDRH	=	0xe606
                    E607    780 _BPADDRL	=	0xe607
                    E608    781 _UART230	=	0xe608
                    E609    782 _FIFOPINPOLAR	=	0xe609
                    E60A    783 _REVID	=	0xe60a
                    E60B    784 _REVCTL	=	0xe60b
                    E60C    785 _GPIFHOLDAMOUNT	=	0xe60c
                    E610    786 _EP1OUTCFG	=	0xe610
                    E611    787 _EP1INCFG	=	0xe611
                    E612    788 _EP2CFG	=	0xe612
                    E613    789 _EP4CFG	=	0xe613
                    E614    790 _EP6CFG	=	0xe614
                    E615    791 _EP8CFG	=	0xe615
                    E618    792 _EP2FIFOCFG	=	0xe618
                    E619    793 _EP4FIFOCFG	=	0xe619
                    E61A    794 _EP6FIFOCFG	=	0xe61a
                    E61B    795 _EP8FIFOCFG	=	0xe61b
                    E620    796 _EP2AUTOINLENH	=	0xe620
                    E621    797 _EP2AUTOINLENL	=	0xe621
                    E622    798 _EP4AUTOINLENH	=	0xe622
                    E623    799 _EP4AUTOINLENL	=	0xe623
                    E624    800 _EP6AUTOINLENH	=	0xe624
                    E625    801 _EP6AUTOINLENL	=	0xe625
                    E626    802 _EP8AUTOINLENH	=	0xe626
                    E627    803 _EP8AUTOINLENL	=	0xe627
                    E628    804 _ECCCFG	=	0xe628
                    E629    805 _ECCRESET	=	0xe629
                    E62A    806 _ECC1B0	=	0xe62a
                    E62B    807 _ECC1B1	=	0xe62b
                    E62C    808 _ECC1B2	=	0xe62c
                    E62D    809 _ECC2B0	=	0xe62d
                    E62E    810 _ECC2B1	=	0xe62e
                    E62F    811 _ECC2B2	=	0xe62f
                    E630    812 _EP2FIFOPFH	=	0xe630
                    E631    813 _EP2FIFOPFL	=	0xe631
                    E632    814 _EP4FIFOPFH	=	0xe632
                    E633    815 _EP4FIFOPFL	=	0xe633
                    E634    816 _EP6FIFOPFH	=	0xe634
                    E635    817 _EP6FIFOPFL	=	0xe635
                    E636    818 _EP8FIFOPFH	=	0xe636
                    E637    819 _EP8FIFOPFL	=	0xe637
                    E640    820 _EP2ISOINPKTS	=	0xe640
                    E641    821 _EP4ISOINPKTS	=	0xe641
                    E642    822 _EP6ISOINPKTS	=	0xe642
                    E643    823 _EP8ISOINPKTS	=	0xe643
                    E648    824 _INPKTEND	=	0xe648
                    E649    825 _OUTPKTEND	=	0xe649
                    E650    826 _EP2FIFOIE	=	0xe650
                    E651    827 _EP2FIFOIRQ	=	0xe651
                    E652    828 _EP4FIFOIE	=	0xe652
                    E653    829 _EP4FIFOIRQ	=	0xe653
                    E654    830 _EP6FIFOIE	=	0xe654
                    E655    831 _EP6FIFOIRQ	=	0xe655
                    E656    832 _EP8FIFOIE	=	0xe656
                    E657    833 _EP8FIFOIRQ	=	0xe657
                    E658    834 _IBNIE	=	0xe658
                    E659    835 _IBNIRQ	=	0xe659
                    E65A    836 _NAKIE	=	0xe65a
                    E65B    837 _NAKIRQ	=	0xe65b
                    E65C    838 _USBIE	=	0xe65c
                    E65D    839 _USBIRQ	=	0xe65d
                    E65E    840 _EPIE	=	0xe65e
                    E65F    841 _EPIRQ	=	0xe65f
                    E660    842 _GPIFIE	=	0xe660
                    E661    843 _GPIFIRQ	=	0xe661
                    E662    844 _USBERRIE	=	0xe662
                    E663    845 _USBERRIRQ	=	0xe663
                    E664    846 _ERRCNTLIM	=	0xe664
                    E665    847 _CLRERRCNT	=	0xe665
                    E666    848 _INT2IVEC	=	0xe666
                    E667    849 _INT4IVEC	=	0xe667
                    E668    850 _INTSETUP	=	0xe668
                    E670    851 _PORTACFG	=	0xe670
                    E671    852 _PORTCCFG	=	0xe671
                    E672    853 _PORTECFG	=	0xe672
                    E678    854 _I2CS	=	0xe678
                    E679    855 _I2DAT	=	0xe679
                    E67A    856 _I2CTL	=	0xe67a
                    E67B    857 _XAUTODAT1	=	0xe67b
                    E67B    858 _EXTAUTODAT1	=	0xe67b
                    E67C    859 _XAUTODAT2	=	0xe67c
                    E67C    860 _EXTAUTODAT2	=	0xe67c
                    E67D    861 _UDMACRCH	=	0xe67d
                    E67E    862 _UDMACRCL	=	0xe67e
                    E67F    863 _UDMACRCQUALIFIER	=	0xe67f
                    E680    864 _USBCS	=	0xe680
                    E681    865 _SUSPEND	=	0xe681
                    E682    866 _WAKEUPCS	=	0xe682
                    E683    867 _TOGCTL	=	0xe683
                    E684    868 _USBFRAMEH	=	0xe684
                    E685    869 _USBFRAMEL	=	0xe685
                    E686    870 _MICROFRAME	=	0xe686
                    E687    871 _FNADDR	=	0xe687
                    E68A    872 _EP0BCH	=	0xe68a
                    E68B    873 _EP0BCL	=	0xe68b
                    E68D    874 _EP1OUTBC	=	0xe68d
                    E68F    875 _EP1INBC	=	0xe68f
                    E690    876 _EP2BCH	=	0xe690
                    E691    877 _EP2BCL	=	0xe691
                    E694    878 _EP4BCH	=	0xe694
                    E695    879 _EP4BCL	=	0xe695
                    E698    880 _EP6BCH	=	0xe698
                    E699    881 _EP6BCL	=	0xe699
                    E69C    882 _EP8BCH	=	0xe69c
                    E69D    883 _EP8BCL	=	0xe69d
                    E6A0    884 _EP0CS	=	0xe6a0
                    E6A1    885 _EP1OUTCS	=	0xe6a1
                    E6A2    886 _EP1INCS	=	0xe6a2
                    E6A3    887 _EPXCS	=	0xe6a3
                    E6A3    888 _EP2CS	=	0xe6a3
                    E6A4    889 _EP4CS	=	0xe6a4
                    E6A5    890 _EP6CS	=	0xe6a5
                    E6A6    891 _EP8CS	=	0xe6a6
                    E6A7    892 _EP2FIFOFLGS	=	0xe6a7
                    E6A8    893 _EP4FIFOFLGS	=	0xe6a8
                    E6A9    894 _EP6FIFOFLGS	=	0xe6a9
                    E6AA    895 _EP8FIFOFLGS	=	0xe6aa
                    E6AB    896 _EP2FIFOBCH	=	0xe6ab
                    E6AC    897 _EP2FIFOBCL	=	0xe6ac
                    E6AD    898 _EP4FIFOBCH	=	0xe6ad
                    E6AE    899 _EP4FIFOBCL	=	0xe6ae
                    E6AF    900 _EP6FIFOBCH	=	0xe6af
                    E6B0    901 _EP6FIFOBCL	=	0xe6b0
                    E6B1    902 _EP8FIFOBCH	=	0xe6b1
                    E6B2    903 _EP8FIFOBCL	=	0xe6b2
                    E6B3    904 _SUDPTRH	=	0xe6b3
                    E6B4    905 _SUDPTRL	=	0xe6b4
                    E6B5    906 _SUDPTRCTL	=	0xe6b5
                    E6B8    907 _SETUPDAT	=	0xe6b8
                    E6B8    908 _bmRequestType	=	0xe6b8
                    E6B9    909 _bRequest	=	0xe6b9
                    E6BA    910 _wValueL	=	0xe6ba
                    E6BB    911 _wValueH	=	0xe6bb
                    E6BC    912 _wIndexL	=	0xe6bc
                    E6BD    913 _wIndexH	=	0xe6bd
                    E6BE    914 _wLengthL	=	0xe6be
                    E6BF    915 _wLengthH	=	0xe6bf
                    E6C0    916 _GPIFWFSELECT	=	0xe6c0
                    E6C1    917 _GPIFIDLECS	=	0xe6c1
                    E6C2    918 _GPIFIDLECTL	=	0xe6c2
                    E6C3    919 _GPIFCTLCFG	=	0xe6c3
                    E6C4    920 _GPIFADRH	=	0xe6c4
                    E6C5    921 _GPIFADRL	=	0xe6c5
                    E6C6    922 _FLOWSTATE	=	0xe6c6
                    E6C7    923 _FLOWLOGIC	=	0xe6c7
                    E6C8    924 _FLOWEQ0CTL	=	0xe6c8
                    E6C9    925 _FLOWEQ1CTL	=	0xe6c9
                    E6CA    926 _FLOWHOLDOFF	=	0xe6ca
                    E6CB    927 _FLOWSTB	=	0xe6cb
                    E6CC    928 _FLOWSTBEDGE	=	0xe6cc
                    E6CD    929 _FLOWSTBHPERIOD	=	0xe6cd
                    E6CE    930 _GPIFTCB3	=	0xe6ce
                    E6CF    931 _GPIFTCB2	=	0xe6cf
                    E6D0    932 _GPIFTCB1	=	0xe6d0
                    E6D1    933 _GPIFTCB0	=	0xe6d1
                    E6D2    934 _EP2GPIFFLGSEL	=	0xe6d2
                    E6D3    935 _EP2GPIFPFSTOP	=	0xe6d3
                    E6D4    936 _EP2GPIFTRIG	=	0xe6d4
                    E6DA    937 _EP4GPIFFLGSEL	=	0xe6da
                    E6DB    938 _EP4GPIFPFSTOP	=	0xe6db
                    E6DC    939 _EP4GPIFTRIG	=	0xe6dc
                    E6E2    940 _EP6GPIFFLGSEL	=	0xe6e2
                    E6E3    941 _EP6GPIFPFSTOP	=	0xe6e3
                    E6E4    942 _EP6GPIFTRIG	=	0xe6e4
                    E6EA    943 _EP8GPIFFLGSEL	=	0xe6ea
                    E6EB    944 _EP8GPIFPFSTOP	=	0xe6eb
                    E6EC    945 _EP8GPIFTRIG	=	0xe6ec
                    E6F0    946 _XGPIFSGLDATH	=	0xe6f0
                    E6F1    947 _XGPIFSGLDATLX	=	0xe6f1
                    E6F2    948 _XGPIFSGLDATLNOX	=	0xe6f2
                    E6F3    949 _GPIFREADYCFG	=	0xe6f3
                    E6F4    950 _GPIFREADYSTAT	=	0xe6f4
                    E6F5    951 _GPIFABORT	=	0xe6f5
                    E740    952 _EP0BUF	=	0xe740
                    E780    953 _EP1OUTBUF	=	0xe780
                    E7C0    954 _EP1INBUF	=	0xe7c0
                    F000    955 _EP2FIFOBUF	=	0xf000
                    F400    956 _EP4FIFOBUF	=	0xf400
                    F800    957 _EP6FIFOBUF	=	0xf800
                    FC00    958 _EP8FIFOBUF	=	0xfc00
                    0003    959 _INT0VEC_IE0	=	0x0003
                    000B    960 _INT1VEC_T0	=	0x000b
                    0013    961 _INT2VEC_IE1	=	0x0013
                    001B    962 _INT3VEC_T1	=	0x001b
                    0023    963 _INT4VEC_USART0	=	0x0023
                    002B    964 _INT5VEC_T2	=	0x002b
                    0033    965 _INT6VEC_RESUME	=	0x0033
                    003B    966 _INT7VEC_USART1	=	0x003b
                    0043    967 _INT8VEC_USB	=	0x0043
                    004B    968 _INT9VEC_I2C	=	0x004b
                    0053    969 _INT10VEC_GPIF	=	0x0053
                    005B    970 _INT11VEC_IE5	=	0x005b
                    0063    971 _INT12VEC_IE6	=	0x0063
                    0100    972 _INTVEC_SUDAV	=	0x0100
                    0104    973 _INTVEC_SOF	=	0x0104
                    0108    974 _INTVEC_SUTOK	=	0x0108
                    010C    975 _INTVEC_SUSPEND	=	0x010c
                    0110    976 _INTVEC_USBRESET	=	0x0110
                    0114    977 _INTVEC_HISPEED	=	0x0114
                    0118    978 _INTVEC_EP0ACK	=	0x0118
                    0120    979 _INTVEC_EP0IN	=	0x0120
                    0124    980 _INTVEC_EP0OUT	=	0x0124
                    0128    981 _INTVEC_EP1IN	=	0x0128
                    012C    982 _INTVEC_EP1OUT	=	0x012c
                    0130    983 _INTVEC_EP2	=	0x0130
                    0134    984 _INTVEC_EP4	=	0x0134
                    0138    985 _INTVEC_EP6	=	0x0138
                    013C    986 _INTVEC_EP8	=	0x013c
                    0140    987 _INTVEC_IBN	=	0x0140
                    0148    988 _INTVEC_EP0PING	=	0x0148
                    014C    989 _INTVEC_EP1PING	=	0x014c
                    0150    990 _INTVEC_EP2PING	=	0x0150
                    0154    991 _INTVEC_EP4PING	=	0x0154
                    0158    992 _INTVEC_EP6PING	=	0x0158
                    015C    993 _INTVEC_EP8PING	=	0x015c
                    0160    994 _INTVEC_ERRLIMIT	=	0x0160
                    0170    995 _INTVEC_EP2ISOERR	=	0x0170
                    0174    996 _INTVEC_EP4ISOERR	=	0x0174
                    0178    997 _INTVEC_EP6ISOERR	=	0x0178
                    017C    998 _INTVEC_EP8ISOERR	=	0x017c
                    0180    999 _INTVEC_EP2PF	=	0x0180
                    0184   1000 _INTVEC_EP4PF	=	0x0184
                    0188   1001 _INTVEC_EP6PF	=	0x0188
                    018C   1002 _INTVEC_EP8PF	=	0x018c
                    0190   1003 _INTVEC_EP2EF	=	0x0190
                    0194   1004 _INTVEC_EP4EF	=	0x0194
                    0198   1005 _INTVEC_EP6EF	=	0x0198
                    019C   1006 _INTVEC_EP8EF	=	0x019c
                    01A0   1007 _INTVEC_EP2FF	=	0x01a0
                    01A8   1008 _INTVEC_EP6FF	=	0x01a8
                    01AC   1009 _INTVEC_EP8FF	=	0x01ac
                    01B0   1010 _INTVEC_GPIFDONE	=	0x01b0
                    01B4   1011 _INTVEC_GPIFWF	=	0x01b4
   0000                    1012 _eeprom_addr::
   0000                    1013 	.ds 2
   0002                    1014 _eeprom_write_bytes::
   0002                    1015 	.ds 2
   0004                    1016 _eeprom_write_checksum::
   0004                    1017 	.ds 1
   0005                    1018 _debug_counter::
   0005                    1019 	.ds 2
   0007                    1020 _debug_stack_size::
   0007                    1021 	.ds 1
   0008                    1022 _debug_msg_size::
   0008                    1023 	.ds 1
   0009                    1024 _debug_stack::
   0009                    1025 	.ds 96
   0069                    1026 _debug_stack_ptr::
   0069                    1027 	.ds 2
   006B                    1028 _debug_msg_buf::
   006B                    1029 	.ds 3
   006E                    1030 _debug_read_addr::
   006E                    1031 	.ds 2
                    006C   1032 _ZTEX_DESCRIPTOR	=	0x006c
                    006D   1033 _ZTEX_DESCRIPTOR_VERSION	=	0x006d
                    006E   1034 _ZTEXID	=	0x006e
                    0072   1035 _PRODUCT_ID	=	0x0072
                    0076   1036 _FW_VERSION	=	0x0076
                    0077   1037 _INTERFACE_VERSION	=	0x0077
                    0078   1038 _INTERFACE_CAPABILITIES	=	0x0078
                    007E   1039 _MODULE_RESERVED	=	0x007e
                    008A   1040 _SN_STRING	=	0x008a
                           1041 ;--------------------------------------------------------
                           1042 ; absolute external ram data
                           1043 ;--------------------------------------------------------
                           1044 	.area XABS    (ABS,XDATA)
                           1045 ;--------------------------------------------------------
                           1046 ; external initialized ram data
                           1047 ;--------------------------------------------------------
                           1048 	.area XISEG   (XDATA)
   0000                    1049 _ep0_payload_remaining::
   0000                    1050 	.ds 2
   0002                    1051 _ep0_payload_transfer::
   0002                    1052 	.ds 1
   0003                    1053 _ep0_prev_setup_request::
   0003                    1054 	.ds 1
   0004                    1055 _ep0_vendor_cmd_setup::
   0004                    1056 	.ds 1
   0005                    1057 _ISOFRAME_COUNTER::
   0005                    1058 	.ds 8
                           1059 	.area HOME    (CODE)
                           1060 	.area GSINIT0 (CODE)
                           1061 	.area GSINIT1 (CODE)
                           1062 	.area GSINIT2 (CODE)
                           1063 	.area GSINIT3 (CODE)
                           1064 	.area GSINIT4 (CODE)
                           1065 	.area GSINIT5 (CODE)
                           1066 	.area GSINIT  (CODE)
                           1067 	.area GSFINAL (CODE)
                           1068 	.area CSEG    (CODE)
                           1069 ;--------------------------------------------------------
                           1070 ; interrupt vector 
                           1071 ;--------------------------------------------------------
                           1072 	.area HOME    (CODE)
   0000                    1073 __interrupt_vect:
   0000 02s00r00           1074 	ljmp	__sdcc_gsinit_startup
                           1075 ;--------------------------------------------------------
                           1076 ; global & static initialisations
                           1077 ;--------------------------------------------------------
                           1078 	.area HOME    (CODE)
                           1079 	.area GSINIT  (CODE)
                           1080 	.area GSFINAL (CODE)
                           1081 	.area GSINIT  (CODE)
                           1082 	.globl __sdcc_gsinit_startup
                           1083 	.globl __sdcc_program_startup
                           1084 	.globl __start__stack
                           1085 	.globl __mcs51_genXINIT
                           1086 	.globl __mcs51_genXRAMCLEAR
                           1087 	.globl __mcs51_genRAMCLEAR
                           1088 	.area GSFINAL (CODE)
   0000 02s00r03           1089 	ljmp	__sdcc_program_startup
                           1090 ;--------------------------------------------------------
                           1091 ; Home
                           1092 ;--------------------------------------------------------
                           1093 	.area HOME    (CODE)
                           1094 	.area HOME    (CODE)
   0003                    1095 __sdcc_program_startup:
   0003 12s0DrD2           1096 	lcall	_main
                           1097 ;	return from main will lock up
   0006 80 FE              1098 	sjmp .
                           1099 ;--------------------------------------------------------
                           1100 ; code
                           1101 ;--------------------------------------------------------
                           1102 	.area CSEG    (CODE)
                           1103 ;------------------------------------------------------------
                           1104 ;Allocation info for local variables in function 'abscode_intvec'
                           1105 ;------------------------------------------------------------
                           1106 ;------------------------------------------------------------
                           1107 ;	../../../include/ezintavecs.h:92: void abscode_intvec() _naked
                           1108 ;	-----------------------------------------
                           1109 ;	 function abscode_intvec
                           1110 ;	-----------------------------------------
   0000                    1111 _abscode_intvec:
                           1112 ;	naked function: no prologue.
                           1113 ;	../../../include/ezintavecs.h:317: ERROR: no line number 317 in file ../../../include/ezintavecs.h
                           1114 	
                           1115 	    .area ABSCODE (ABS,CODE)
   0000                    1116 	    .org 0x0000
   0000                    1117 	ENTRY:
   0000 02 02 00           1118 	 ljmp #0x0200
                           1119 ;	# 94 "../../../include/ezintavecs.h"
   0003                    1120 	    .org 0x0003
                           1121 ;	# 34 "../../../include/ezintavecs.h"
   0003 32                 1122 	 reti
                           1123 ;	# 94 "../../../include/ezintavecs.h"
   000B                    1124 	    .org 0x000b
                           1125 ;	# 35 "../../../include/ezintavecs.h"
   000B 32                 1126 	 reti
                           1127 ;	# 94 "../../../include/ezintavecs.h"
   0013                    1128 	    .org 0x0013
                           1129 ;	# 36 "../../../include/ezintavecs.h"
   0013 32                 1130 	 reti
                           1131 ;	# 94 "../../../include/ezintavecs.h"
   001B                    1132 	    .org 0x001b
                           1133 ;	# 37 "../../../include/ezintavecs.h"
   001B 32                 1134 	 reti
                           1135 ;	# 94 "../../../include/ezintavecs.h"
   0023                    1136 	    .org 0x0023
                           1137 ;	# 38 "../../../include/ezintavecs.h"
   0023 32                 1138 	 reti
                           1139 ;	# 94 "../../../include/ezintavecs.h"
   002B                    1140 	    .org 0x002b
                           1141 ;	# 39 "../../../include/ezintavecs.h"
   002B 32                 1142 	 reti
                           1143 ;	# 94 "../../../include/ezintavecs.h"
   0033                    1144 	    .org 0x0033
                           1145 ;	# 40 "../../../include/ezintavecs.h"
   0033 32                 1146 	 reti
                           1147 ;	# 94 "../../../include/ezintavecs.h"
   003B                    1148 	    .org 0x003b
                           1149 ;	# 41 "../../../include/ezintavecs.h"
   003B 32                 1150 	 reti
                           1151 ;	# 94 "../../../include/ezintavecs.h"
   0043                    1152 	    .org 0x0043
                           1153 ;	# 42 "../../../include/ezintavecs.h"
   0043 32                 1154 	 reti
                           1155 ;	# 94 "../../../include/ezintavecs.h"
   004B                    1156 	    .org 0x004b
                           1157 ;	# 43 "../../../include/ezintavecs.h"
   004B 32                 1158 	 reti
                           1159 ;	# 94 "../../../include/ezintavecs.h"
   0053                    1160 	    .org 0x0053
                           1161 ;	# 44 "../../../include/ezintavecs.h"
   0053 32                 1162 	 reti
                           1163 ;	# 94 "../../../include/ezintavecs.h"
   005B                    1164 	    .org 0x005b
                           1165 ;	# 45 "../../../include/ezintavecs.h"
   005B 32                 1166 	 reti
                           1167 ;	# 94 "../../../include/ezintavecs.h"
   0063                    1168 	    .org 0x0063
                           1169 ;	# 46 "../../../include/ezintavecs.h"
   0063 32                 1170 	 reti
                           1171 ;	# 94 "../../../include/ezintavecs.h"
   0100                    1172 	    .org 0x0100
                           1173 ;	# 47 "../../../include/ezintavecs.h"
   0100 32                 1174 	 reti
                           1175 ;	# 94 "../../../include/ezintavecs.h"
   0104                    1176 	    .org 0x0104
                           1177 ;	# 48 "../../../include/ezintavecs.h"
   0104 32                 1178 	 reti
                           1179 ;	# 94 "../../../include/ezintavecs.h"
   0108                    1180 	    .org 0x0108
                           1181 ;	# 49 "../../../include/ezintavecs.h"
   0108 32                 1182 	 reti
                           1183 ;	# 94 "../../../include/ezintavecs.h"
   010C                    1184 	    .org 0x010C
                           1185 ;	# 50 "../../../include/ezintavecs.h"
   010C 32                 1186 	 reti
                           1187 ;	# 94 "../../../include/ezintavecs.h"
   0110                    1188 	    .org 0x0110
                           1189 ;	# 51 "../../../include/ezintavecs.h"
   0110 32                 1190 	 reti
                           1191 ;	# 94 "../../../include/ezintavecs.h"
   0114                    1192 	    .org 0x0114
                           1193 ;	# 52 "../../../include/ezintavecs.h"
   0114 32                 1194 	 reti
                           1195 ;	# 94 "../../../include/ezintavecs.h"
   0118                    1196 	    .org 0x0118
                           1197 ;	# 53 "../../../include/ezintavecs.h"
   0118 32                 1198 	 reti
                           1199 ;	# 94 "../../../include/ezintavecs.h"
   0120                    1200 	    .org 0x0120
                           1201 ;	# 54 "../../../include/ezintavecs.h"
   0120 32                 1202 	 reti
                           1203 ;	# 94 "../../../include/ezintavecs.h"
   0124                    1204 	    .org 0x0124
                           1205 ;	# 55 "../../../include/ezintavecs.h"
   0124 32                 1206 	 reti
                           1207 ;	# 94 "../../../include/ezintavecs.h"
   0128                    1208 	    .org 0x0128
                           1209 ;	# 56 "../../../include/ezintavecs.h"
   0128 32                 1210 	 reti
                           1211 ;	# 94 "../../../include/ezintavecs.h"
   012C                    1212 	    .org 0x012C
                           1213 ;	# 57 "../../../include/ezintavecs.h"
   012C 32                 1214 	 reti
                           1215 ;	# 94 "../../../include/ezintavecs.h"
   0130                    1216 	    .org 0x0130
                           1217 ;	# 58 "../../../include/ezintavecs.h"
   0130 32                 1218 	 reti
                           1219 ;	# 94 "../../../include/ezintavecs.h"
   0134                    1220 	    .org 0x0134
                           1221 ;	# 59 "../../../include/ezintavecs.h"
   0134 32                 1222 	 reti
                           1223 ;	# 94 "../../../include/ezintavecs.h"
   0138                    1224 	    .org 0x0138
                           1225 ;	# 60 "../../../include/ezintavecs.h"
   0138 32                 1226 	 reti
                           1227 ;	# 94 "../../../include/ezintavecs.h"
   013C                    1228 	    .org 0x013C
                           1229 ;	# 61 "../../../include/ezintavecs.h"
   013C 32                 1230 	 reti
                           1231 ;	# 94 "../../../include/ezintavecs.h"
   0140                    1232 	    .org 0x0140
                           1233 ;	# 62 "../../../include/ezintavecs.h"
   0140 32                 1234 	 reti
                           1235 ;	# 94 "../../../include/ezintavecs.h"
   0148                    1236 	    .org 0x0148
                           1237 ;	# 63 "../../../include/ezintavecs.h"
   0148 32                 1238 	 reti
                           1239 ;	# 94 "../../../include/ezintavecs.h"
   014C                    1240 	    .org 0x014C
                           1241 ;	# 64 "../../../include/ezintavecs.h"
   014C 32                 1242 	 reti
                           1243 ;	# 94 "../../../include/ezintavecs.h"
   0150                    1244 	    .org 0x0150
                           1245 ;	# 65 "../../../include/ezintavecs.h"
   0150 32                 1246 	 reti
                           1247 ;	# 94 "../../../include/ezintavecs.h"
   0154                    1248 	    .org 0x0154
                           1249 ;	# 66 "../../../include/ezintavecs.h"
   0154 32                 1250 	 reti
                           1251 ;	# 94 "../../../include/ezintavecs.h"
   0158                    1252 	    .org 0x0158
                           1253 ;	# 67 "../../../include/ezintavecs.h"
   0158 32                 1254 	 reti
                           1255 ;	# 94 "../../../include/ezintavecs.h"
   015C                    1256 	    .org 0x015C
                           1257 ;	# 68 "../../../include/ezintavecs.h"
   015C 32                 1258 	 reti
                           1259 ;	# 94 "../../../include/ezintavecs.h"
   0160                    1260 	    .org 0x0160
                           1261 ;	# 69 "../../../include/ezintavecs.h"
   0160 32                 1262 	 reti
                           1263 ;	# 94 "../../../include/ezintavecs.h"
   0170                    1264 	    .org 0x0170
                           1265 ;	# 70 "../../../include/ezintavecs.h"
   0170 32                 1266 	 reti
                           1267 ;	# 94 "../../../include/ezintavecs.h"
   0174                    1268 	    .org 0x0174
                           1269 ;	# 71 "../../../include/ezintavecs.h"
   0174 32                 1270 	 reti
                           1271 ;	# 94 "../../../include/ezintavecs.h"
   0178                    1272 	    .org 0x0178
                           1273 ;	# 72 "../../../include/ezintavecs.h"
   0178 32                 1274 	 reti
                           1275 ;	# 94 "../../../include/ezintavecs.h"
   017C                    1276 	    .org 0x017C
                           1277 ;	# 73 "../../../include/ezintavecs.h"
   017C 32                 1278 	 reti
                           1279 ;	# 94 "../../../include/ezintavecs.h"
   0180                    1280 	    .org 0x0180
                           1281 ;	# 74 "../../../include/ezintavecs.h"
   0180 32                 1282 	 reti
                           1283 ;	# 94 "../../../include/ezintavecs.h"
   0184                    1284 	    .org 0x0184
                           1285 ;	# 75 "../../../include/ezintavecs.h"
   0184 32                 1286 	 reti
                           1287 ;	# 94 "../../../include/ezintavecs.h"
   0188                    1288 	    .org 0x0188
                           1289 ;	# 76 "../../../include/ezintavecs.h"
   0188 32                 1290 	 reti
                           1291 ;	# 94 "../../../include/ezintavecs.h"
   018C                    1292 	    .org 0x018C
                           1293 ;	# 77 "../../../include/ezintavecs.h"
   018C 32                 1294 	 reti
                           1295 ;	# 94 "../../../include/ezintavecs.h"
   0190                    1296 	    .org 0x0190
                           1297 ;	# 78 "../../../include/ezintavecs.h"
   0190 32                 1298 	 reti
                           1299 ;	# 94 "../../../include/ezintavecs.h"
   0194                    1300 	    .org 0x0194
                           1301 ;	# 79 "../../../include/ezintavecs.h"
   0194 32                 1302 	 reti
                           1303 ;	# 94 "../../../include/ezintavecs.h"
   0198                    1304 	    .org 0x0198
                           1305 ;	# 80 "../../../include/ezintavecs.h"
   0198 32                 1306 	 reti
                           1307 ;	# 94 "../../../include/ezintavecs.h"
   019C                    1308 	    .org 0x019C
                           1309 ;	# 81 "../../../include/ezintavecs.h"
   019C 32                 1310 	 reti
                           1311 ;	# 94 "../../../include/ezintavecs.h"
   01A0                    1312 	    .org 0x01A0
                           1313 ;	# 82 "../../../include/ezintavecs.h"
   01A0 32                 1314 	 reti
                           1315 ;	# 94 "../../../include/ezintavecs.h"
   01A8                    1316 	    .org 0x01A8
                           1317 ;	# 83 "../../../include/ezintavecs.h"
   01A8 32                 1318 	 reti
                           1319 ;	# 94 "../../../include/ezintavecs.h"
   01AC                    1320 	    .org 0x01AC
                           1321 ;	# 84 "../../../include/ezintavecs.h"
   01AC 32                 1322 	 reti
                           1323 ;	# 94 "../../../include/ezintavecs.h"
   01B0                    1324 	    .org 0x01B0
                           1325 ;	# 85 "../../../include/ezintavecs.h"
   01B0 32                 1326 	 reti
                           1327 ;	# 94 "../../../include/ezintavecs.h"
   01B4                    1328 	    .org 0x01B4
                           1329 ;	# 101 "../../../include/ezintavecs.h"
   01B4 32                 1330 	 reti
   01B8                    1331 	    .org 0x01b8
   01B8                    1332 	INTVEC_DUMMY:
   01B8 32                 1333 	        reti
                           1334 	    .area CSEG (CODE)
                           1335 	    
                           1336 ;	naked function: no epilogue.
                           1337 ;------------------------------------------------------------
                           1338 ;Allocation info for local variables in function 'wait'
                           1339 ;------------------------------------------------------------
                           1340 ;ms                        Allocated to registers r2 r3 
                           1341 ;i                         Allocated to registers r6 r7 
                           1342 ;j                         Allocated to registers r4 r5 
                           1343 ;------------------------------------------------------------
                           1344 ;	../../../include/ztex-conf.h:30: ][#noexpand[!dnapxeon!]//$0!dnapxeon!
                           1345 ;	-----------------------------------------
                           1346 ;	 function wait
                           1347 ;	-----------------------------------------
   0000                    1348 _wait:
                    0002   1349 	ar2 = 0x02
                    0003   1350 	ar3 = 0x03
                    0004   1351 	ar4 = 0x04
                    0005   1352 	ar5 = 0x05
                    0006   1353 	ar6 = 0x06
                    0007   1354 	ar7 = 0x07
                    0000   1355 	ar0 = 0x00
                    0001   1356 	ar1 = 0x01
   0000 AA 82              1357 	mov	r2,dpl
   0002 AB 83              1358 	mov	r3,dph
                           1359 ;	../../../include/ztex-utils.h:80: for (j=0; j<ms; j++) 
   0004 7C 00              1360 	mov	r4,#0x00
   0006 7D 00              1361 	mov	r5,#0x00
   0008                    1362 00104$:
   0008 C3                 1363 	clr	c
   0009 EC                 1364 	mov	a,r4
   000A 9A                 1365 	subb	a,r2
   000B ED                 1366 	mov	a,r5
   000C 9B                 1367 	subb	a,r3
   000D 50 14              1368 	jnc	00108$
                           1369 ;	../../../include/ztex-utils.h:81: for (i=0; i<1200; i++);
   000F 7E B0              1370 	mov	r6,#0xB0
   0011 7F 04              1371 	mov	r7,#0x04
   0013                    1372 00103$:
   0013 1E                 1373 	dec	r6
   0014 BE FF 01           1374 	cjne	r6,#0xff,00117$
   0017 1F                 1375 	dec	r7
   0018                    1376 00117$:
   0018 EE                 1377 	mov	a,r6
   0019 4F                 1378 	orl	a,r7
   001A 70 F7              1379 	jnz	00103$
                           1380 ;	../../../include/ztex-utils.h:80: for (j=0; j<ms; j++) 
   001C 0C                 1381 	inc	r4
   001D BC 00 E8           1382 	cjne	r4,#0x00,00104$
   0020 0D                 1383 	inc	r5
   0021 80 E5              1384 	sjmp	00104$
   0023                    1385 00108$:
   0023 22                 1386 	ret
                           1387 ;------------------------------------------------------------
                           1388 ;Allocation info for local variables in function 'uwait'
                           1389 ;------------------------------------------------------------
                           1390 ;us                        Allocated to registers r2 r3 
                           1391 ;i                         Allocated to registers r6 r7 
                           1392 ;j                         Allocated to registers r4 r5 
                           1393 ;------------------------------------------------------------
                           1394 ;	../../../include/ztex-conf.h:30: ][#noexpand[!dnapxeon!]//$0!dnapxeon!
                           1395 ;	-----------------------------------------
                           1396 ;	 function uwait
                           1397 ;	-----------------------------------------
   0024                    1398 _uwait:
   0024 AA 82              1399 	mov	r2,dpl
   0026 AB 83              1400 	mov	r3,dph
                           1401 ;	../../../include/ztex-utils.h:90: for (j=0; j<us; j++) 
   0028 7C 00              1402 	mov	r4,#0x00
   002A 7D 00              1403 	mov	r5,#0x00
   002C                    1404 00104$:
   002C C3                 1405 	clr	c
   002D EC                 1406 	mov	a,r4
   002E 9A                 1407 	subb	a,r2
   002F ED                 1408 	mov	a,r5
   0030 9B                 1409 	subb	a,r3
   0031 50 14              1410 	jnc	00108$
                           1411 ;	../../../include/ztex-utils.h:91: for (i=0; i<10; i++);
   0033 7E 0A              1412 	mov	r6,#0x0A
   0035 7F 00              1413 	mov	r7,#0x00
   0037                    1414 00103$:
   0037 1E                 1415 	dec	r6
   0038 BE FF 01           1416 	cjne	r6,#0xff,00117$
   003B 1F                 1417 	dec	r7
   003C                    1418 00117$:
   003C EE                 1419 	mov	a,r6
   003D 4F                 1420 	orl	a,r7
   003E 70 F7              1421 	jnz	00103$
                           1422 ;	../../../include/ztex-utils.h:90: for (j=0; j<us; j++) 
   0040 0C                 1423 	inc	r4
   0041 BC 00 E8           1424 	cjne	r4,#0x00,00104$
   0044 0D                 1425 	inc	r5
   0045 80 E5              1426 	sjmp	00104$
   0047                    1427 00108$:
   0047 22                 1428 	ret
                           1429 ;------------------------------------------------------------
                           1430 ;Allocation info for local variables in function 'MEM_COPY1_int'
                           1431 ;------------------------------------------------------------
                           1432 ;------------------------------------------------------------
                           1433 ;	../../../include/ztex-utils.h:99: void MEM_COPY1_int() __naked {
                           1434 ;	-----------------------------------------
                           1435 ;	 function MEM_COPY1_int
                           1436 ;	-----------------------------------------
   0048                    1437 _MEM_COPY1_int:
                           1438 ;	naked function: no prologue.
                           1439 ;	../../../include/ztex-utils.h:109: _endasm;
                           1440 	
   0048                    1441 	020001$:
   0048 75 AF 07           1442 	     mov _AUTOPTRSETUP,#0x07
   004B 90 E6 7B           1443 	     mov dptr,#_XAUTODAT1
   004E E0                 1444 	     movx a,@dptr
   004F 90 E6 7C           1445 	     mov dptr,#_XAUTODAT2
   0052 F0                 1446 	     movx @dptr,a
   0053 DA F3              1447 	     djnz r2, 020001$
   0055 22                 1448 	     ret
                           1449 	 
                           1450 ;	naked function: no epilogue.
                           1451 ;------------------------------------------------------------
                           1452 ;Allocation info for local variables in function 'i2c_waitWrite'
                           1453 ;------------------------------------------------------------
                           1454 ;i2csbuf                   Allocated to registers r2 
                           1455 ;toc                       Allocated to registers r2 
                           1456 ;------------------------------------------------------------
                           1457 ;	../../../include/ztex-eeprom.h:41: BYTE i2c_waitWrite()
                           1458 ;	-----------------------------------------
                           1459 ;	 function i2c_waitWrite
                           1460 ;	-----------------------------------------
   0056                    1461 _i2c_waitWrite:
                           1462 ;	../../../include/ztex-eeprom.h:44: for ( toc=0; toc<255 && !(I2CS & bmBIT0); toc++ );
   0056 7A 00              1463 	mov	r2,#0x00
   0058                    1464 00105$:
   0058 BA FF 00           1465 	cjne	r2,#0xFF,00116$
   005B                    1466 00116$:
   005B 50 0B              1467 	jnc	00108$
   005D 90 E6 78           1468 	mov	dptr,#_I2CS
   0060 E0                 1469 	movx	a,@dptr
   0061 FB                 1470 	mov	r3,a
   0062 20 E0 03           1471 	jb	acc.0,00108$
   0065 0A                 1472 	inc	r2
   0066 80 F0              1473 	sjmp	00105$
   0068                    1474 00108$:
                           1475 ;	../../../include/ztex-eeprom.h:45: i2csbuf = I2CS;
   0068 90 E6 78           1476 	mov	dptr,#_I2CS
   006B E0                 1477 	movx	a,@dptr
                           1478 ;	../../../include/ztex-eeprom.h:46: if ( (i2csbuf & bmBIT2) || (!(i2csbuf & bmBIT1)) ) {
   006C FA                 1479 	mov	r2,a
   006D 20 E2 04           1480 	jb	acc.2,00101$
   0070 EA                 1481 	mov	a,r2
   0071 20 E1 0B           1482 	jb	acc.1,00102$
   0074                    1483 00101$:
                           1484 ;	../../../include/ztex-eeprom.h:47: I2CS |= bmBIT6;
   0074 90 E6 78           1485 	mov	dptr,#_I2CS
   0077 E0                 1486 	movx	a,@dptr
   0078 44 40              1487 	orl	a,#0x40
   007A F0                 1488 	movx	@dptr,a
                           1489 ;	../../../include/ztex-eeprom.h:48: return 1;
   007B 75 82 01           1490 	mov	dpl,#0x01
                           1491 ;	../../../include/ztex-eeprom.h:50: return 0;
   007E 22                 1492 	ret
   007F                    1493 00102$:
   007F 75 82 00           1494 	mov	dpl,#0x00
   0082 22                 1495 	ret
                           1496 ;------------------------------------------------------------
                           1497 ;Allocation info for local variables in function 'i2c_waitRead'
                           1498 ;------------------------------------------------------------
                           1499 ;i2csbuf                   Allocated to registers r2 
                           1500 ;toc                       Allocated to registers r2 
                           1501 ;------------------------------------------------------------
                           1502 ;	../../../include/ztex-eeprom.h:57: BYTE i2c_waitRead(void)
                           1503 ;	-----------------------------------------
                           1504 ;	 function i2c_waitRead
                           1505 ;	-----------------------------------------
   0083                    1506 _i2c_waitRead:
                           1507 ;	../../../include/ztex-eeprom.h:60: for ( toc=0; toc<255 && !(I2CS & bmBIT0); toc++ );
   0083 7A 00              1508 	mov	r2,#0x00
   0085                    1509 00104$:
   0085 BA FF 00           1510 	cjne	r2,#0xFF,00115$
   0088                    1511 00115$:
   0088 50 0B              1512 	jnc	00107$
   008A 90 E6 78           1513 	mov	dptr,#_I2CS
   008D E0                 1514 	movx	a,@dptr
   008E FB                 1515 	mov	r3,a
   008F 20 E0 03           1516 	jb	acc.0,00107$
   0092 0A                 1517 	inc	r2
   0093 80 F0              1518 	sjmp	00104$
   0095                    1519 00107$:
                           1520 ;	../../../include/ztex-eeprom.h:61: i2csbuf = I2CS;
   0095 90 E6 78           1521 	mov	dptr,#_I2CS
   0098 E0                 1522 	movx	a,@dptr
                           1523 ;	../../../include/ztex-eeprom.h:62: if (i2csbuf & bmBIT2) {
   0099 FA                 1524 	mov	r2,a
   009A 30 E2 0B           1525 	jnb	acc.2,00102$
                           1526 ;	../../../include/ztex-eeprom.h:63: I2CS |= bmBIT6;
   009D 90 E6 78           1527 	mov	dptr,#_I2CS
   00A0 E0                 1528 	movx	a,@dptr
   00A1 44 40              1529 	orl	a,#0x40
   00A3 F0                 1530 	movx	@dptr,a
                           1531 ;	../../../include/ztex-eeprom.h:64: return 1;
   00A4 75 82 01           1532 	mov	dpl,#0x01
                           1533 ;	../../../include/ztex-eeprom.h:66: return 0;
   00A7 22                 1534 	ret
   00A8                    1535 00102$:
   00A8 75 82 00           1536 	mov	dpl,#0x00
   00AB 22                 1537 	ret
                           1538 ;------------------------------------------------------------
                           1539 ;Allocation info for local variables in function 'i2c_waitStart'
                           1540 ;------------------------------------------------------------
                           1541 ;toc                       Allocated to registers r2 
                           1542 ;------------------------------------------------------------
                           1543 ;	../../../include/ztex-eeprom.h:73: BYTE i2c_waitStart()
                           1544 ;	-----------------------------------------
                           1545 ;	 function i2c_waitStart
                           1546 ;	-----------------------------------------
   00AC                    1547 _i2c_waitStart:
                           1548 ;	../../../include/ztex-eeprom.h:76: for ( toc=0; toc<255; toc++ ) {
   00AC 7A 00              1549 	mov	r2,#0x00
   00AE                    1550 00103$:
   00AE BA FF 00           1551 	cjne	r2,#0xFF,00112$
   00B1                    1552 00112$:
   00B1 50 0F              1553 	jnc	00106$
                           1554 ;	../../../include/ztex-eeprom.h:77: if ( ! (I2CS & bmBIT2) )
   00B3 90 E6 78           1555 	mov	dptr,#_I2CS
   00B6 E0                 1556 	movx	a,@dptr
   00B7 FB                 1557 	mov	r3,a
   00B8 20 E2 04           1558 	jb	acc.2,00105$
                           1559 ;	../../../include/ztex-eeprom.h:78: return 0;
   00BB 75 82 00           1560 	mov	dpl,#0x00
   00BE 22                 1561 	ret
   00BF                    1562 00105$:
                           1563 ;	../../../include/ztex-eeprom.h:76: for ( toc=0; toc<255; toc++ ) {
   00BF 0A                 1564 	inc	r2
   00C0 80 EC              1565 	sjmp	00103$
   00C2                    1566 00106$:
                           1567 ;	../../../include/ztex-eeprom.h:80: return 1;
   00C2 75 82 01           1568 	mov	dpl,#0x01
   00C5 22                 1569 	ret
                           1570 ;------------------------------------------------------------
                           1571 ;Allocation info for local variables in function 'i2c_waitStop'
                           1572 ;------------------------------------------------------------
                           1573 ;toc                       Allocated to registers r2 
                           1574 ;------------------------------------------------------------
                           1575 ;	../../../include/ztex-eeprom.h:87: BYTE i2c_waitStop()
                           1576 ;	-----------------------------------------
                           1577 ;	 function i2c_waitStop
                           1578 ;	-----------------------------------------
   00C6                    1579 _i2c_waitStop:
                           1580 ;	../../../include/ztex-eeprom.h:90: for ( toc=0; toc<255; toc++ ) {
   00C6 7A 00              1581 	mov	r2,#0x00
   00C8                    1582 00103$:
   00C8 BA FF 00           1583 	cjne	r2,#0xFF,00112$
   00CB                    1584 00112$:
   00CB 50 0F              1585 	jnc	00106$
                           1586 ;	../../../include/ztex-eeprom.h:91: if ( ! (I2CS & bmBIT6) )
   00CD 90 E6 78           1587 	mov	dptr,#_I2CS
   00D0 E0                 1588 	movx	a,@dptr
   00D1 FB                 1589 	mov	r3,a
   00D2 20 E6 04           1590 	jb	acc.6,00105$
                           1591 ;	../../../include/ztex-eeprom.h:92: return 0;
   00D5 75 82 00           1592 	mov	dpl,#0x00
   00D8 22                 1593 	ret
   00D9                    1594 00105$:
                           1595 ;	../../../include/ztex-eeprom.h:90: for ( toc=0; toc<255; toc++ ) {
   00D9 0A                 1596 	inc	r2
   00DA 80 EC              1597 	sjmp	00103$
   00DC                    1598 00106$:
                           1599 ;	../../../include/ztex-eeprom.h:94: return 1;
   00DC 75 82 01           1600 	mov	dpl,#0x01
   00DF 22                 1601 	ret
                           1602 ;------------------------------------------------------------
                           1603 ;Allocation info for local variables in function 'eeprom_select'
                           1604 ;------------------------------------------------------------
                           1605 ;stop                      Allocated with name '_eeprom_select_PARM_2'
                           1606 ;to                        Allocated to registers r2 
                           1607 ;toc                       Allocated to registers 
                           1608 ;------------------------------------------------------------
                           1609 ;	../../../include/ztex-eeprom.h:103: BYTE eeprom_select ( BYTE to, BYTE stop ) {
                           1610 ;	-----------------------------------------
                           1611 ;	 function eeprom_select
                           1612 ;	-----------------------------------------
   00E0                    1613 _eeprom_select:
   00E0 AA 82              1614 	mov	r2,dpl
                           1615 ;	../../../include/ztex-eeprom.h:105: eeprom_select_start:
   00E2 C3                 1616 	clr	c
   00E3 E4                 1617 	clr	a
   00E4 9A                 1618 	subb	a,r2
   00E5 E4                 1619 	clr	a
   00E6 33                 1620 	rlc	a
   00E7 FA                 1621 	mov	r2,a
   00E8                    1622 00101$:
                           1623 ;	../../../include/ztex-conf.h:30: ][#noexpand[!dnapxeon!]//$0!dnapxeon!
   00E8 90 E6 78           1624 	mov	dptr,#_I2CS
   00EB E0                 1625 	movx	a,@dptr
   00EC 44 80              1626 	orl	a,#0x80
   00EE F0                 1627 	movx	@dptr,a
                           1628 ;	../../../include/ztex-eeprom.h:107: i2c_waitStart();
   00EF C0 02              1629 	push	ar2
   00F1 12s00rAC           1630 	lcall	_i2c_waitStart
                           1631 ;	../../../include/ztex-conf.h:30: ][#noexpand[!dnapxeon!]//$0!dnapxeon!
   00F4 90 E6 79           1632 	mov	dptr,#_I2DAT
   00F7 74 A2              1633 	mov	a,#0xA2
   00F9 F0                 1634 	movx	@dptr,a
                           1635 ;	../../../include/ztex-eeprom.h:109: if ( ! i2c_waitWrite() ) {
   00FA 12s00r56           1636 	lcall	_i2c_waitWrite
   00FD E5 82              1637 	mov	a,dpl
   00FF D0 02              1638 	pop	ar2
   0101 70 12              1639 	jnz	00107$
                           1640 ;	../../../include/ztex-eeprom.h:110: if ( stop ) {
   0103 E5*00              1641 	mov	a,_eeprom_select_PARM_2
   0105 60 0A              1642 	jz	00103$
                           1643 ;	../../../include/ztex-eeprom.h:111: I2CS |= bmBIT6;
   0107 90 E6 78           1644 	mov	dptr,#_I2CS
   010A E0                 1645 	movx	a,@dptr
   010B 44 40              1646 	orl	a,#0x40
   010D F0                 1647 	movx	@dptr,a
                           1648 ;	../../../include/ztex-eeprom.h:112: i2c_waitStop();
   010E 12s00rC6           1649 	lcall	_i2c_waitStop
   0111                    1650 00103$:
                           1651 ;	../../../include/ztex-eeprom.h:114: return 0;
   0111 75 82 00           1652 	mov	dpl,#0x00
   0114 22                 1653 	ret
   0115                    1654 00107$:
                           1655 ;	../../../include/ztex-eeprom.h:116: else if (toc<to) {
   0115 EA                 1656 	mov	a,r2
   0116 60 0C              1657 	jz	00108$
                           1658 ;	../../../include/ztex-eeprom.h:117: uwait(10);
   0118 90 00 0A           1659 	mov	dptr,#0x000A
   011B C0 02              1660 	push	ar2
   011D 12s00r24           1661 	lcall	_uwait
   0120 D0 02              1662 	pop	ar2
                           1663 ;	../../../include/ztex-eeprom.h:118: goto eeprom_select_start;
   0122 80 C4              1664 	sjmp	00101$
   0124                    1665 00108$:
                           1666 ;	../../../include/ztex-eeprom.h:120: if ( stop ) {
   0124 E5*00              1667 	mov	a,_eeprom_select_PARM_2
   0126 60 08              1668 	jz	00110$
                           1669 ;	../../../include/ztex-eeprom.h:121: I2CS |= bmBIT6;
   0128 90 E6 78           1670 	mov	dptr,#_I2CS
   012B E0                 1671 	movx	a,@dptr
   012C FA                 1672 	mov	r2,a
   012D 44 40              1673 	orl	a,#0x40
   012F F0                 1674 	movx	@dptr,a
   0130                    1675 00110$:
                           1676 ;	../../../include/ztex-eeprom.h:123: return 1;
   0130 75 82 01           1677 	mov	dpl,#0x01
   0133 22                 1678 	ret
                           1679 ;------------------------------------------------------------
                           1680 ;Allocation info for local variables in function 'eeprom_read'
                           1681 ;------------------------------------------------------------
                           1682 ;addr                      Allocated with name '_eeprom_read_PARM_2'
                           1683 ;length                    Allocated with name '_eeprom_read_PARM_3'
                           1684 ;buf                       Allocated to registers r2 r3 
                           1685 ;bytes                     Allocated to registers r4 
                           1686 ;i                         Allocated to registers 
                           1687 ;------------------------------------------------------------
                           1688 ;	../../../include/ztex-eeprom.h:131: BYTE eeprom_read ( __xdata BYTE *buf, WORD addr, BYTE length ) { 
                           1689 ;	-----------------------------------------
                           1690 ;	 function eeprom_read
                           1691 ;	-----------------------------------------
   0134                    1692 _eeprom_read:
   0134 AA 82              1693 	mov	r2,dpl
   0136 AB 83              1694 	mov	r3,dph
                           1695 ;	../../../include/ztex-eeprom.h:132: BYTE bytes = 0,i;
   0138 7C 00              1696 	mov	r4,#0x00
                           1697 ;	../../../include/ztex-eeprom.h:134: if ( length == 0 ) 
   013A E5*03              1698 	mov	a,_eeprom_read_PARM_3
                           1699 ;	../../../include/ztex-eeprom.h:135: return 0;
   013C 70 03              1700 	jnz	00102$
   013E F5 82              1701 	mov	dpl,a
   0140 22                 1702 	ret
   0141                    1703 00102$:
                           1704 ;	../../../include/ztex-eeprom.h:137: if ( eeprom_select(100,0) ) 
   0141 75*00 00           1705 	mov	_eeprom_select_PARM_2,#0x00
   0144 75 82 64           1706 	mov	dpl,#0x64
   0147 C0 02              1707 	push	ar2
   0149 C0 03              1708 	push	ar3
   014B C0 04              1709 	push	ar4
   014D 12s00rE0           1710 	lcall	_eeprom_select
   0150 E5 82              1711 	mov	a,dpl
   0152 D0 04              1712 	pop	ar4
   0154 D0 03              1713 	pop	ar3
   0156 D0 02              1714 	pop	ar2
   0158 60 03              1715 	jz	00134$
   015A 02s02r37           1716 	ljmp	00117$
   015D                    1717 00134$:
                           1718 ;	../../../include/ztex-eeprom.h:30: ***** global variables **********************************************
   015D 90 E6 79           1719 	mov	dptr,#_I2DAT
   0160 E5*02              1720 	mov	a,(_eeprom_read_PARM_2 + 1)
   0162 F0                 1721 	movx	@dptr,a
                           1722 ;	../../../include/ztex-eeprom.h:141: if ( i2c_waitWrite() ) goto eeprom_read_end;
   0163 C0 02              1723 	push	ar2
   0165 C0 03              1724 	push	ar3
   0167 C0 04              1725 	push	ar4
   0169 12s00r56           1726 	lcall	_i2c_waitWrite
   016C E5 82              1727 	mov	a,dpl
   016E D0 04              1728 	pop	ar4
   0170 D0 03              1729 	pop	ar3
   0172 D0 02              1730 	pop	ar2
   0174 60 03              1731 	jz	00135$
   0176 02s02r37           1732 	ljmp	00117$
   0179                    1733 00135$:
                           1734 ;	../../../include/ztex-conf.h:30: ][#noexpand[!dnapxeon!]//$0!dnapxeon!
   0179 90 E6 79           1735 	mov	dptr,#_I2DAT
   017C E5*01              1736 	mov	a,_eeprom_read_PARM_2
   017E F0                 1737 	movx	@dptr,a
                           1738 ;	../../../include/ztex-eeprom.h:143: if ( i2c_waitWrite() ) goto eeprom_read_end;
   017F C0 02              1739 	push	ar2
   0181 C0 03              1740 	push	ar3
   0183 C0 04              1741 	push	ar4
   0185 12s00r56           1742 	lcall	_i2c_waitWrite
   0188 E5 82              1743 	mov	a,dpl
   018A D0 04              1744 	pop	ar4
   018C D0 03              1745 	pop	ar3
   018E D0 02              1746 	pop	ar2
   0190 60 03              1747 	jz	00136$
   0192 02s02r37           1748 	ljmp	00117$
   0195                    1749 00136$:
                           1750 ;	../../../include/ztex-eeprom.h:144: I2CS |= bmBIT6;
   0195 90 E6 78           1751 	mov	dptr,#_I2CS
   0198 E0                 1752 	movx	a,@dptr
   0199 44 40              1753 	orl	a,#0x40
   019B F0                 1754 	movx	@dptr,a
                           1755 ;	../../../include/ztex-eeprom.h:145: i2c_waitStop();
   019C C0 02              1756 	push	ar2
   019E C0 03              1757 	push	ar3
   01A0 C0 04              1758 	push	ar4
   01A2 12s00rC6           1759 	lcall	_i2c_waitStop
                           1760 ;	../../../include/ztex-conf.h:30: ][#noexpand[!dnapxeon!]//$0!dnapxeon!
   01A5 90 E6 78           1761 	mov	dptr,#_I2CS
   01A8 E0                 1762 	movx	a,@dptr
   01A9 44 80              1763 	orl	a,#0x80
   01AB F0                 1764 	movx	@dptr,a
                           1765 ;	../../../include/ztex-eeprom.h:148: i2c_waitStart();
   01AC 12s00rAC           1766 	lcall	_i2c_waitStart
                           1767 ;	../../../include/ztex-conf.h:30: ][#noexpand[!dnapxeon!]//$0!dnapxeon!
   01AF 90 E6 79           1768 	mov	dptr,#_I2DAT
   01B2 74 A3              1769 	mov	a,#0xA3
   01B4 F0                 1770 	movx	@dptr,a
                           1771 ;	../../../include/ztex-eeprom.h:150: if ( i2c_waitWrite() ) goto eeprom_read_end;
   01B5 12s00r56           1772 	lcall	_i2c_waitWrite
   01B8 E5 82              1773 	mov	a,dpl
   01BA D0 04              1774 	pop	ar4
   01BC D0 03              1775 	pop	ar3
   01BE D0 02              1776 	pop	ar2
   01C0 70 75              1777 	jnz	00117$
                           1778 ;	../../../include/ztex-conf.h:30: ][#noexpand[!dnapxeon!]//$0!dnapxeon!
   01C2 90 E6 79           1779 	mov	dptr,#_I2DAT
   01C5 E0                 1780 	movx	a,@dptr
   01C6 8A 82              1781 	mov	dpl,r2
   01C8 8B 83              1782 	mov	dph,r3
   01CA F0                 1783 	movx	@dptr,a
                           1784 ;	../../../include/ztex-eeprom.h:153: if ( i2c_waitRead()) goto eeprom_read_end; 
   01CB C0 02              1785 	push	ar2
   01CD C0 03              1786 	push	ar3
   01CF C0 04              1787 	push	ar4
   01D1 12s00r83           1788 	lcall	_i2c_waitRead
   01D4 E5 82              1789 	mov	a,dpl
   01D6 D0 04              1790 	pop	ar4
   01D8 D0 03              1791 	pop	ar3
   01DA D0 02              1792 	pop	ar2
   01DC 70 59              1793 	jnz	00117$
   01DE FD                 1794 	mov	r5,a
   01DF                    1795 00118$:
                           1796 ;	../../../include/ztex-eeprom.h:154: for (; bytes<length; bytes++ ) {
   01DF C3                 1797 	clr	c
   01E0 ED                 1798 	mov	a,r5
   01E1 95*03              1799 	subb	a,_eeprom_read_PARM_3
   01E3 50 2A              1800 	jnc	00121$
                           1801 ;	../../../include/ztex-conf.h:30: ][#noexpand[!dnapxeon!]//$0!dnapxeon!
   01E5 90 E6 79           1802 	mov	dptr,#_I2DAT
   01E8 E0                 1803 	movx	a,@dptr
   01E9 8A 82              1804 	mov	dpl,r2
   01EB 8B 83              1805 	mov	dph,r3
   01ED F0                 1806 	movx	@dptr,a
   01EE A3                 1807 	inc	dptr
   01EF AA 82              1808 	mov	r2,dpl
   01F1 AB 83              1809 	mov	r3,dph
                           1810 ;	../../../include/ztex-eeprom.h:156: buf++;
                           1811 ;	../../../include/ztex-eeprom.h:157: if ( i2c_waitRead()) goto eeprom_read_end; 
   01F3 C0 02              1812 	push	ar2
   01F5 C0 03              1813 	push	ar3
   01F7 C0 04              1814 	push	ar4
   01F9 C0 05              1815 	push	ar5
   01FB 12s00r83           1816 	lcall	_i2c_waitRead
   01FE E5 82              1817 	mov	a,dpl
   0200 D0 05              1818 	pop	ar5
   0202 D0 04              1819 	pop	ar4
   0204 D0 03              1820 	pop	ar3
   0206 D0 02              1821 	pop	ar2
   0208 70 2D              1822 	jnz	00117$
                           1823 ;	../../../include/ztex-eeprom.h:154: for (; bytes<length; bytes++ ) {
   020A 0D                 1824 	inc	r5
   020B 8D 04              1825 	mov	ar4,r5
   020D 80 D0              1826 	sjmp	00118$
   020F                    1827 00121$:
                           1828 ;	../../../include/ztex-conf.h:30: ][#noexpand[!dnapxeon!]//$0!dnapxeon!
   020F 90 E6 78           1829 	mov	dptr,#_I2CS
   0212 E0                 1830 	movx	a,@dptr
   0213 44 20              1831 	orl	a,#0x20
   0215 F0                 1832 	movx	@dptr,a
   0216 90 E6 79           1833 	mov	dptr,#_I2DAT
   0219 E0                 1834 	movx	a,@dptr
                           1835 ;	../../../include/ztex-eeprom.h:162: if ( i2c_waitRead()) goto eeprom_read_end; 
   021A C0 04              1836 	push	ar4
   021C 12s00r83           1837 	lcall	_i2c_waitRead
   021F E5 82              1838 	mov	a,dpl
   0221 D0 04              1839 	pop	ar4
   0223 70 12              1840 	jnz	00117$
                           1841 ;	../../../include/ztex-conf.h:30: ][#noexpand[!dnapxeon!]//$0!dnapxeon!
   0225 90 E6 78           1842 	mov	dptr,#_I2CS
   0228 E0                 1843 	movx	a,@dptr
   0229 44 40              1844 	orl	a,#0x40
   022B F0                 1845 	movx	@dptr,a
   022C 90 E6 79           1846 	mov	dptr,#_I2DAT
   022F E0                 1847 	movx	a,@dptr
                           1848 ;	../../../include/ztex-eeprom.h:166: i2c_waitStop();
   0230 C0 04              1849 	push	ar4
   0232 12s00rC6           1850 	lcall	_i2c_waitStop
   0235 D0 04              1851 	pop	ar4
                           1852 ;	../../../include/ztex-eeprom.h:168: eeprom_read_end:
   0237                    1853 00117$:
                           1854 ;	../../../include/ztex-eeprom.h:169: return bytes;
   0237 8C 82              1855 	mov	dpl,r4
   0239 22                 1856 	ret
                           1857 ;------------------------------------------------------------
                           1858 ;Allocation info for local variables in function 'eeprom_write'
                           1859 ;------------------------------------------------------------
                           1860 ;addr                      Allocated with name '_eeprom_write_PARM_2'
                           1861 ;length                    Allocated with name '_eeprom_write_PARM_3'
                           1862 ;buf                       Allocated to registers r2 r3 
                           1863 ;bytes                     Allocated to registers r4 
                           1864 ;------------------------------------------------------------
                           1865 ;	../../../include/ztex-eeprom.h:178: BYTE eeprom_write ( __xdata BYTE *buf, WORD addr, BYTE length ) {
                           1866 ;	-----------------------------------------
                           1867 ;	 function eeprom_write
                           1868 ;	-----------------------------------------
   023A                    1869 _eeprom_write:
   023A AA 82              1870 	mov	r2,dpl
   023C AB 83              1871 	mov	r3,dph
                           1872 ;	../../../include/ztex-eeprom.h:179: BYTE bytes = 0;
   023E 7C 00              1873 	mov	r4,#0x00
                           1874 ;	../../../include/ztex-eeprom.h:181: if ( eeprom_select(100,0) ) 
   0240 75*00 00           1875 	mov	_eeprom_select_PARM_2,#0x00
   0243 75 82 64           1876 	mov	dpl,#0x64
   0246 C0 02              1877 	push	ar2
   0248 C0 03              1878 	push	ar3
   024A C0 04              1879 	push	ar4
   024C 12s00rE0           1880 	lcall	_eeprom_select
   024F E5 82              1881 	mov	a,dpl
   0251 D0 04              1882 	pop	ar4
   0253 D0 03              1883 	pop	ar3
   0255 D0 02              1884 	pop	ar2
   0257 60 03              1885 	jz	00121$
   0259 02s02rED           1886 	ljmp	00109$
   025C                    1887 00121$:
                           1888 ;	../../../include/ztex-eeprom.h:30: ***** global variables **********************************************
   025C 90 E6 79           1889 	mov	dptr,#_I2DAT
   025F E5*05              1890 	mov	a,(_eeprom_write_PARM_2 + 1)
   0261 F0                 1891 	movx	@dptr,a
                           1892 ;	../../../include/ztex-eeprom.h:185: if ( i2c_waitWrite() ) goto eeprom_write_end;
   0262 C0 02              1893 	push	ar2
   0264 C0 03              1894 	push	ar3
   0266 C0 04              1895 	push	ar4
   0268 12s00r56           1896 	lcall	_i2c_waitWrite
   026B E5 82              1897 	mov	a,dpl
   026D D0 04              1898 	pop	ar4
   026F D0 03              1899 	pop	ar3
   0271 D0 02              1900 	pop	ar2
   0273 60 03              1901 	jz	00122$
   0275 02s02rED           1902 	ljmp	00109$
   0278                    1903 00122$:
                           1904 ;	../../../include/ztex-conf.h:30: ][#noexpand[!dnapxeon!]//$0!dnapxeon!
   0278 90 E6 79           1905 	mov	dptr,#_I2DAT
   027B E5*04              1906 	mov	a,_eeprom_write_PARM_2
   027D F0                 1907 	movx	@dptr,a
                           1908 ;	../../../include/ztex-eeprom.h:187: if ( i2c_waitWrite() ) goto eeprom_write_end;
   027E C0 02              1909 	push	ar2
   0280 C0 03              1910 	push	ar3
   0282 C0 04              1911 	push	ar4
   0284 12s00r56           1912 	lcall	_i2c_waitWrite
   0287 E5 82              1913 	mov	a,dpl
   0289 D0 04              1914 	pop	ar4
   028B D0 03              1915 	pop	ar3
   028D D0 02              1916 	pop	ar2
   028F 70 5C              1917 	jnz	00109$
   0291 FD                 1918 	mov	r5,a
   0292                    1919 00110$:
                           1920 ;	../../../include/ztex-eeprom.h:189: for (; bytes<length; bytes++ ) {
   0292 C3                 1921 	clr	c
   0293 ED                 1922 	mov	a,r5
   0294 95*06              1923 	subb	a,_eeprom_write_PARM_3
   0296 50 47              1924 	jnc	00113$
                           1925 ;	../../../include/ztex-conf.h:30: ][#noexpand[!dnapxeon!]//$0!dnapxeon!
   0298 8A 82              1926 	mov	dpl,r2
   029A 8B 83              1927 	mov	dph,r3
   029C E0                 1928 	movx	a,@dptr
   029D FE                 1929 	mov	r6,a
   029E A3                 1930 	inc	dptr
   029F AA 82              1931 	mov	r2,dpl
   02A1 AB 83              1932 	mov	r3,dph
   02A3 90 E6 79           1933 	mov	dptr,#_I2DAT
   02A6 EE                 1934 	mov	a,r6
   02A7 F0                 1935 	movx	@dptr,a
                           1936 ;	../../../include/ztex-eeprom.h:191: eeprom_write_checksum += *buf;
   02A8 90s00r04           1937 	mov	dptr,#_eeprom_write_checksum
   02AB E0                 1938 	movx	a,@dptr
   02AC FF                 1939 	mov	r7,a
   02AD EE                 1940 	mov	a,r6
   02AE 2F                 1941 	add	a,r7
   02AF F0                 1942 	movx	@dptr,a
                           1943 ;	../../../include/ztex-eeprom.h:192: buf++;
                           1944 ;	../../../include/ztex-eeprom.h:193: eeprom_write_bytes+=1;
   02B0 90s00r02           1945 	mov	dptr,#_eeprom_write_bytes
   02B3 E0                 1946 	movx	a,@dptr
   02B4 FE                 1947 	mov	r6,a
   02B5 A3                 1948 	inc	dptr
   02B6 E0                 1949 	movx	a,@dptr
   02B7 FF                 1950 	mov	r7,a
   02B8 90s00r02           1951 	mov	dptr,#_eeprom_write_bytes
   02BB 74 01              1952 	mov	a,#0x01
   02BD 2E                 1953 	add	a,r6
   02BE F0                 1954 	movx	@dptr,a
   02BF E4                 1955 	clr	a
   02C0 3F                 1956 	addc	a,r7
   02C1 A3                 1957 	inc	dptr
   02C2 F0                 1958 	movx	@dptr,a
                           1959 ;	../../../include/ztex-eeprom.h:194: if ( i2c_waitWrite() ) goto eeprom_write_end;
   02C3 C0 02              1960 	push	ar2
   02C5 C0 03              1961 	push	ar3
   02C7 C0 04              1962 	push	ar4
   02C9 C0 05              1963 	push	ar5
   02CB 12s00r56           1964 	lcall	_i2c_waitWrite
   02CE E5 82              1965 	mov	a,dpl
   02D0 D0 05              1966 	pop	ar5
   02D2 D0 04              1967 	pop	ar4
   02D4 D0 03              1968 	pop	ar3
   02D6 D0 02              1969 	pop	ar2
   02D8 70 13              1970 	jnz	00109$
                           1971 ;	../../../include/ztex-eeprom.h:189: for (; bytes<length; bytes++ ) {
   02DA 0D                 1972 	inc	r5
   02DB 8D 04              1973 	mov	ar4,r5
   02DD 80 B3              1974 	sjmp	00110$
   02DF                    1975 00113$:
                           1976 ;	../../../include/ztex-conf.h:30: ][#noexpand[!dnapxeon!]//$0!dnapxeon!
   02DF 90 E6 78           1977 	mov	dptr,#_I2CS
   02E2 E0                 1978 	movx	a,@dptr
   02E3 44 40              1979 	orl	a,#0x40
   02E5 F0                 1980 	movx	@dptr,a
                           1981 ;	../../../include/ztex-eeprom.h:197: i2c_waitStop();
   02E6 C0 04              1982 	push	ar4
   02E8 12s00rC6           1983 	lcall	_i2c_waitStop
   02EB D0 04              1984 	pop	ar4
                           1985 ;	../../../include/ztex-eeprom.h:199: eeprom_write_end:
   02ED                    1986 00109$:
                           1987 ;	../../../include/ztex-eeprom.h:200: return bytes;
   02ED 8C 82              1988 	mov	dpl,r4
   02EF 22                 1989 	ret
                           1990 ;------------------------------------------------------------
                           1991 ;Allocation info for local variables in function 'eeprom_read_ep0'
                           1992 ;------------------------------------------------------------
                           1993 ;i                         Allocated to registers r3 
                           1994 ;b                         Allocated to registers r2 
                           1995 ;------------------------------------------------------------
                           1996 ;	../../../include/ztex-eeprom.h:206: BYTE eeprom_read_ep0 () { 
                           1997 ;	-----------------------------------------
                           1998 ;	 function eeprom_read_ep0
                           1999 ;	-----------------------------------------
   02F0                    2000 _eeprom_read_ep0:
                           2001 ;	../../../include/ztex-eeprom.h:208: b = ep0_payload_transfer;
   02F0 90s00r02           2002 	mov	dptr,#_ep0_payload_transfer
   02F3 E0                 2003 	movx	a,@dptr
   02F4 FA                 2004 	mov	r2,a
                           2005 ;	../../../include/ztex-eeprom.h:209: i = eeprom_read(EP0BUF, eeprom_addr, b);
   02F5 90s00r00           2006 	mov	dptr,#_eeprom_addr
   02F8 E0                 2007 	movx	a,@dptr
   02F9 F5*01              2008 	mov	_eeprom_read_PARM_2,a
   02FB A3                 2009 	inc	dptr
   02FC E0                 2010 	movx	a,@dptr
   02FD F5*02              2011 	mov	(_eeprom_read_PARM_2 + 1),a
   02FF 8A*03              2012 	mov	_eeprom_read_PARM_3,r2
   0301 90 E7 40           2013 	mov	dptr,#_EP0BUF
   0304 C0 02              2014 	push	ar2
   0306 12s01r34           2015 	lcall	_eeprom_read
   0309 AB 82              2016 	mov	r3,dpl
   030B D0 02              2017 	pop	ar2
                           2018 ;	../../../include/ztex-eeprom.h:210: eeprom_addr += b;
   030D 7C 00              2019 	mov	r4,#0x00
   030F 90s00r00           2020 	mov	dptr,#_eeprom_addr
   0312 E0                 2021 	movx	a,@dptr
   0313 FD                 2022 	mov	r5,a
   0314 A3                 2023 	inc	dptr
   0315 E0                 2024 	movx	a,@dptr
   0316 FE                 2025 	mov	r6,a
   0317 90s00r00           2026 	mov	dptr,#_eeprom_addr
   031A EA                 2027 	mov	a,r2
   031B 2D                 2028 	add	a,r5
   031C F0                 2029 	movx	@dptr,a
   031D EC                 2030 	mov	a,r4
   031E 3E                 2031 	addc	a,r6
   031F A3                 2032 	inc	dptr
   0320 F0                 2033 	movx	@dptr,a
                           2034 ;	../../../include/ztex-eeprom.h:211: return i;
   0321 8B 82              2035 	mov	dpl,r3
   0323 22                 2036 	ret
                           2037 ;------------------------------------------------------------
                           2038 ;Allocation info for local variables in function 'eeprom_write_ep0'
                           2039 ;------------------------------------------------------------
                           2040 ;length                    Allocated to registers r2 
                           2041 ;------------------------------------------------------------
                           2042 ;	../../../include/ztex-eeprom.h:227: void eeprom_write_ep0 ( BYTE length ) { 	
                           2043 ;	-----------------------------------------
                           2044 ;	 function eeprom_write_ep0
                           2045 ;	-----------------------------------------
   0324                    2046 _eeprom_write_ep0:
   0324 AA 82              2047 	mov	r2,dpl
                           2048 ;	../../../include/ztex-eeprom.h:228: eeprom_write(EP0BUF, eeprom_addr, length);
   0326 90s00r00           2049 	mov	dptr,#_eeprom_addr
   0329 E0                 2050 	movx	a,@dptr
   032A F5*04              2051 	mov	_eeprom_write_PARM_2,a
   032C A3                 2052 	inc	dptr
   032D E0                 2053 	movx	a,@dptr
   032E F5*05              2054 	mov	(_eeprom_write_PARM_2 + 1),a
   0330 8A*06              2055 	mov	_eeprom_write_PARM_3,r2
   0332 90 E7 40           2056 	mov	dptr,#_EP0BUF
   0335 C0 02              2057 	push	ar2
   0337 12s02r3A           2058 	lcall	_eeprom_write
   033A D0 02              2059 	pop	ar2
                           2060 ;	../../../include/ztex-eeprom.h:229: eeprom_addr += length;
   033C 7B 00              2061 	mov	r3,#0x00
   033E 90s00r00           2062 	mov	dptr,#_eeprom_addr
   0341 E0                 2063 	movx	a,@dptr
   0342 FC                 2064 	mov	r4,a
   0343 A3                 2065 	inc	dptr
   0344 E0                 2066 	movx	a,@dptr
   0345 FD                 2067 	mov	r5,a
   0346 90s00r00           2068 	mov	dptr,#_eeprom_addr
   0349 EA                 2069 	mov	a,r2
   034A 2C                 2070 	add	a,r4
   034B F0                 2071 	movx	@dptr,a
   034C EB                 2072 	mov	a,r3
   034D 3D                 2073 	addc	a,r5
   034E A3                 2074 	inc	dptr
   034F F0                 2075 	movx	@dptr,a
   0350 22                 2076 	ret
                           2077 ;------------------------------------------------------------
                           2078 ;Allocation info for local variables in function 'debug_add_msg'
                           2079 ;------------------------------------------------------------
                           2080 ;i                         Allocated to registers r4 
                           2081 ;------------------------------------------------------------
                           2082 ;	../../../include/ztex-debug.h:48: void debug_add_msg () {
                           2083 ;	-----------------------------------------
                           2084 ;	 function debug_add_msg
                           2085 ;	-----------------------------------------
   0351                    2086 _debug_add_msg:
                           2087 ;	../../../include/ztex-debug.h:50: i = debug_counter % DEBUG_STACK_SIZE;
   0351 90s00r05           2088 	mov	dptr,#_debug_counter
   0354 E0                 2089 	movx	a,@dptr
   0355 FA                 2090 	mov	r2,a
   0356 A3                 2091 	inc	dptr
   0357 E0                 2092 	movx	a,@dptr
   0358 FB                 2093 	mov	r3,a
   0359 74 1F              2094 	mov	a,#0x1F
   035B 5A                 2095 	anl	a,r2
                           2096 ;	../../../include/ztex-debug.h:51: debug_stack_ptr = &debug_stack[i*DEBUG_MSG_SIZE];
   035C 75 F0 03           2097 	mov	b,#0x03
   035F A4                 2098 	mul	ab
   0360 24r09              2099 	add	a,#_debug_stack
   0362 FC                 2100 	mov	r4,a
   0363 E4                 2101 	clr	a
   0364 34s00              2102 	addc	a,#(_debug_stack >> 8)
   0366 FD                 2103 	mov	r5,a
   0367 90s00r69           2104 	mov	dptr,#_debug_stack_ptr
   036A EC                 2105 	mov	a,r4
   036B F0                 2106 	movx	@dptr,a
   036C A3                 2107 	inc	dptr
   036D ED                 2108 	mov	a,r5
   036E F0                 2109 	movx	@dptr,a
                           2110 ;	../../../include/ztex-utils.h:120: AUTOPTRL1=LO(&($0));
   036F 75 9Br6B           2111 	mov	_AUTOPTRL1,#_debug_msg_buf
                           2112 ;	../../../include/ztex-utils.h:121: AUTOPTRH1=HI(&($0));
   0372 7Er6B              2113 	mov	r6,#_debug_msg_buf
   0374 7Fs00              2114 	mov	r7,#(_debug_msg_buf >> 8)
   0376 8F 9A              2115 	mov	_AUTOPTRH1,r7
                           2116 ;	../../../include/ztex-utils.h:122: AUTOPTRL2=LO(&($1));
   0378 8C 06              2117 	mov	ar6,r4
   037A 8D 07              2118 	mov	ar7,r5
   037C 8E 9E              2119 	mov	_AUTOPTRL2,r6
                           2120 ;	../../../include/ztex-utils.h:123: AUTOPTRH2=HI(&($1));
   037E 8D 9D              2121 	mov	_AUTOPTRH2,r5
                           2122 ;	../../../include/ztex-utils.h:129: _endasm; 
                           2123 	
   0380 C0 02              2124 	  push ar2
   0382 7A 03              2125 	    mov r2,#(3);
   0384 12s00r48           2126 	  lcall _MEM_COPY1_int
   0387 D0 02              2127 	  pop ar2
                           2128 	        
                           2129 ;	../../../include/ztex-debug.h:53: debug_counter += 1;
   0389 90s00r05           2130 	mov	dptr,#_debug_counter
   038C 74 01              2131 	mov	a,#0x01
   038E 2A                 2132 	add	a,r2
   038F F0                 2133 	movx	@dptr,a
   0390 E4                 2134 	clr	a
   0391 3B                 2135 	addc	a,r3
   0392 A3                 2136 	inc	dptr
   0393 F0                 2137 	movx	@dptr,a
   0394 22                 2138 	ret
                           2139 ;------------------------------------------------------------
                           2140 ;Allocation info for local variables in function 'debug_init'
                           2141 ;------------------------------------------------------------
                           2142 ;------------------------------------------------------------
                           2143 ;	../../../include/ztex-debug.h:60: void debug_init () {
                           2144 ;	-----------------------------------------
                           2145 ;	 function debug_init
                           2146 ;	-----------------------------------------
   0395                    2147 _debug_init:
                           2148 ;	../../../include/ztex-conf.h:30: ][#noexpand[!dnapxeon!]//$0!dnapxeon!
   0395 90s00r05           2149 	mov	dptr,#_debug_counter
   0398 E4                 2150 	clr	a
   0399 F0                 2151 	movx	@dptr,a
   039A A3                 2152 	inc	dptr
   039B F0                 2153 	movx	@dptr,a
                           2154 ;	../../../include/ztex-debug.h:62: debug_stack_size = DEBUG_STACK_SIZE;
   039C 90s00r07           2155 	mov	dptr,#_debug_stack_size
   039F 74 20              2156 	mov	a,#0x20
   03A1 F0                 2157 	movx	@dptr,a
                           2158 ;	../../../include/ztex-debug.h:63: debug_msg_size = DEBUG_MSG_SIZE;
   03A2 90s00r08           2159 	mov	dptr,#_debug_msg_size
   03A5 74 03              2160 	mov	a,#0x03
   03A7 F0                 2161 	movx	@dptr,a
                           2162 ;	../../../include/ztex-debug.h:64: debug_stack_ptr = debug_stack;
   03A8 90s00r69           2163 	mov	dptr,#_debug_stack_ptr
   03AB 74r09              2164 	mov	a,#_debug_stack
   03AD F0                 2165 	movx	@dptr,a
   03AE A3                 2166 	inc	dptr
   03AF 74s00              2167 	mov	a,#(_debug_stack >> 8)
   03B1 F0                 2168 	movx	@dptr,a
   03B2 22                 2169 	ret
                           2170 ;------------------------------------------------------------
                           2171 ;Allocation info for local variables in function 'debug_read_ep0'
                           2172 ;------------------------------------------------------------
                           2173 ;b                         Allocated to registers r2 
                           2174 ;------------------------------------------------------------
                           2175 ;	../../../include/ztex-debug.h:71: BYTE debug_read_ep0 () { 
                           2176 ;	-----------------------------------------
                           2177 ;	 function debug_read_ep0
                           2178 ;	-----------------------------------------
   03B3                    2179 _debug_read_ep0:
                           2180 ;	../../../include/ztex-debug.h:73: b = ep0_payload_transfer;
   03B3 90s00r02           2181 	mov	dptr,#_ep0_payload_transfer
   03B6 E0                 2182 	movx	a,@dptr
                           2183 ;	../../../include/ztex-debug.h:74: if ( b != 0) {
   03B7 FA                 2184 	mov	r2,a
   03B8 70 03              2185 	jnz	00106$
   03BA 02s03rD8           2186 	ljmp	00102$
   03BD                    2187 00106$:
                           2188 ;	../../../include/ztex-utils.h:120: AUTOPTRL1=LO(&($0));
   03BD 90s00r6E           2189 	mov	dptr,#_debug_read_addr
   03C0 E0                 2190 	movx	a,@dptr
   03C1 FB                 2191 	mov	r3,a
   03C2 A3                 2192 	inc	dptr
   03C3 E0                 2193 	movx	a,@dptr
   03C4 FC                 2194 	mov	r4,a
   03C5 8B 9B              2195 	mov	_AUTOPTRL1,r3
                           2196 ;	../../../include/ztex-utils.h:121: AUTOPTRH1=HI(&($0));
   03C7 8C 9A              2197 	mov	_AUTOPTRH1,r4
                           2198 ;	../../../include/ztex-utils.h:122: AUTOPTRL2=LO(&($1));
   03C9 75 9E 40           2199 	mov	_AUTOPTRL2,#0x40
                           2200 ;	../../../include/ztex-utils.h:123: AUTOPTRH2=HI(&($1));
   03CC 75 9D E7           2201 	mov	_AUTOPTRH2,#0xE7
                           2202 ;	../../../include/ztex-utils.h:129: _endasm; 
                           2203 	
   03CF C0 02              2204 	  push ar2
   03D1 7A F0              2205 	    mov r2,#(b);
   03D3 12s00r48           2206 	  lcall _MEM_COPY1_int
   03D6 D0 02              2207 	  pop ar2
                           2208 	        
   03D8                    2209 00102$:
                           2210 ;	../../../include/ztex-debug.h:77: debug_read_addr += b;
   03D8 90s00r6E           2211 	mov	dptr,#_debug_read_addr
   03DB E0                 2212 	movx	a,@dptr
   03DC FB                 2213 	mov	r3,a
   03DD A3                 2214 	inc	dptr
   03DE E0                 2215 	movx	a,@dptr
   03DF FC                 2216 	mov	r4,a
   03E0 90s00r6E           2217 	mov	dptr,#_debug_read_addr
   03E3 EA                 2218 	mov	a,r2
   03E4 2B                 2219 	add	a,r3
   03E5 F0                 2220 	movx	@dptr,a
   03E6 E4                 2221 	clr	a
   03E7 3C                 2222 	addc	a,r4
   03E8 A3                 2223 	inc	dptr
   03E9 F0                 2224 	movx	@dptr,a
                           2225 ;	../../../include/ztex-debug.h:78: return b;
   03EA 8A 82              2226 	mov	dpl,r2
   03EC 22                 2227 	ret
                           2228 ;------------------------------------------------------------
                           2229 ;Allocation info for local variables in function 'abscode_identity'
                           2230 ;------------------------------------------------------------
                           2231 ;------------------------------------------------------------
                           2232 ;	../../../include/ztex-descriptors.h:116: void abscode_identity() _naked
                           2233 ;	-----------------------------------------
                           2234 ;	 function abscode_identity
                           2235 ;	-----------------------------------------
   03ED                    2236 _abscode_identity:
                           2237 ;	naked function: no prologue.
                           2238 ;	../../../include/ztex-descriptors.h:170: .db MODULE_RESERVED_03
                           2239 	
                           2240 	    .area ABSCODE (ABS,CODE)
                           2241 	
   006C                    2242 	    .org 0x06c
   006C 28                 2243 	    .db 40
                           2244 	
   006D                    2245 	    .org _ZTEX_DESCRIPTOR_VERSION
   006D 01                 2246 	    .db 1
                           2247 	
   006E                    2248 	    .org _ZTEXID
   006E 5A 54 45 58        2249 	    .ascii "ZTEX"
                           2250 	
   0072                    2251 	    .org _PRODUCT_ID
   0072 00                 2252 	    .db 0
   0073 00                 2253 	    .db 0
   0074 00                 2254 	    .db 0
   0075 00                 2255 	    .db 0
                           2256 	
   0076                    2257 	    .org _FW_VERSION
   0076 00                 2258 	    .db 0
                           2259 	
   0077                    2260 	    .org _INTERFACE_VERSION
   0077 01                 2261 	    .db 1
                           2262 	
   0078                    2263 	    .org _INTERFACE_CAPABILITIES
                           2264 ;	# 158 "../../../include/ztex-descriptors.h"
   0078 09                 2265 	    .db 0 + 1 + 8
                           2266 ;	# 160 "../../../include/ztex-descriptors.h"
   0079 00                 2267 	    .db 0
   007A 00                 2268 	    .db 0
   007B 00                 2269 	    .db 0
   007C 00                 2270 	    .db 0
   007D 00                 2271 	    .db 0
                           2272 	
   007E                    2273 	    .org _MODULE_RESERVED
   007E 00                 2274 	    .db 0
   007F 00                 2275 	    .db 0
   0080 00                 2276 	    .db 0
   0081 00                 2277 	    .db 0
   0082 00                 2278 	    .db 0
   0083 00                 2279 	    .db 0
   0084 00                 2280 	    .db 0
   0085 00                 2281 	    .db 0
   0086 00                 2282 	    .db 0
   0087 00                 2283 	    .db 0
   0088 00                 2284 	    .db 0
   0089 00                 2285 	    .db 0
                           2286 	
   008A                    2287 	    .org _SN_STRING
   008A 30 30 30 30 30 30  2288 	    .ascii "0000000000"
        30 30 30 30
                           2289 	
                           2290 	    .area CSEG (CODE)
                           2291 	    
                           2292 ;	naked function: no epilogue.
                           2293 ;------------------------------------------------------------
                           2294 ;Allocation info for local variables in function 'resetToggleData'
                           2295 ;------------------------------------------------------------
                           2296 ;------------------------------------------------------------
                           2297 ;	../../../include/ztex-isr.h:34: static void resetToggleData () {
                           2298 ;	-----------------------------------------
                           2299 ;	 function resetToggleData
                           2300 ;	-----------------------------------------
   03ED                    2301 _resetToggleData:
                           2302 ;	../../../include/ztex-conf.h:30: ][#noexpand[!dnapxeon!]//$0!dnapxeon!
                           2303 ;	../../../include/ztex-isr.h:46: TOGCTL = 0 | bmBIT5;
                           2304 ;	../../../include/ztex-conf.h:30: ][#noexpand[!dnapxeon!]//$0!dnapxeon!
                           2305 ;	../../../include/ztex-isr.h:48: TOGCTL = 0x10 | bmBIT5;
   03ED 90 E6 83           2306 	mov	dptr,#_TOGCTL
   03F0 E4                 2307 	clr	a
   03F1 F0                 2308 	movx	@dptr,a
   03F2 74 20              2309 	mov	a,#0x20
   03F4 F0                 2310 	movx	@dptr,a
   03F5 74 10              2311 	mov	a,#0x10
   03F7 F0                 2312 	movx	@dptr,a
   03F8 74 30              2313 	mov	a,#0x30
   03FA F0                 2314 	movx	@dptr,a
                           2315 ;	../../../include/ztex-conf.h:30: ][#noexpand[!dnapxeon!]//$0!dnapxeon!
                           2316 ;	../../../include/ztex-isr.h:51: TOGCTL = 1 | bmBIT5;
                           2317 ;	../../../include/ztex-conf.h:30: ][#noexpand[!dnapxeon!]//$0!dnapxeon!
                           2318 ;	../../../include/ztex-isr.h:55: TOGCTL = 0x11 | bmBIT5;
   03FB 90 E6 83           2319 	mov	dptr,#_TOGCTL
   03FE 74 01              2320 	mov	a,#0x01
   0400 F0                 2321 	movx	@dptr,a
   0401 74 21              2322 	mov	a,#0x21
   0403 F0                 2323 	movx	@dptr,a
   0404 74 11              2324 	mov	a,#0x11
   0406 F0                 2325 	movx	@dptr,a
   0407 74 31              2326 	mov	a,#0x31
   0409 F0                 2327 	movx	@dptr,a
   040A 22                 2328 	ret
                           2329 ;------------------------------------------------------------
                           2330 ;Allocation info for local variables in function 'sendStringDescriptor'
                           2331 ;------------------------------------------------------------
                           2332 ;hiAddr                    Allocated with name '_sendStringDescriptor_PARM_2'
                           2333 ;size                      Allocated with name '_sendStringDescriptor_PARM_3'
                           2334 ;loAddr                    Allocated to registers r2 
                           2335 ;i                         Allocated to registers r2 
                           2336 ;------------------------------------------------------------
                           2337 ;	../../../include/ztex-isr.h:68: static void sendStringDescriptor (BYTE loAddr, BYTE hiAddr, BYTE size)
                           2338 ;	-----------------------------------------
                           2339 ;	 function sendStringDescriptor
                           2340 ;	-----------------------------------------
   040B                    2341 _sendStringDescriptor:
   040B AA 82              2342 	mov	r2,dpl
                           2343 ;	../../../include/ztex-isr.h:71: if ( size > 31)
   040D E5*01              2344 	mov	a,_sendStringDescriptor_PARM_3
   040F 24 E0              2345 	add	a,#0xff - 0x1F
   0411 50 03              2346 	jnc	00102$
                           2347 ;	../../../include/ztex-isr.h:72: size = 31;
   0413 75*01 1F           2348 	mov	_sendStringDescriptor_PARM_3,#0x1F
   0416                    2349 00102$:
                           2350 ;	../../../include/ztex-isr.h:73: AUTOPTRSETUP = 7;
   0416 75 AF 07           2351 	mov	_AUTOPTRSETUP,#0x07
                           2352 ;	../../../include/ztex-isr.h:74: AUTOPTRL1 = loAddr;
   0419 8A 9B              2353 	mov	_AUTOPTRL1,r2
                           2354 ;	../../../include/ztex-isr.h:75: AUTOPTRH1 = hiAddr;
   041B 85*00 9A           2355 	mov	_AUTOPTRH1,_sendStringDescriptor_PARM_2
                           2356 ;	../../../include/ztex-isr.h:76: AUTOPTRL2 = (BYTE)(((unsigned short)(&EP0BUF))+1);
   041E 75 9E 41           2357 	mov	_AUTOPTRL2,#0x41
                           2358 ;	../../../include/ztex-isr.h:77: AUTOPTRH2 = (BYTE)((((unsigned short)(&EP0BUF))+1) >> 8);
   0421 75 9D E7           2359 	mov	_AUTOPTRH2,#0xE7
                           2360 ;	../../../include/ztex-isr.h:78: XAUTODAT2 = 3;
   0424 90 E6 7C           2361 	mov	dptr,#_XAUTODAT2
   0427 74 03              2362 	mov	a,#0x03
   0429 F0                 2363 	movx	@dptr,a
                           2364 ;	../../../include/ztex-isr.h:79: for (i=0; i<size; i++) {
   042A 7A 00              2365 	mov	r2,#0x00
   042C                    2366 00103$:
   042C C3                 2367 	clr	c
   042D EA                 2368 	mov	a,r2
   042E 95*01              2369 	subb	a,_sendStringDescriptor_PARM_3
   0430 50 11              2370 	jnc	00106$
                           2371 ;	../../../include/ztex-isr.h:80: XAUTODAT2 = XAUTODAT1;
   0432 90 E6 7B           2372 	mov	dptr,#_XAUTODAT1
   0435 E0                 2373 	movx	a,@dptr
   0436 FB                 2374 	mov	r3,a
   0437 90 E6 7C           2375 	mov	dptr,#_XAUTODAT2
   043A F0                 2376 	movx	@dptr,a
                           2377 ;	../../../include/ztex-isr.h:81: XAUTODAT2 = 0;
   043B 90 E6 7C           2378 	mov	dptr,#_XAUTODAT2
   043E E4                 2379 	clr	a
   043F F0                 2380 	movx	@dptr,a
                           2381 ;	../../../include/ztex-isr.h:79: for (i=0; i<size; i++) {
   0440 0A                 2382 	inc	r2
   0441 80 E9              2383 	sjmp	00103$
   0443                    2384 00106$:
                           2385 ;	../../../include/ztex-isr.h:83: i = (size+1) << 1;
   0443 E5*01              2386 	mov	a,_sendStringDescriptor_PARM_3
   0445 04                 2387 	inc	a
                           2388 ;	../../../include/ztex-isr.h:84: EP0BUF[0] = i;
   0446 25 E0              2389 	add	a,acc
   0448 FA                 2390 	mov	r2,a
   0449 90 E7 40           2391 	mov	dptr,#_EP0BUF
   044C F0                 2392 	movx	@dptr,a
                           2393 ;	../../../include/ztex-isr.h:85: EP0BUF[1] = 3;
   044D 90 E7 41           2394 	mov	dptr,#(_EP0BUF + 0x0001)
   0450 74 03              2395 	mov	a,#0x03
   0452 F0                 2396 	movx	@dptr,a
                           2397 ;	../../../include/ztex-isr.h:86: EP0BCH = 0;
   0453 90 E6 8A           2398 	mov	dptr,#_EP0BCH
   0456 E4                 2399 	clr	a
   0457 F0                 2400 	movx	@dptr,a
                           2401 ;	../../../include/ztex-isr.h:87: EP0BCL = i;
   0458 90 E6 8B           2402 	mov	dptr,#_EP0BCL
   045B EA                 2403 	mov	a,r2
   045C F0                 2404 	movx	@dptr,a
   045D 22                 2405 	ret
                           2406 ;------------------------------------------------------------
                           2407 ;Allocation info for local variables in function 'ep0_payload_update'
                           2408 ;------------------------------------------------------------
                           2409 ;------------------------------------------------------------
                           2410 ;	../../../include/ztex-isr.h:93: static void ep0_payload_update() {
                           2411 ;	-----------------------------------------
                           2412 ;	 function ep0_payload_update
                           2413 ;	-----------------------------------------
   045E                    2414 _ep0_payload_update:
                           2415 ;	../../../include/ztex-isr.h:94: ep0_payload_transfer = ( ep0_payload_remaining > 64 ) ? 64 : ep0_payload_remaining;
   045E 90s00r00           2416 	mov	dptr,#_ep0_payload_remaining
   0461 E0                 2417 	movx	a,@dptr
   0462 FA                 2418 	mov	r2,a
   0463 A3                 2419 	inc	dptr
   0464 E0                 2420 	movx	a,@dptr
   0465 FB                 2421 	mov	r3,a
   0466 C3                 2422 	clr	c
   0467 74 40              2423 	mov	a,#0x40
   0469 9A                 2424 	subb	a,r2
   046A E4                 2425 	clr	a
   046B 9B                 2426 	subb	a,r3
   046C 50 06              2427 	jnc	00103$
   046E 7C 40              2428 	mov	r4,#0x40
   0470 7D 00              2429 	mov	r5,#0x00
   0472 80 04              2430 	sjmp	00104$
   0474                    2431 00103$:
   0474 8A 04              2432 	mov	ar4,r2
   0476 8B 05              2433 	mov	ar5,r3
   0478                    2434 00104$:
   0478 90s00r02           2435 	mov	dptr,#_ep0_payload_transfer
   047B EC                 2436 	mov	a,r4
   047C F0                 2437 	movx	@dptr,a
                           2438 ;	../../../include/ztex-isr.h:95: ep0_payload_remaining -= ep0_payload_transfer;
   047D 7D 00              2439 	mov	r5,#0x00
   047F 90s00r00           2440 	mov	dptr,#_ep0_payload_remaining
   0482 EA                 2441 	mov	a,r2
   0483 C3                 2442 	clr	c
   0484 9C                 2443 	subb	a,r4
   0485 F0                 2444 	movx	@dptr,a
   0486 EB                 2445 	mov	a,r3
   0487 9D                 2446 	subb	a,r5
   0488 A3                 2447 	inc	dptr
   0489 F0                 2448 	movx	@dptr,a
   048A 22                 2449 	ret
                           2450 ;------------------------------------------------------------
                           2451 ;Allocation info for local variables in function 'ep0_vendor_cmd_su'
                           2452 ;------------------------------------------------------------
                           2453 ;------------------------------------------------------------
                           2454 ;	../../../include/ztex-isr.h:102: static void ep0_vendor_cmd_su() {
                           2455 ;	-----------------------------------------
                           2456 ;	 function ep0_vendor_cmd_su
                           2457 ;	-----------------------------------------
   048B                    2458 _ep0_vendor_cmd_su:
                           2459 ;	../../../include/ztex-isr.h:103: switch ( ep0_prev_setup_request ) {
   048B 90s00r03           2460 	mov	dptr,#_ep0_prev_setup_request
   048E E0                 2461 	movx	a,@dptr
   048F FA                 2462 	mov	r2,a
   0490 BA 39 24           2463 	cjne	r2,#0x39,00102$
                           2464 ;	../../../include/ztex-eeprom.h:233: eeprom_write_checksum = 0;
   0493 90s00r04           2465 	mov	dptr,#_eeprom_write_checksum
                           2466 ;	../../../include/ztex-eeprom.h:234: eeprom_write_bytes = 0;
   0496 E4                 2467 	clr	a
   0497 F0                 2468 	movx	@dptr,a
   0498 90s00r02           2469 	mov	dptr,#_eeprom_write_bytes
   049B F0                 2470 	movx	@dptr,a
   049C A3                 2471 	inc	dptr
   049D F0                 2472 	movx	@dptr,a
                           2473 ;	../../../include/ztex-conf.h:30: ][#noexpand[!dnapxeon!]//$0!dnapxeon!
   049E 90 E6 BB           2474 	mov	dptr,#(_SETUPDAT + 0x0003)
   04A1 E0                 2475 	movx	a,@dptr
   04A2 FB                 2476 	mov	r3,a
   04A3 7A 00              2477 	mov	r2,#0x00
   04A5 90 E6 BA           2478 	mov	dptr,#(_SETUPDAT + 0x0002)
   04A8 E0                 2479 	movx	a,@dptr
   04A9 FC                 2480 	mov	r4,a
   04AA 7D 00              2481 	mov	r5,#0x00
   04AC 90s00r00           2482 	mov	dptr,#_eeprom_addr
   04AF EC                 2483 	mov	a,r4
   04B0 4A                 2484 	orl	a,r2
   04B1 F0                 2485 	movx	@dptr,a
   04B2 ED                 2486 	mov	a,r5
   04B3 4B                 2487 	orl	a,r3
   04B4 A3                 2488 	inc	dptr
   04B5 F0                 2489 	movx	@dptr,a
                           2490 ;	../../../include/ztex-conf.h:115: break;
                           2491 ;	../../../include/ztex-isr.h:105: default:
   04B6 22                 2492 	ret
   04B7                    2493 00102$:
                           2494 ;	../../../include/ztex-conf.h:30: ][#noexpand[!dnapxeon!]//$0!dnapxeon!
   04B7 90 E6 A0           2495 	mov	dptr,#_EP0CS
   04BA E0                 2496 	movx	a,@dptr
   04BB 44 01              2497 	orl	a,#0x01
   04BD F0                 2498 	movx	@dptr,a
                           2499 ;	../../../include/ztex-isr.h:107: }
   04BE 22                 2500 	ret
                           2501 ;------------------------------------------------------------
                           2502 ;Allocation info for local variables in function 'SUDAV_ISR'
                           2503 ;------------------------------------------------------------
                           2504 ;a                         Allocated to registers r2 
                           2505 ;------------------------------------------------------------
                           2506 ;	../../../include/ztex-isr.h:113: static void SUDAV_ISR () interrupt
                           2507 ;	-----------------------------------------
                           2508 ;	 function SUDAV_ISR
                           2509 ;	-----------------------------------------
   04BF                    2510 _SUDAV_ISR:
   04BF C0*00              2511 	push	bits
   04C1 C0 E0              2512 	push	acc
   04C3 C0 F0              2513 	push	b
   04C5 C0 82              2514 	push	dpl
   04C7 C0 83              2515 	push	dph
   04C9 C0 02              2516 	push	(0+2)
   04CB C0 03              2517 	push	(0+3)
   04CD C0 04              2518 	push	(0+4)
   04CF C0 05              2519 	push	(0+5)
   04D1 C0 06              2520 	push	(0+6)
   04D3 C0 07              2521 	push	(0+7)
   04D5 C0 00              2522 	push	(0+0)
   04D7 C0 01              2523 	push	(0+1)
   04D9 C0 D0              2524 	push	psw
   04DB 75 D0 00           2525 	mov	psw,#0x00
                           2526 ;	../../../include/ztex-isr.h:116: ep0_prev_setup_request = bRequest;
   04DE 90 E6 B9           2527 	mov	dptr,#_bRequest
   04E1 E0                 2528 	movx	a,@dptr
   04E2 FA                 2529 	mov	r2,a
   04E3 90s00r03           2530 	mov	dptr,#_ep0_prev_setup_request
   04E6 F0                 2531 	movx	@dptr,a
                           2532 ;	../../../include/ztex-isr.h:117: SUDPTRCTL = 1;
   04E7 90 E6 B5           2533 	mov	dptr,#_SUDPTRCTL
   04EA 74 01              2534 	mov	a,#0x01
   04EC F0                 2535 	movx	@dptr,a
                           2536 ;	../../../include/ztex-isr.h:120: switch ( bRequest ) {
   04ED 90 E6 B9           2537 	mov	dptr,#_bRequest
   04F0 E0                 2538 	movx	a,@dptr
   04F1 FA                 2539 	mov  r2,a
   04F2 24 F3              2540 	add	a,#0xff - 0x0C
   04F4 50 03              2541 	jnc	00214$
   04F6 02s08r75           2542 	ljmp	00160$
   04F9                    2543 00214$:
   04F9 EA                 2544 	mov	a,r2
   04FA 2A                 2545 	add	a,r2
   04FB 2A                 2546 	add	a,r2
   04FC 90s05r00           2547 	mov	dptr,#00215$
   04FF 73                 2548 	jmp	@a+dptr
   0500                    2549 00215$:
   0500 02s05r27           2550 	ljmp	00101$
   0503 02s05rDB           2551 	ljmp	00112$
   0506 02s08r75           2552 	ljmp	00160$
   0509 02s06r58           2553 	ljmp	00122$
   050C 02s08r75           2554 	ljmp	00160$
   050F 02s08r75           2555 	ljmp	00160$
   0512 02s06rF0           2556 	ljmp	00132$
   0515 02s08r0B           2557 	ljmp	00152$
   0518 02s08r0D           2558 	ljmp	00153$
   051B 02s08r1E           2559 	ljmp	00154$
   051E 02s08r23           2560 	ljmp	00155$
   0521 02s08r34           2561 	ljmp	00156$
   0524 02s08r39           2562 	ljmp	00157$
                           2563 ;	../../../include/ztex-conf.h:30: ][#noexpand[!dnapxeon!]//$0!dnapxeon!
   0527                    2564 00101$:
                           2565 ;	../../../include/ztex-isr.h:122: switch(SETUPDAT[0]) {
   0527 90 E6 B8           2566 	mov	dptr,#_SETUPDAT
   052A E0                 2567 	movx	a,@dptr
   052B FA                 2568 	mov	r2,a
   052C BA 80 02           2569 	cjne	r2,#0x80,00216$
   052F 80 0D              2570 	sjmp	00102$
   0531                    2571 00216$:
   0531 BA 81 02           2572 	cjne	r2,#0x81,00217$
   0534 80 1E              2573 	sjmp	00103$
   0536                    2574 00217$:
   0536 BA 82 02           2575 	cjne	r2,#0x82,00218$
   0539 80 2F              2576 	sjmp	00104$
   053B                    2577 00218$:
   053B 02s08r75           2578 	ljmp	00160$
                           2579 ;	../../../include/ztex-conf.h:30: ][#noexpand[!dnapxeon!]//$0!dnapxeon!
   053E                    2580 00102$:
   053E 90 E7 40           2581 	mov	dptr,#_EP0BUF
                           2582 ;	../../../include/ztex-isr.h:125: EP0BUF[1] = 0;
                           2583 ;	../../../include/ztex-isr.h:126: EP0BCH = 0;
   0541 E4                 2584 	clr	a
   0542 F0                 2585 	movx	@dptr,a
   0543 90 E7 41           2586 	mov	dptr,#(_EP0BUF + 0x0001)
   0546 F0                 2587 	movx	@dptr,a
   0547 90 E6 8A           2588 	mov	dptr,#_EP0BCH
   054A F0                 2589 	movx	@dptr,a
                           2590 ;	../../../include/ztex-isr.h:127: EP0BCL = 2;
   054B 90 E6 8B           2591 	mov	dptr,#_EP0BCL
   054E 74 02              2592 	mov	a,#0x02
   0550 F0                 2593 	movx	@dptr,a
                           2594 ;	../../../include/ztex-isr.h:128: break;
   0551 02s08r75           2595 	ljmp	00160$
                           2596 ;	../../../include/ztex-conf.h:30: ][#noexpand[!dnapxeon!]//$0!dnapxeon!
   0554                    2597 00103$:
   0554 90 E7 40           2598 	mov	dptr,#_EP0BUF
                           2599 ;	../../../include/ztex-isr.h:131: EP0BUF[1] = 0;
                           2600 ;	../../../include/ztex-isr.h:132: EP0BCH = 0;
   0557 E4                 2601 	clr	a
   0558 F0                 2602 	movx	@dptr,a
   0559 90 E7 41           2603 	mov	dptr,#(_EP0BUF + 0x0001)
   055C F0                 2604 	movx	@dptr,a
   055D 90 E6 8A           2605 	mov	dptr,#_EP0BCH
   0560 F0                 2606 	movx	@dptr,a
                           2607 ;	../../../include/ztex-isr.h:133: EP0BCL = 2;
   0561 90 E6 8B           2608 	mov	dptr,#_EP0BCL
   0564 74 02              2609 	mov	a,#0x02
   0566 F0                 2610 	movx	@dptr,a
                           2611 ;	../../../include/ztex-isr.h:134: break;
   0567 02s08r75           2612 	ljmp	00160$
                           2613 ;	../../../include/ztex-isr.h:135: case 0x82:	
   056A                    2614 00104$:
                           2615 ;	../../../include/ztex-isr.h:136: switch ( SETUPDAT[4] ) {
   056A 90 E6 BC           2616 	mov	dptr,#(_SETUPDAT + 0x0004)
   056D E0                 2617 	movx	a,@dptr
   056E FA                 2618 	mov	r2,a
   056F 60 0F              2619 	jz	00106$
   0571 BA 01 02           2620 	cjne	r2,#0x01,00220$
   0574 80 19              2621 	sjmp	00107$
   0576                    2622 00220$:
   0576 BA 80 02           2623 	cjne	r2,#0x80,00221$
   0579 80 05              2624 	sjmp	00106$
   057B                    2625 00221$:
                           2626 ;	../../../include/ztex-isr.h:138: case 0x80 :
   057B BA 81 2F           2627 	cjne	r2,#0x81,00109$
   057E 80 1E              2628 	sjmp	00108$
   0580                    2629 00106$:
                           2630 ;	../../../include/ztex-isr.h:139: EP0BUF[0] = EP0CS & bmBIT0;
   0580 90 E6 A0           2631 	mov	dptr,#_EP0CS
   0583 E0                 2632 	movx	a,@dptr
   0584 FA                 2633 	mov	r2,a
   0585 53 02 01           2634 	anl	ar2,#0x01
   0588 90 E7 40           2635 	mov	dptr,#_EP0BUF
   058B EA                 2636 	mov	a,r2
   058C F0                 2637 	movx	@dptr,a
                           2638 ;	../../../include/ztex-isr.h:140: break;
                           2639 ;	../../../include/ztex-isr.h:141: case 0x01 :
   058D 80 3A              2640 	sjmp	00110$
   058F                    2641 00107$:
                           2642 ;	../../../include/ztex-isr.h:142: EP0BUF[0] = EP1OUTCS & bmBIT0;
   058F 90 E6 A1           2643 	mov	dptr,#_EP1OUTCS
   0592 E0                 2644 	movx	a,@dptr
   0593 FA                 2645 	mov	r2,a
   0594 53 02 01           2646 	anl	ar2,#0x01
   0597 90 E7 40           2647 	mov	dptr,#_EP0BUF
   059A EA                 2648 	mov	a,r2
   059B F0                 2649 	movx	@dptr,a
                           2650 ;	../../../include/ztex-isr.h:143: break;
                           2651 ;	../../../include/ztex-isr.h:144: case 0x81 :
   059C 80 2B              2652 	sjmp	00110$
   059E                    2653 00108$:
                           2654 ;	../../../include/ztex-isr.h:145: EP0BUF[0] = EP1INCS & bmBIT0;
   059E 90 E6 A2           2655 	mov	dptr,#_EP1INCS
   05A1 E0                 2656 	movx	a,@dptr
   05A2 FA                 2657 	mov	r2,a
   05A3 53 02 01           2658 	anl	ar2,#0x01
   05A6 90 E7 40           2659 	mov	dptr,#_EP0BUF
   05A9 EA                 2660 	mov	a,r2
   05AA F0                 2661 	movx	@dptr,a
                           2662 ;	../../../include/ztex-isr.h:146: break;
                           2663 ;	../../../include/ztex-isr.h:147: default:
   05AB 80 1C              2664 	sjmp	00110$
   05AD                    2665 00109$:
                           2666 ;	../../../include/ztex-isr.h:148: EP0BUF[0] = EPXCS[ ((SETUPDAT[4] >> 1)-1) & 3 ] & bmBIT0;
   05AD 90 E6 BC           2667 	mov	dptr,#(_SETUPDAT + 0x0004)
   05B0 E0                 2668 	movx	a,@dptr
   05B1 C3                 2669 	clr	c
   05B2 13                 2670 	rrc	a
   05B3 14                 2671 	dec	a
   05B4 54 03              2672 	anl	a,#0x03
   05B6 24 A3              2673 	add	a,#_EPXCS
   05B8 F5 82              2674 	mov	dpl,a
   05BA E4                 2675 	clr	a
   05BB 34 E6              2676 	addc	a,#(_EPXCS >> 8)
   05BD F5 83              2677 	mov	dph,a
   05BF E0                 2678 	movx	a,@dptr
   05C0 FA                 2679 	mov	r2,a
   05C1 53 02 01           2680 	anl	ar2,#0x01
   05C4 90 E7 40           2681 	mov	dptr,#_EP0BUF
   05C7 EA                 2682 	mov	a,r2
   05C8 F0                 2683 	movx	@dptr,a
                           2684 ;	../../../include/ztex-isr.h:150: }
   05C9                    2685 00110$:
                           2686 ;	../../../include/ztex-isr.h:151: EP0BUF[1] = 0;
   05C9 90 E7 41           2687 	mov	dptr,#(_EP0BUF + 0x0001)
                           2688 ;	../../../include/ztex-isr.h:152: EP0BCH = 0;
   05CC E4                 2689 	clr	a
   05CD F0                 2690 	movx	@dptr,a
   05CE 90 E6 8A           2691 	mov	dptr,#_EP0BCH
   05D1 F0                 2692 	movx	@dptr,a
                           2693 ;	../../../include/ztex-isr.h:153: EP0BCL = 2;
   05D2 90 E6 8B           2694 	mov	dptr,#_EP0BCL
   05D5 74 02              2695 	mov	a,#0x02
   05D7 F0                 2696 	movx	@dptr,a
                           2697 ;	../../../include/ztex-isr.h:156: break;
   05D8 02s08r75           2698 	ljmp	00160$
                           2699 ;	../../../include/ztex-conf.h:30: ][#noexpand[!dnapxeon!]//$0!dnapxeon!
   05DB                    2700 00112$:
                           2701 ;	../../../include/ztex-isr.h:158: if ( SETUPDAT[0] == 2 && SETUPDAT[2] == 0 ) {
   05DB 90 E6 B8           2702 	mov	dptr,#_SETUPDAT
   05DE E0                 2703 	movx	a,@dptr
   05DF FA                 2704 	mov	r2,a
   05E0 BA 02 02           2705 	cjne	r2,#0x02,00223$
   05E3 80 03              2706 	sjmp	00224$
   05E5                    2707 00223$:
   05E5 02s08r75           2708 	ljmp	00160$
   05E8                    2709 00224$:
   05E8 90 E6 BA           2710 	mov	dptr,#(_SETUPDAT + 0x0002)
   05EB E0                 2711 	movx	a,@dptr
   05EC 60 03              2712 	jz	00225$
   05EE 02s08r75           2713 	ljmp	00160$
   05F1                    2714 00225$:
                           2715 ;	../../../include/ztex-isr.h:159: switch ( SETUPDAT[4] ) {
   05F1 90 E6 BC           2716 	mov	dptr,#(_SETUPDAT + 0x0004)
   05F4 E0                 2717 	movx	a,@dptr
   05F5 FA                 2718 	mov	r2,a
   05F6 60 0F              2719 	jz	00114$
   05F8 BA 01 02           2720 	cjne	r2,#0x01,00227$
   05FB 80 15              2721 	sjmp	00115$
   05FD                    2722 00227$:
   05FD BA 80 02           2723 	cjne	r2,#0x80,00228$
   0600 80 05              2724 	sjmp	00114$
   0602                    2725 00228$:
                           2726 ;	../../../include/ztex-isr.h:161: case 0x80 :
   0602 BA 81 23           2727 	cjne	r2,#0x81,00117$
   0605 80 16              2728 	sjmp	00116$
   0607                    2729 00114$:
                           2730 ;	../../../include/ztex-isr.h:162: EP0CS &= ~bmBIT0;
   0607 90 E6 A0           2731 	mov	dptr,#_EP0CS
   060A E0                 2732 	movx	a,@dptr
   060B FA                 2733 	mov	r2,a
   060C 54 FE              2734 	anl	a,#0xFE
   060E F0                 2735 	movx	@dptr,a
                           2736 ;	../../../include/ztex-isr.h:163: break;
   060F 02s08r75           2737 	ljmp	00160$
                           2738 ;	../../../include/ztex-isr.h:164: case 0x01 :
   0612                    2739 00115$:
                           2740 ;	../../../include/ztex-isr.h:165: EP1OUTCS &= ~bmBIT0;
   0612 90 E6 A1           2741 	mov	dptr,#_EP1OUTCS
   0615 E0                 2742 	movx	a,@dptr
   0616 FA                 2743 	mov	r2,a
   0617 54 FE              2744 	anl	a,#0xFE
   0619 F0                 2745 	movx	@dptr,a
                           2746 ;	../../../include/ztex-isr.h:166: break;
   061A 02s08r75           2747 	ljmp	00160$
                           2748 ;	../../../include/ztex-isr.h:167: case 0x81 :
   061D                    2749 00116$:
                           2750 ;	../../../include/ztex-isr.h:168: EP1INCS &= ~bmBIT0;
   061D 90 E6 A2           2751 	mov	dptr,#_EP1INCS
   0620 E0                 2752 	movx	a,@dptr
   0621 FA                 2753 	mov	r2,a
   0622 54 FE              2754 	anl	a,#0xFE
   0624 F0                 2755 	movx	@dptr,a
                           2756 ;	../../../include/ztex-isr.h:169: break;
   0625 02s08r75           2757 	ljmp	00160$
                           2758 ;	../../../include/ztex-isr.h:170: default:
   0628                    2759 00117$:
                           2760 ;	../../../include/ztex-isr.h:171: EPXCS[ ((SETUPDAT[4] >> 1)-1) & 3 ] &= ~bmBIT0;
   0628 90 E6 BC           2761 	mov	dptr,#(_SETUPDAT + 0x0004)
   062B E0                 2762 	movx	a,@dptr
   062C C3                 2763 	clr	c
   062D 13                 2764 	rrc	a
   062E 14                 2765 	dec	a
   062F 54 03              2766 	anl	a,#0x03
   0631 24 A3              2767 	add	a,#_EPXCS
   0633 FA                 2768 	mov	r2,a
   0634 E4                 2769 	clr	a
   0635 34 E6              2770 	addc	a,#(_EPXCS >> 8)
   0637 FB                 2771 	mov	r3,a
   0638 90 E6 BC           2772 	mov	dptr,#(_SETUPDAT + 0x0004)
   063B E0                 2773 	movx	a,@dptr
   063C C3                 2774 	clr	c
   063D 13                 2775 	rrc	a
   063E 14                 2776 	dec	a
   063F 54 03              2777 	anl	a,#0x03
   0641 24 A3              2778 	add	a,#_EPXCS
   0643 F5 82              2779 	mov	dpl,a
   0645 E4                 2780 	clr	a
   0646 34 E6              2781 	addc	a,#(_EPXCS >> 8)
   0648 F5 83              2782 	mov	dph,a
   064A E0                 2783 	movx	a,@dptr
   064B FC                 2784 	mov	r4,a
   064C 53 04 FE           2785 	anl	ar4,#0xFE
   064F 8A 82              2786 	mov	dpl,r2
   0651 8B 83              2787 	mov	dph,r3
   0653 EC                 2788 	mov	a,r4
   0654 F0                 2789 	movx	@dptr,a
                           2790 ;	../../../include/ztex-isr.h:175: break;
   0655 02s08r75           2791 	ljmp	00160$
                           2792 ;	../../../include/ztex-conf.h:30: ][#noexpand[!dnapxeon!]//$0!dnapxeon!
   0658                    2793 00122$:
                           2794 ;	../../../include/ztex-isr.h:177: if ( SETUPDAT[0] == 2 && SETUPDAT[2] == 0 ) {
   0658 90 E6 B8           2795 	mov	dptr,#_SETUPDAT
   065B E0                 2796 	movx	a,@dptr
   065C FA                 2797 	mov	r2,a
   065D BA 02 02           2798 	cjne	r2,#0x02,00230$
   0660 80 03              2799 	sjmp	00231$
   0662                    2800 00230$:
   0662 02s08r75           2801 	ljmp	00160$
   0665                    2802 00231$:
   0665 90 E6 BA           2803 	mov	dptr,#(_SETUPDAT + 0x0002)
   0668 E0                 2804 	movx	a,@dptr
   0669 60 03              2805 	jz	00232$
   066B 02s08r75           2806 	ljmp	00160$
   066E                    2807 00232$:
                           2808 ;	../../../include/ztex-isr.h:178: switch ( SETUPDAT[4] ) {
   066E 90 E6 BC           2809 	mov	dptr,#(_SETUPDAT + 0x0004)
   0671 E0                 2810 	movx	a,@dptr
   0672 FA                 2811 	mov	r2,a
   0673 60 0F              2812 	jz	00124$
   0675 BA 01 02           2813 	cjne	r2,#0x01,00234$
   0678 80 14              2814 	sjmp	00125$
   067A                    2815 00234$:
   067A BA 80 02           2816 	cjne	r2,#0x80,00235$
   067D 80 05              2817 	sjmp	00124$
   067F                    2818 00235$:
                           2819 ;	../../../include/ztex-isr.h:180: case 0x80 :
   067F BA 81 20           2820 	cjne	r2,#0x81,00127$
   0682 80 14              2821 	sjmp	00126$
   0684                    2822 00124$:
                           2823 ;	../../../include/ztex-isr.h:181: EP0CS |= bmBIT0;
   0684 90 E6 A0           2824 	mov	dptr,#_EP0CS
   0687 E0                 2825 	movx	a,@dptr
   0688 FA                 2826 	mov	r2,a
   0689 44 01              2827 	orl	a,#0x01
   068B F0                 2828 	movx	@dptr,a
                           2829 ;	../../../include/ztex-isr.h:182: break;
                           2830 ;	../../../include/ztex-isr.h:183: case 0x01 :
   068C 80 41              2831 	sjmp	00128$
   068E                    2832 00125$:
                           2833 ;	../../../include/ztex-isr.h:184: EP1OUTCS |= bmBIT0;
   068E 90 E6 A1           2834 	mov	dptr,#_EP1OUTCS
   0691 E0                 2835 	movx	a,@dptr
   0692 FA                 2836 	mov	r2,a
   0693 44 01              2837 	orl	a,#0x01
   0695 F0                 2838 	movx	@dptr,a
                           2839 ;	../../../include/ztex-isr.h:185: break;
                           2840 ;	../../../include/ztex-isr.h:186: case 0x81 :
   0696 80 37              2841 	sjmp	00128$
   0698                    2842 00126$:
                           2843 ;	../../../include/ztex-isr.h:187: EP1INCS |= bmBIT0;
   0698 90 E6 A2           2844 	mov	dptr,#_EP1INCS
   069B E0                 2845 	movx	a,@dptr
   069C FA                 2846 	mov	r2,a
   069D 44 01              2847 	orl	a,#0x01
   069F F0                 2848 	movx	@dptr,a
                           2849 ;	../../../include/ztex-isr.h:188: break;
                           2850 ;	../../../include/ztex-isr.h:189: default:
   06A0 80 2D              2851 	sjmp	00128$
   06A2                    2852 00127$:
                           2853 ;	../../../include/ztex-isr.h:190: EPXCS[ ((SETUPDAT[4] >> 1)-1) & 3 ] |= ~bmBIT0;
   06A2 90 E6 BC           2854 	mov	dptr,#(_SETUPDAT + 0x0004)
   06A5 E0                 2855 	movx	a,@dptr
   06A6 C3                 2856 	clr	c
   06A7 13                 2857 	rrc	a
   06A8 14                 2858 	dec	a
   06A9 54 03              2859 	anl	a,#0x03
   06AB 24 A3              2860 	add	a,#_EPXCS
   06AD FA                 2861 	mov	r2,a
   06AE E4                 2862 	clr	a
   06AF 34 E6              2863 	addc	a,#(_EPXCS >> 8)
   06B1 FB                 2864 	mov	r3,a
   06B2 90 E6 BC           2865 	mov	dptr,#(_SETUPDAT + 0x0004)
   06B5 E0                 2866 	movx	a,@dptr
   06B6 C3                 2867 	clr	c
   06B7 13                 2868 	rrc	a
   06B8 14                 2869 	dec	a
   06B9 54 03              2870 	anl	a,#0x03
   06BB 24 A3              2871 	add	a,#_EPXCS
   06BD F5 82              2872 	mov	dpl,a
   06BF E4                 2873 	clr	a
   06C0 34 E6              2874 	addc	a,#(_EPXCS >> 8)
   06C2 F5 83              2875 	mov	dph,a
   06C4 E0                 2876 	movx	a,@dptr
   06C5 FC                 2877 	mov	r4,a
   06C6 43 04 FE           2878 	orl	ar4,#0xFE
   06C9 8A 82              2879 	mov	dpl,r2
   06CB 8B 83              2880 	mov	dph,r3
   06CD EC                 2881 	mov	a,r4
   06CE F0                 2882 	movx	@dptr,a
                           2883 ;	../../../include/ztex-isr.h:192: }
   06CF                    2884 00128$:
                           2885 ;	../../../include/ztex-isr.h:193: a = ( (SETUPDAT[4] & 0x80) >> 3 ) | (SETUPDAT[4] & 0x0f);
   06CF 90 E6 BC           2886 	mov	dptr,#(_SETUPDAT + 0x0004)
   06D2 E0                 2887 	movx	a,@dptr
   06D3 54 80              2888 	anl	a,#0x80
   06D5 C4                 2889 	swap	a
   06D6 23                 2890 	rl	a
   06D7 54 1F              2891 	anl	a,#0x1f
   06D9 FA                 2892 	mov	r2,a
   06DA 90 E6 BC           2893 	mov	dptr,#(_SETUPDAT + 0x0004)
   06DD E0                 2894 	movx	a,@dptr
   06DE FB                 2895 	mov	r3,a
   06DF 74 0F              2896 	mov	a,#0x0F
   06E1 5B                 2897 	anl	a,r3
   06E2 42 02              2898 	orl	ar2,a
                           2899 ;	../../../include/ztex-isr.h:194: TOGCTL = a;
                           2900 ;	../../../include/ztex-isr.h:195: TOGCTL = a | bmBIT5;
   06E4 90 E6 83           2901 	mov	dptr,#_TOGCTL
   06E7 EA                 2902 	mov	a,r2
   06E8 F0                 2903 	movx	@dptr,a
   06E9 74 20              2904 	mov	a,#0x20
   06EB 4A                 2905 	orl	a,r2
   06EC F0                 2906 	movx	@dptr,a
                           2907 ;	../../../include/ztex-isr.h:197: break;
   06ED 02s08r75           2908 	ljmp	00160$
                           2909 ;	../../../include/ztex-conf.h:30: ][#noexpand[!dnapxeon!]//$0!dnapxeon!
   06F0                    2910 00132$:
                           2911 ;	../../../include/ztex-isr.h:199: switch(SETUPDAT[3]) {
   06F0 90 E6 BB           2912 	mov	dptr,#(_SETUPDAT + 0x0003)
   06F3 E0                 2913 	movx	a,@dptr
   06F4 FA                 2914 	mov	r2,a
   06F5 BA 01 02           2915 	cjne	r2,#0x01,00237$
   06F8 80 19              2916 	sjmp	00133$
   06FA                    2917 00237$:
   06FA BA 02 02           2918 	cjne	r2,#0x02,00238$
   06FD 80 26              2919 	sjmp	00134$
   06FF                    2920 00238$:
   06FF BA 03 02           2921 	cjne	r2,#0x03,00239$
   0702 80 4D              2922 	sjmp	00138$
   0704                    2923 00239$:
   0704 BA 06 03           2924 	cjne	r2,#0x06,00240$
   0707 02s07rC4           2925 	ljmp	00145$
   070A                    2926 00240$:
   070A BA 07 03           2927 	cjne	r2,#0x07,00241$
   070D 02s07rD6           2928 	ljmp	00146$
   0710                    2929 00241$:
   0710 02s08r01           2930 	ljmp	00150$
                           2931 ;	../../../include/ztex-conf.h:30: ][#noexpand[!dnapxeon!]//$0!dnapxeon!
   0713                    2932 00133$:
                           2933 ;	../../../include/ztex-isr.h:201: SUDPTRH = MSB(&DeviceDescriptor);
   0713 7Ar29              2934 	mov	r2,#_DeviceDescriptor
   0715 7Bs00              2935 	mov	r3,#(_DeviceDescriptor >> 8)
   0717 90 E6 B3           2936 	mov	dptr,#_SUDPTRH
   071A EB                 2937 	mov	a,r3
   071B F0                 2938 	movx	@dptr,a
                           2939 ;	../../../include/ztex-isr.h:202: SUDPTRL = LSB(&DeviceDescriptor);
   071C 90 E6 B4           2940 	mov	dptr,#_SUDPTRL
   071F 74r29              2941 	mov	a,#_DeviceDescriptor
   0721 F0                 2942 	movx	@dptr,a
                           2943 ;	../../../include/ztex-isr.h:203: break;
   0722 02s08r75           2944 	ljmp	00160$
                           2945 ;	../../../include/ztex-conf.h:30: ][#noexpand[!dnapxeon!]//$0!dnapxeon!
   0725                    2946 00134$:
                           2947 ;	../../../include/ztex-isr.h:205: if (USBCS & bmBIT7) {
   0725 90 E6 80           2948 	mov	dptr,#_USBCS
   0728 E0                 2949 	movx	a,@dptr
   0729 FA                 2950 	mov	r2,a
   072A 30 E7 12           2951 	jnb	acc.7,00136$
                           2952 ;	../../../include/ztex-isr.h:206: SUDPTRH = MSB(&HighSpeedConfigDescriptor);
   072D 7Ar45              2953 	mov	r2,#_HighSpeedConfigDescriptor
   072F 7Bs00              2954 	mov	r3,#(_HighSpeedConfigDescriptor >> 8)
   0731 90 E6 B3           2955 	mov	dptr,#_SUDPTRH
   0734 EB                 2956 	mov	a,r3
   0735 F0                 2957 	movx	@dptr,a
                           2958 ;	../../../include/ztex-isr.h:207: SUDPTRL = LSB(&HighSpeedConfigDescriptor);
   0736 90 E6 B4           2959 	mov	dptr,#_SUDPTRL
   0739 74r45              2960 	mov	a,#_HighSpeedConfigDescriptor
   073B F0                 2961 	movx	@dptr,a
   073C 02s08r75           2962 	ljmp	00160$
   073F                    2963 00136$:
                           2964 ;	../../../include/ztex-isr.h:210: SUDPTRH = MSB(&FullSpeedConfigDescriptor);
   073F 7Ar67              2965 	mov	r2,#_FullSpeedConfigDescriptor
   0741 7Bs00              2966 	mov	r3,#(_FullSpeedConfigDescriptor >> 8)
   0743 90 E6 B3           2967 	mov	dptr,#_SUDPTRH
   0746 EB                 2968 	mov	a,r3
   0747 F0                 2969 	movx	@dptr,a
                           2970 ;	../../../include/ztex-isr.h:211: SUDPTRL = LSB(&FullSpeedConfigDescriptor);
   0748 90 E6 B4           2971 	mov	dptr,#_SUDPTRL
   074B 74r67              2972 	mov	a,#_FullSpeedConfigDescriptor
   074D F0                 2973 	movx	@dptr,a
                           2974 ;	../../../include/ztex-isr.h:213: break; 
   074E 02s08r75           2975 	ljmp	00160$
                           2976 ;	../../../include/ztex-conf.h:30: ][#noexpand[!dnapxeon!]//$0!dnapxeon!
   0751                    2977 00138$:
                           2978 ;	../../../include/ztex-isr.h:215: switch (SETUPDAT[2]) {
   0751 90 E6 BA           2979 	mov	dptr,#(_SETUPDAT + 0x0002)
   0754 E0                 2980 	movx	a,@dptr
   0755 FA                 2981 	mov	r2,a
   0756 BA 01 02           2982 	cjne	r2,#0x01,00243$
   0759 80 0F              2983 	sjmp	00139$
   075B                    2984 00243$:
   075B BA 02 02           2985 	cjne	r2,#0x02,00244$
   075E 80 1C              2986 	sjmp	00140$
   0760                    2987 00244$:
   0760 BA 03 02           2988 	cjne	r2,#0x03,00245$
   0763 80 29              2989 	sjmp	00141$
   0765                    2990 00245$:
                           2991 ;	../../../include/ztex-isr.h:216: case 1:
   0765 BA 04 4A           2992 	cjne	r2,#0x04,00143$
   0768 80 36              2993 	sjmp	00142$
   076A                    2994 00139$:
                           2995 ;	../../../include/ztex-isr.h:217: SEND_STRING_DESCRIPTOR(manufacturerString);
   076A 75 82r00           2996 	mov	dpl,#_manufacturerString
   076D 7Ar00              2997 	mov	r2,#_manufacturerString
   076F 7Bs00              2998 	mov	r3,#(_manufacturerString >> 8)
   0771 8B*00              2999 	mov	_sendStringDescriptor_PARM_2,r3
   0773 75*01 05           3000 	mov	_sendStringDescriptor_PARM_3,#0x05
   0776 12s04r0B           3001 	lcall	_sendStringDescriptor
                           3002 ;	../../../include/ztex-isr.h:218: break;
   0779 02s08r75           3003 	ljmp	00160$
                           3004 ;	../../../include/ztex-isr.h:219: case 2:
   077C                    3005 00140$:
                           3006 ;	../../../include/ztex-isr.h:220: SEND_STRING_DESCRIPTOR(productString);
   077C 75 82r05           3007 	mov	dpl,#_productString
   077F 7Ar05              3008 	mov	r2,#_productString
   0781 7Bs00              3009 	mov	r3,#(_productString >> 8)
   0783 8B*00              3010 	mov	_sendStringDescriptor_PARM_2,r3
   0785 75*01 19           3011 	mov	_sendStringDescriptor_PARM_3,#0x19
   0788 12s04r0B           3012 	lcall	_sendStringDescriptor
                           3013 ;	../../../include/ztex-isr.h:221: break;
   078B 02s08r75           3014 	ljmp	00160$
                           3015 ;	../../../include/ztex-isr.h:222: case 3:
   078E                    3016 00141$:
                           3017 ;	../../../include/ztex-isr.h:223: SEND_STRING_DESCRIPTOR(SN_STRING);
   078E 75 82 8A           3018 	mov	dpl,#_SN_STRING
   0791 7A 8A              3019 	mov	r2,#_SN_STRING
   0793 7B 00              3020 	mov	r3,#(_SN_STRING >> 8)
   0795 8B*00              3021 	mov	_sendStringDescriptor_PARM_2,r3
   0797 75*01 0A           3022 	mov	_sendStringDescriptor_PARM_3,#0x0A
   079A 12s04r0B           3023 	lcall	_sendStringDescriptor
                           3024 ;	../../../include/ztex-isr.h:224: break;
   079D 02s08r75           3025 	ljmp	00160$
                           3026 ;	../../../include/ztex-isr.h:225: case 4:
   07A0                    3027 00142$:
                           3028 ;	../../../include/ztex-isr.h:226: SEND_STRING_DESCRIPTOR(configurationString);
   07A0 75 82r1E           3029 	mov	dpl,#_configurationString
   07A3 7Ar1E              3030 	mov	r2,#_configurationString
   07A5 7Bs00              3031 	mov	r3,#(_configurationString >> 8)
   07A7 8B*00              3032 	mov	_sendStringDescriptor_PARM_2,r3
   07A9 75*01 0A           3033 	mov	_sendStringDescriptor_PARM_3,#0x0A
   07AC 12s04r0B           3034 	lcall	_sendStringDescriptor
                           3035 ;	../../../include/ztex-isr.h:227: break; 
   07AF 02s08r75           3036 	ljmp	00160$
                           3037 ;	../../../include/ztex-isr.h:228: default:
   07B2                    3038 00143$:
                           3039 ;	../../../include/ztex-isr.h:229: SUDPTRH = MSB(&EmptyStringDescriptor);
   07B2 7Ar89              3040 	mov	r2,#_EmptyStringDescriptor
   07B4 7Bs00              3041 	mov	r3,#(_EmptyStringDescriptor >> 8)
   07B6 90 E6 B3           3042 	mov	dptr,#_SUDPTRH
   07B9 EB                 3043 	mov	a,r3
   07BA F0                 3044 	movx	@dptr,a
                           3045 ;	../../../include/ztex-isr.h:230: SUDPTRL = LSB(&EmptyStringDescriptor);
   07BB 90 E6 B4           3046 	mov	dptr,#_SUDPTRL
   07BE 74r89              3047 	mov	a,#_EmptyStringDescriptor
   07C0 F0                 3048 	movx	@dptr,a
                           3049 ;	../../../include/ztex-isr.h:233: break;
   07C1 02s08r75           3050 	ljmp	00160$
                           3051 ;	../../../include/ztex-conf.h:30: ][#noexpand[!dnapxeon!]//$0!dnapxeon!
   07C4                    3052 00145$:
                           3053 ;	../../../include/ztex-isr.h:235: SUDPTRH = MSB(&DeviceQualifierDescriptor);
   07C4 7Ar3B              3054 	mov	r2,#_DeviceQualifierDescriptor
   07C6 7Bs00              3055 	mov	r3,#(_DeviceQualifierDescriptor >> 8)
   07C8 90 E6 B3           3056 	mov	dptr,#_SUDPTRH
   07CB EB                 3057 	mov	a,r3
   07CC F0                 3058 	movx	@dptr,a
                           3059 ;	../../../include/ztex-isr.h:236: SUDPTRL = LSB(&DeviceQualifierDescriptor);
   07CD 90 E6 B4           3060 	mov	dptr,#_SUDPTRL
   07D0 74r3B              3061 	mov	a,#_DeviceQualifierDescriptor
   07D2 F0                 3062 	movx	@dptr,a
                           3063 ;	../../../include/ztex-isr.h:237: break;
   07D3 02s08r75           3064 	ljmp	00160$
                           3065 ;	../../../include/ztex-conf.h:30: ][#noexpand[!dnapxeon!]//$0!dnapxeon!
   07D6                    3066 00146$:
                           3067 ;	../../../include/ztex-isr.h:239: if (USBCS & bmBIT7) {
   07D6 90 E6 80           3068 	mov	dptr,#_USBCS
   07D9 E0                 3069 	movx	a,@dptr
   07DA FA                 3070 	mov	r2,a
   07DB 30 E7 12           3071 	jnb	acc.7,00148$
                           3072 ;	../../../include/ztex-isr.h:240: SUDPTRH = MSB(&FullSpeedConfigDescriptor);
   07DE 7Ar67              3073 	mov	r2,#_FullSpeedConfigDescriptor
   07E0 7Bs00              3074 	mov	r3,#(_FullSpeedConfigDescriptor >> 8)
   07E2 90 E6 B3           3075 	mov	dptr,#_SUDPTRH
   07E5 EB                 3076 	mov	a,r3
   07E6 F0                 3077 	movx	@dptr,a
                           3078 ;	../../../include/ztex-isr.h:241: SUDPTRL = LSB(&FullSpeedConfigDescriptor);
   07E7 90 E6 B4           3079 	mov	dptr,#_SUDPTRL
   07EA 74r67              3080 	mov	a,#_FullSpeedConfigDescriptor
   07EC F0                 3081 	movx	@dptr,a
   07ED 02s08r75           3082 	ljmp	00160$
   07F0                    3083 00148$:
                           3084 ;	../../../include/ztex-isr.h:244: SUDPTRH = MSB(&HighSpeedConfigDescriptor);
   07F0 7Ar45              3085 	mov	r2,#_HighSpeedConfigDescriptor
   07F2 7Bs00              3086 	mov	r3,#(_HighSpeedConfigDescriptor >> 8)
   07F4 90 E6 B3           3087 	mov	dptr,#_SUDPTRH
   07F7 EB                 3088 	mov	a,r3
   07F8 F0                 3089 	movx	@dptr,a
                           3090 ;	../../../include/ztex-isr.h:245: SUDPTRL = LSB(&HighSpeedConfigDescriptor);
   07F9 90 E6 B4           3091 	mov	dptr,#_SUDPTRL
   07FC 74r45              3092 	mov	a,#_HighSpeedConfigDescriptor
   07FE F0                 3093 	movx	@dptr,a
                           3094 ;	../../../include/ztex-isr.h:247: break; 
                           3095 ;	../../../include/ztex-isr.h:248: default:
   07FF 80 74              3096 	sjmp	00160$
   0801                    3097 00150$:
                           3098 ;	../../../include/ztex-conf.h:30: ][#noexpand[!dnapxeon!]//$0!dnapxeon!
   0801 90 E6 A0           3099 	mov	dptr,#_EP0CS
   0804 E0                 3100 	movx	a,@dptr
   0805 FA                 3101 	mov	r2,a
   0806 44 01              3102 	orl	a,#0x01
   0808 F0                 3103 	movx	@dptr,a
                           3104 ;	../../../include/ztex-isr.h:251: break;
                           3105 ;	../../../include/ztex-conf.h:30: ][#noexpand[!dnapxeon!]//$0!dnapxeon!
   0809 80 6A              3106 	sjmp	00160$
   080B                    3107 00152$:
                           3108 ;	../../../include/ztex-isr.h:253: break;			
                           3109 ;	../../../include/ztex-conf.h:30: ][#noexpand[!dnapxeon!]//$0!dnapxeon!
   080B 80 68              3110 	sjmp	00160$
   080D                    3111 00153$:
   080D 90 E7 40           3112 	mov	dptr,#_EP0BUF
                           3113 ;	../../../include/ztex-isr.h:256: EP0BCH = 0;
   0810 E4                 3114 	clr	a
   0811 F0                 3115 	movx	@dptr,a
   0812 90 E6 8A           3116 	mov	dptr,#_EP0BCH
   0815 F0                 3117 	movx	@dptr,a
                           3118 ;	../../../include/ztex-isr.h:257: EP0BCL = 1;
   0816 90 E6 8B           3119 	mov	dptr,#_EP0BCL
   0819 74 01              3120 	mov	a,#0x01
   081B F0                 3121 	movx	@dptr,a
                           3122 ;	../../../include/ztex-isr.h:258: break;
                           3123 ;	../../../include/ztex-conf.h:30: ][#noexpand[!dnapxeon!]//$0!dnapxeon!
   081C 80 57              3124 	sjmp	00160$
   081E                    3125 00154$:
                           3126 ;	../../../include/ztex-isr.h:260: resetToggleData();
   081E 12s03rED           3127 	lcall	_resetToggleData
                           3128 ;	../../../include/ztex-conf.h:30: ][#noexpand[!dnapxeon!]//$0!dnapxeon!
   0821 80 52              3129 	sjmp	00160$
   0823                    3130 00155$:
   0823 90 E7 40           3131 	mov	dptr,#_EP0BUF
                           3132 ;	../../../include/ztex-isr.h:264: EP0BCH = 0;
   0826 E4                 3133 	clr	a
   0827 F0                 3134 	movx	@dptr,a
   0828 90 E6 8A           3135 	mov	dptr,#_EP0BCH
   082B F0                 3136 	movx	@dptr,a
                           3137 ;	../../../include/ztex-isr.h:265: EP0BCL = 1;
   082C 90 E6 8B           3138 	mov	dptr,#_EP0BCL
   082F 74 01              3139 	mov	a,#0x01
   0831 F0                 3140 	movx	@dptr,a
                           3141 ;	../../../include/ztex-isr.h:266: break;
                           3142 ;	../../../include/ztex-conf.h:30: ][#noexpand[!dnapxeon!]//$0!dnapxeon!
   0832 80 41              3143 	sjmp	00160$
   0834                    3144 00156$:
                           3145 ;	../../../include/ztex-isr.h:268: resetToggleData();
   0834 12s03rED           3146 	lcall	_resetToggleData
                           3147 ;	../../../include/ztex-conf.h:30: ][#noexpand[!dnapxeon!]//$0!dnapxeon!
   0837 80 3C              3148 	sjmp	00160$
   0839                    3149 00157$:
                           3150 ;	../../../include/ztex-isr.h:271: if ( SETUPDAT[0] == 0x82 ) {
   0839 90 E6 B8           3151 	mov	dptr,#_SETUPDAT
   083C E0                 3152 	movx	a,@dptr
   083D FA                 3153 	mov	r2,a
   083E BA 82 34           3154 	cjne	r2,#0x82,00160$
                           3155 ;	../../../include/ztex-isr.h:272: ISOFRAME_COUNTER[ ((SETUPDAT[4] >> 1)-1) & 3 ] = 0;
   0841 90 E6 BC           3156 	mov	dptr,#(_SETUPDAT + 0x0004)
   0844 E0                 3157 	movx	a,@dptr
   0845 C3                 3158 	clr	c
   0846 13                 3159 	rrc	a
   0847 14                 3160 	dec	a
   0848 54 03              3161 	anl	a,#0x03
   084A 25 E0              3162 	add	a,acc
   084C 24r05              3163 	add	a,#_ISOFRAME_COUNTER
   084E F5 82              3164 	mov	dpl,a
   0850 E4                 3165 	clr	a
   0851 34s00              3166 	addc	a,#(_ISOFRAME_COUNTER >> 8)
   0853 F5 83              3167 	mov	dph,a
   0855 E4                 3168 	clr	a
   0856 F0                 3169 	movx	@dptr,a
   0857 A3                 3170 	inc	dptr
   0858 F0                 3171 	movx	@dptr,a
                           3172 ;	../../../include/ztex-conf.h:30: ][#noexpand[!dnapxeon!]//$0!dnapxeon!
   0859 90 E6 85           3173 	mov	dptr,#_USBFRAMEL
   085C E0                 3174 	movx	a,@dptr
   085D 90 E7 40           3175 	mov	dptr,#_EP0BUF
   0860 F0                 3176 	movx	@dptr,a
                           3177 ;	../../../include/ztex-isr.h:274: EP0BUF[1] = USBFRAMEH;	
   0861 90 E6 84           3178 	mov	dptr,#_USBFRAMEH
   0864 E0                 3179 	movx	a,@dptr
   0865 FA                 3180 	mov	r2,a
   0866 90 E7 41           3181 	mov	dptr,#(_EP0BUF + 0x0001)
   0869 F0                 3182 	movx	@dptr,a
                           3183 ;	../../../include/ztex-isr.h:275: EP0BCH = 0;
   086A 90 E6 8A           3184 	mov	dptr,#_EP0BCH
   086D E4                 3185 	clr	a
   086E F0                 3186 	movx	@dptr,a
                           3187 ;	../../../include/ztex-isr.h:276: EP0BCL = 2;
   086F 90 E6 8B           3188 	mov	dptr,#_EP0BCL
   0872 74 02              3189 	mov	a,#0x02
   0874 F0                 3190 	movx	@dptr,a
                           3191 ;	../../../include/ztex-isr.h:280: }
   0875                    3192 00160$:
                           3193 ;	../../../include/ztex-isr.h:283: switch ( bmRequestType ) {
   0875 90 E6 B8           3194 	mov	dptr,#_bmRequestType
   0878 E0                 3195 	movx	a,@dptr
   0879 FA                 3196 	mov	r2,a
   087A BA 40 03           3197 	cjne	r2,#0x40,00250$
   087D 02s09r65           3198 	ljmp	00168$
   0880                    3199 00250$:
   0880 BA C0 02           3200 	cjne	r2,#0xC0,00251$
   0883 80 03              3201 	sjmp	00252$
   0885                    3202 00251$:
   0885 02s09r8F           3203 	ljmp	00172$
   0888                    3204 00252$:
                           3205 ;	../../../include/ztex-isr.h:285: ep0_payload_remaining = (SETUPDAT[7] << 8) | SETUPDAT[6];
   0888 90 E6 BF           3206 	mov	dptr,#(_SETUPDAT + 0x0007)
   088B E0                 3207 	movx	a,@dptr
   088C FB                 3208 	mov	r3,a
   088D 7A 00              3209 	mov	r2,#0x00
   088F 90 E6 BE           3210 	mov	dptr,#(_SETUPDAT + 0x0006)
   0892 E0                 3211 	movx	a,@dptr
   0893 FC                 3212 	mov	r4,a
   0894 7D 00              3213 	mov	r5,#0x00
   0896 90s00r00           3214 	mov	dptr,#_ep0_payload_remaining
   0899 EC                 3215 	mov	a,r4
   089A 4A                 3216 	orl	a,r2
   089B F0                 3217 	movx	@dptr,a
   089C ED                 3218 	mov	a,r5
   089D 4B                 3219 	orl	a,r3
   089E A3                 3220 	inc	dptr
   089F F0                 3221 	movx	@dptr,a
                           3222 ;	../../../include/ztex-isr.h:286: ep0_payload_update();
   08A0 12s04r5E           3223 	lcall	_ep0_payload_update
                           3224 ;	../../../include/ztex-isr.h:288: switch ( bRequest ) {
   08A3 90 E6 B9           3225 	mov	dptr,#_bRequest
   08A6 E0                 3226 	movx	a,@dptr
   08A7 FA                 3227 	mov	r2,a
   08A8 BA 22 02           3228 	cjne	r2,#0x22,00253$
   08AB 80 13              3229 	sjmp	00162$
   08AD                    3230 00253$:
   08AD BA 28 03           3231 	cjne	r2,#0x28,00254$
   08B0 02s09r41           3232 	ljmp	00165$
   08B3                    3233 00254$:
   08B3 BA 38 02           3234 	cjne	r2,#0x38,00255$
   08B6 80 25              3235 	sjmp	00163$
   08B8                    3236 00255$:
   08B8 BA 3A 02           3237 	cjne	r2,#0x3A,00256$
   08BB 80 49              3238 	sjmp	00164$
   08BD                    3239 00256$:
   08BD 02s09r5B           3240 	ljmp	00166$
                           3241 ;	../../../include/ztex-conf.h:30: ][#noexpand[!dnapxeon!]//$0!dnapxeon!
   08C0                    3242 00162$:
                           3243 ;	../../../include/ztex-isr.h:290: SUDPTRCTL = 0;
   08C0 90 E6 B5           3244 	mov	dptr,#_SUDPTRCTL
                           3245 ;	../../../include/ztex-isr.h:291: EP0BCH = 0;
   08C3 E4                 3246 	clr	a
   08C4 F0                 3247 	movx	@dptr,a
   08C5 90 E6 8A           3248 	mov	dptr,#_EP0BCH
   08C8 F0                 3249 	movx	@dptr,a
                           3250 ;	../../../include/ztex-isr.h:292: EP0BCL = ZTEX_DESCRIPTOR_LEN;
   08C9 90 E6 8B           3251 	mov	dptr,#_EP0BCL
   08CC 74 28              3252 	mov	a,#0x28
   08CE F0                 3253 	movx	@dptr,a
                           3254 ;	../../../include/ztex-isr.h:293: SUDPTRH = MSB(ZTEX_DESCRIPTOR_OFFS);
   08CF 90 E6 B3           3255 	mov	dptr,#_SUDPTRH
   08D2 E4                 3256 	clr	a
   08D3 F0                 3257 	movx	@dptr,a
                           3258 ;	../../../include/ztex-isr.h:294: SUDPTRL = LSB(ZTEX_DESCRIPTOR_OFFS); 
   08D4 90 E6 B4           3259 	mov	dptr,#_SUDPTRL
   08D7 74 6C              3260 	mov	a,#0x6C
   08D9 F0                 3261 	movx	@dptr,a
                           3262 ;	../../../include/ztex-isr.h:295: break;
   08DA 02s09r8F           3263 	ljmp	00172$
                           3264 ;	../../../include/ztex-conf.h:90: case $0:
   08DD                    3265 00163$:
                           3266 ;	../../../include/ztex-conf.h:30: ][#noexpand[!dnapxeon!]//$0!dnapxeon!
   08DD 90 E6 BB           3267 	mov	dptr,#(_SETUPDAT + 0x0003)
   08E0 E0                 3268 	movx	a,@dptr
   08E1 FB                 3269 	mov	r3,a
   08E2 7A 00              3270 	mov	r2,#0x00
   08E4 90 E6 BA           3271 	mov	dptr,#(_SETUPDAT + 0x0002)
   08E7 E0                 3272 	movx	a,@dptr
   08E8 FC                 3273 	mov	r4,a
   08E9 7D 00              3274 	mov	r5,#0x00
   08EB 90s00r00           3275 	mov	dptr,#_eeprom_addr
   08EE EC                 3276 	mov	a,r4
   08EF 4A                 3277 	orl	a,r2
   08F0 F0                 3278 	movx	@dptr,a
   08F1 ED                 3279 	mov	a,r5
   08F2 4B                 3280 	orl	a,r3
   08F3 A3                 3281 	inc	dptr
   08F4 F0                 3282 	movx	@dptr,a
                           3283 ;	../../../include/ztex-eeprom.h:216: EP0BCH = 0;
   08F5 90 E6 8A           3284 	mov	dptr,#_EP0BCH
   08F8 E4                 3285 	clr	a
   08F9 F0                 3286 	movx	@dptr,a
                           3287 ;	../../../include/ztex-eeprom.h:217: EP0BCL = eeprom_read_ep0(); 
   08FA 12s02rF0           3288 	lcall	_eeprom_read_ep0
   08FD E5 82              3289 	mov	a,dpl
   08FF 90 E6 8B           3290 	mov	dptr,#_EP0BCL
   0902 F0                 3291 	movx	@dptr,a
                           3292 ;	../../../include/ztex-conf.h:92: break;
   0903 02s09r8F           3293 	ljmp	00172$
                           3294 ;	../../../include/ztex-conf.h:90: case $0:
   0906                    3295 00164$:
                           3296 ;	../../../include/ztex-eeprom.h:244: EP0BUF[0] = LSB(eeprom_write_bytes);
   0906 90s00r02           3297 	mov	dptr,#_eeprom_write_bytes
   0909 E0                 3298 	movx	a,@dptr
   090A FA                 3299 	mov	r2,a
   090B A3                 3300 	inc	dptr
   090C E0                 3301 	movx	a,@dptr
   090D FB                 3302 	mov	r3,a
   090E 8A 04              3303 	mov	ar4,r2
   0910 90 E7 40           3304 	mov	dptr,#_EP0BUF
   0913 EC                 3305 	mov	a,r4
   0914 F0                 3306 	movx	@dptr,a
                           3307 ;	../../../include/ztex-eeprom.h:245: EP0BUF[1] = MSB(eeprom_write_bytes);
   0915 8B 02              3308 	mov	ar2,r3
   0917 90 E7 41           3309 	mov	dptr,#(_EP0BUF + 0x0001)
   091A EA                 3310 	mov	a,r2
   091B F0                 3311 	movx	@dptr,a
                           3312 ;	../../../include/ztex-eeprom.h:246: EP0BUF[2] = eeprom_write_checksum;
   091C 90s00r04           3313 	mov	dptr,#_eeprom_write_checksum
   091F E0                 3314 	movx	a,@dptr
   0920 90 E7 42           3315 	mov	dptr,#(_EP0BUF + 0x0002)
   0923 F0                 3316 	movx	@dptr,a
                           3317 ;	../../../include/ztex-conf.h:30: ][#noexpand[!dnapxeon!]//$0!dnapxeon!
   0924 75*00 01           3318 	mov	_eeprom_select_PARM_2,#0x01
   0927 75 82 00           3319 	mov	dpl,#0x00
   092A 12s00rE0           3320 	lcall	_eeprom_select
   092D AA 82              3321 	mov	r2,dpl
   092F 90 E7 43           3322 	mov	dptr,#(_EP0BUF + 0x0003)
   0932 EA                 3323 	mov	a,r2
   0933 F0                 3324 	movx	@dptr,a
                           3325 ;	../../../include/ztex-eeprom.h:248: EP0BCH = 0;
   0934 90 E6 8A           3326 	mov	dptr,#_EP0BCH
   0937 E4                 3327 	clr	a
   0938 F0                 3328 	movx	@dptr,a
                           3329 ;	../../../include/ztex-eeprom.h:249: EP0BCL = 4;
   0939 90 E6 8B           3330 	mov	dptr,#_EP0BCL
   093C 74 04              3331 	mov	a,#0x04
   093E F0                 3332 	movx	@dptr,a
                           3333 ;	../../../include/ztex-conf.h:92: break;
                           3334 ;	../../../include/ztex-conf.h:90: case $0:
   093F 80 4E              3335 	sjmp	00172$
   0941                    3336 00165$:
                           3337 ;	../../../include/ztex-debug.h:82: debug_read_addr = (__xdata BYTE*)&debug_counter;
   0941 90s00r6E           3338 	mov	dptr,#_debug_read_addr
   0944 74r05              3339 	mov	a,#_debug_counter
   0946 F0                 3340 	movx	@dptr,a
   0947 A3                 3341 	inc	dptr
   0948 74s00              3342 	mov	a,#(_debug_counter >> 8)
   094A F0                 3343 	movx	@dptr,a
                           3344 ;	../../../include/ztex-debug.h:83: EP0BCH = 0;
   094B 90 E6 8A           3345 	mov	dptr,#_EP0BCH
   094E E4                 3346 	clr	a
   094F F0                 3347 	movx	@dptr,a
                           3348 ;	../../../include/ztex-debug.h:84: EP0BCL = debug_read_ep0(); 
   0950 12s03rB3           3349 	lcall	_debug_read_ep0
   0953 E5 82              3350 	mov	a,dpl
   0955 90 E6 8B           3351 	mov	dptr,#_EP0BCL
   0958 F0                 3352 	movx	@dptr,a
                           3353 ;	../../../include/ztex-conf.h:92: break;
                           3354 ;	../../../include/ztex-isr.h:297: default:
   0959 80 34              3355 	sjmp	00172$
   095B                    3356 00166$:
                           3357 ;	../../../include/ztex-conf.h:30: ][#noexpand[!dnapxeon!]//$0!dnapxeon!
   095B 90 E6 A0           3358 	mov	dptr,#_EP0CS
   095E E0                 3359 	movx	a,@dptr
   095F FA                 3360 	mov	r2,a
   0960 44 01              3361 	orl	a,#0x01
   0962 F0                 3362 	movx	@dptr,a
                           3363 ;	../../../include/ztex-isr.h:300: break;
                           3364 ;	../../../include/ztex-conf.h:30: ][#noexpand[!dnapxeon!]//$0!dnapxeon!
   0963 80 2A              3365 	sjmp	00172$
   0965                    3366 00168$:
                           3367 ;	../../../include/ztex-isr.h:305: if ( SETUPDAT[7]!=0 || SETUPDAT[6]!=0 ) {
   0965 90 E6 BF           3368 	mov	dptr,#(_SETUPDAT + 0x0007)
   0968 E0                 3369 	movx	a,@dptr
   0969 70 06              3370 	jnz	00169$
   096B 90 E6 BE           3371 	mov	dptr,#(_SETUPDAT + 0x0006)
   096E E0                 3372 	movx	a,@dptr
   096F 60 16              3373 	jz	00170$
   0971                    3374 00169$:
                           3375 ;	../../../include/ztex-isr.h:306: ep0_vendor_cmd_setup = 1;
   0971 90s00r04           3376 	mov	dptr,#_ep0_vendor_cmd_setup
   0974 74 01              3377 	mov	a,#0x01
   0976 F0                 3378 	movx	@dptr,a
                           3379 ;	../../../include/ztex-isr.h:307: EP0BCL = 0;
   0977 90 E6 8B           3380 	mov	dptr,#_EP0BCL
   097A E4                 3381 	clr	a
   097B F0                 3382 	movx	@dptr,a
                           3383 ;	../../../include/ztex-conf.h:30: ][#noexpand[!dnapxeon!]//$0!dnapxeon!
   097C 53 91 EF           3384 	anl	_EXIF,#0xEF
   097F 90 E6 5D           3385 	mov	dptr,#_USBIRQ
   0982 74 01              3386 	mov	a,#0x01
   0984 F0                 3387 	movx	@dptr,a
   0985 80 19              3388 	sjmp	00173$
   0987                    3389 00170$:
   0987 12s04r8B           3390 	lcall	_ep0_vendor_cmd_su
                           3391 ;	../../../include/ztex-isr.h:313: EP0BCL = 0;
   098A 90 E6 8B           3392 	mov	dptr,#_EP0BCL
   098D E4                 3393 	clr	a
   098E F0                 3394 	movx	@dptr,a
                           3395 ;	../../../include/ztex-isr.h:315: }
   098F                    3396 00172$:
                           3397 ;	../../../include/ztex-conf.h:30: ][#noexpand[!dnapxeon!]//$0!dnapxeon!
   098F 53 91 EF           3398 	anl	_EXIF,#0xEF
   0992 90 E6 5D           3399 	mov	dptr,#_USBIRQ
   0995 74 01              3400 	mov	a,#0x01
   0997 F0                 3401 	movx	@dptr,a
   0998 90 E6 A0           3402 	mov	dptr,#_EP0CS
   099B E0                 3403 	movx	a,@dptr
   099C FA                 3404 	mov	r2,a
   099D 44 80              3405 	orl	a,#0x80
   099F F0                 3406 	movx	@dptr,a
   09A0                    3407 00173$:
   09A0 D0 D0              3408 	pop	psw
   09A2 D0 01              3409 	pop	(0+1)
   09A4 D0 00              3410 	pop	(0+0)
   09A6 D0 07              3411 	pop	(0+7)
   09A8 D0 06              3412 	pop	(0+6)
   09AA D0 05              3413 	pop	(0+5)
   09AC D0 04              3414 	pop	(0+4)
   09AE D0 03              3415 	pop	(0+3)
   09B0 D0 02              3416 	pop	(0+2)
   09B2 D0 83              3417 	pop	dph
   09B4 D0 82              3418 	pop	dpl
   09B6 D0 F0              3419 	pop	b
   09B8 D0 E0              3420 	pop	acc
   09BA D0*00              3421 	pop	bits
   09BC 32                 3422 	reti
                           3423 ;------------------------------------------------------------
                           3424 ;Allocation info for local variables in function 'SOF_ISR'
                           3425 ;------------------------------------------------------------
                           3426 ;------------------------------------------------------------
                           3427 ;	../../../include/ztex-isr.h:325: void SOF_ISR() interrupt
                           3428 ;	-----------------------------------------
                           3429 ;	 function SOF_ISR
                           3430 ;	-----------------------------------------
   09BD                    3431 _SOF_ISR:
   09BD C0 E0              3432 	push	acc
   09BF C0 82              3433 	push	dpl
   09C1 C0 83              3434 	push	dph
                           3435 ;	../../../include/ztex-isr.h:327: EXIF &= ~bmBIT4;
   09C3 53 91 EF           3436 	anl	_EXIF,#0xEF
                           3437 ;	../../../include/ztex-isr.h:328: USBIRQ = bmBIT1;
   09C6 90 E6 5D           3438 	mov	dptr,#_USBIRQ
   09C9 74 02              3439 	mov	a,#0x02
   09CB F0                 3440 	movx	@dptr,a
   09CC D0 83              3441 	pop	dph
   09CE D0 82              3442 	pop	dpl
   09D0 D0 E0              3443 	pop	acc
   09D2 32                 3444 	reti
                           3445 ;	eliminated unneeded push/pop psw
                           3446 ;	eliminated unneeded push/pop b
                           3447 ;------------------------------------------------------------
                           3448 ;Allocation info for local variables in function 'SUTOK_ISR'
                           3449 ;------------------------------------------------------------
                           3450 ;------------------------------------------------------------
                           3451 ;	../../../include/ztex-isr.h:334: void SUTOK_ISR() interrupt 
                           3452 ;	-----------------------------------------
                           3453 ;	 function SUTOK_ISR
                           3454 ;	-----------------------------------------
   09D3                    3455 _SUTOK_ISR:
   09D3 C0 E0              3456 	push	acc
   09D5 C0 82              3457 	push	dpl
   09D7 C0 83              3458 	push	dph
                           3459 ;	../../../include/ztex-isr.h:336: EXIF &= ~bmBIT4;
   09D9 53 91 EF           3460 	anl	_EXIF,#0xEF
                           3461 ;	../../../include/ztex-isr.h:337: USBIRQ = bmBIT2;
   09DC 90 E6 5D           3462 	mov	dptr,#_USBIRQ
   09DF 74 04              3463 	mov	a,#0x04
   09E1 F0                 3464 	movx	@dptr,a
   09E2 D0 83              3465 	pop	dph
   09E4 D0 82              3466 	pop	dpl
   09E6 D0 E0              3467 	pop	acc
   09E8 32                 3468 	reti
                           3469 ;	eliminated unneeded push/pop psw
                           3470 ;	eliminated unneeded push/pop b
                           3471 ;------------------------------------------------------------
                           3472 ;Allocation info for local variables in function 'SUSP_ISR'
                           3473 ;------------------------------------------------------------
                           3474 ;------------------------------------------------------------
                           3475 ;	../../../include/ztex-isr.h:343: void SUSP_ISR() interrupt
                           3476 ;	-----------------------------------------
                           3477 ;	 function SUSP_ISR
                           3478 ;	-----------------------------------------
   09E9                    3479 _SUSP_ISR:
   09E9 C0 E0              3480 	push	acc
   09EB C0 82              3481 	push	dpl
   09ED C0 83              3482 	push	dph
                           3483 ;	../../../include/ztex-isr.h:345: EXIF &= ~bmBIT4;
   09EF 53 91 EF           3484 	anl	_EXIF,#0xEF
                           3485 ;	../../../include/ztex-isr.h:346: USBIRQ = bmBIT3;
   09F2 90 E6 5D           3486 	mov	dptr,#_USBIRQ
   09F5 74 08              3487 	mov	a,#0x08
   09F7 F0                 3488 	movx	@dptr,a
   09F8 D0 83              3489 	pop	dph
   09FA D0 82              3490 	pop	dpl
   09FC D0 E0              3491 	pop	acc
   09FE 32                 3492 	reti
                           3493 ;	eliminated unneeded push/pop psw
                           3494 ;	eliminated unneeded push/pop b
                           3495 ;------------------------------------------------------------
                           3496 ;Allocation info for local variables in function 'URES_ISR'
                           3497 ;------------------------------------------------------------
                           3498 ;------------------------------------------------------------
                           3499 ;	../../../include/ztex-isr.h:352: void URES_ISR() interrupt
                           3500 ;	-----------------------------------------
                           3501 ;	 function URES_ISR
                           3502 ;	-----------------------------------------
   09FF                    3503 _URES_ISR:
   09FF C0 E0              3504 	push	acc
   0A01 C0 82              3505 	push	dpl
   0A03 C0 83              3506 	push	dph
                           3507 ;	../../../include/ztex-isr.h:354: EXIF &= ~bmBIT4;
   0A05 53 91 EF           3508 	anl	_EXIF,#0xEF
                           3509 ;	../../../include/ztex-isr.h:355: USBIRQ = bmBIT4;
   0A08 90 E6 5D           3510 	mov	dptr,#_USBIRQ
   0A0B 74 10              3511 	mov	a,#0x10
   0A0D F0                 3512 	movx	@dptr,a
   0A0E D0 83              3513 	pop	dph
   0A10 D0 82              3514 	pop	dpl
   0A12 D0 E0              3515 	pop	acc
   0A14 32                 3516 	reti
                           3517 ;	eliminated unneeded push/pop psw
                           3518 ;	eliminated unneeded push/pop b
                           3519 ;------------------------------------------------------------
                           3520 ;Allocation info for local variables in function 'HSGRANT_ISR'
                           3521 ;------------------------------------------------------------
                           3522 ;------------------------------------------------------------
                           3523 ;	../../../include/ztex-isr.h:361: void HSGRANT_ISR() interrupt
                           3524 ;	-----------------------------------------
                           3525 ;	 function HSGRANT_ISR
                           3526 ;	-----------------------------------------
   0A15                    3527 _HSGRANT_ISR:
   0A15 C0 E0              3528 	push	acc
   0A17 C0 82              3529 	push	dpl
   0A19 C0 83              3530 	push	dph
                           3531 ;	../../../include/ztex-isr.h:363: EXIF &= ~bmBIT4;
   0A1B 53 91 EF           3532 	anl	_EXIF,#0xEF
                           3533 ;	../../../include/ztex-isr.h:364: USBIRQ = bmBIT5;
   0A1E 90 E6 5D           3534 	mov	dptr,#_USBIRQ
   0A21 74 20              3535 	mov	a,#0x20
   0A23 F0                 3536 	movx	@dptr,a
   0A24 D0 83              3537 	pop	dph
   0A26 D0 82              3538 	pop	dpl
   0A28 D0 E0              3539 	pop	acc
   0A2A 32                 3540 	reti
                           3541 ;	eliminated unneeded push/pop psw
                           3542 ;	eliminated unneeded push/pop b
                           3543 ;------------------------------------------------------------
                           3544 ;Allocation info for local variables in function 'EP0ACK_ISR'
                           3545 ;------------------------------------------------------------
                           3546 ;------------------------------------------------------------
                           3547 ;	../../../include/ztex-isr.h:370: void EP0ACK_ISR() interrupt
                           3548 ;	-----------------------------------------
                           3549 ;	 function EP0ACK_ISR
                           3550 ;	-----------------------------------------
   0A2B                    3551 _EP0ACK_ISR:
   0A2B C0 E0              3552 	push	acc
   0A2D C0 82              3553 	push	dpl
   0A2F C0 83              3554 	push	dph
                           3555 ;	../../../include/ztex-conf.h:30: ][#noexpand[!dnapxeon!]//$0!dnapxeon!
   0A31 53 91 EF           3556 	anl	_EXIF,#0xEF
   0A34 90 E6 5D           3557 	mov	dptr,#_USBIRQ
   0A37 74 40              3558 	mov	a,#0x40
   0A39 F0                 3559 	movx	@dptr,a
   0A3A D0 83              3560 	pop	dph
   0A3C D0 82              3561 	pop	dpl
   0A3E D0 E0              3562 	pop	acc
   0A40 32                 3563 	reti
                           3564 ;	eliminated unneeded push/pop psw
                           3565 ;	eliminated unneeded push/pop b
                           3566 ;------------------------------------------------------------
                           3567 ;Allocation info for local variables in function 'EP0IN_ISR'
                           3568 ;------------------------------------------------------------
                           3569 ;------------------------------------------------------------
                           3570 ;	../../../include/ztex-isr.h:379: static void EP0IN_ISR () interrupt
                           3571 ;	-----------------------------------------
                           3572 ;	 function EP0IN_ISR
                           3573 ;	-----------------------------------------
   0A41                    3574 _EP0IN_ISR:
   0A41 C0*00              3575 	push	bits
   0A43 C0 E0              3576 	push	acc
   0A45 C0 F0              3577 	push	b
   0A47 C0 82              3578 	push	dpl
   0A49 C0 83              3579 	push	dph
   0A4B C0 02              3580 	push	(0+2)
   0A4D C0 03              3581 	push	(0+3)
   0A4F C0 04              3582 	push	(0+4)
   0A51 C0 05              3583 	push	(0+5)
   0A53 C0 06              3584 	push	(0+6)
   0A55 C0 07              3585 	push	(0+7)
   0A57 C0 00              3586 	push	(0+0)
   0A59 C0 01              3587 	push	(0+1)
   0A5B C0 D0              3588 	push	psw
   0A5D 75 D0 00           3589 	mov	psw,#0x00
                           3590 ;	../../../include/ztex-conf.h:30: ][#noexpand[!dnapxeon!]//$0!dnapxeon!
   0A60 C2 E8              3591 	clr	_EUSB
                           3592 ;	../../../include/ztex-isr.h:382: ep0_payload_update();
   0A62 12s04r5E           3593 	lcall	_ep0_payload_update
                           3594 ;	../../../include/ztex-isr.h:383: switch ( ep0_prev_setup_request ) {
   0A65 90s00r03           3595 	mov	dptr,#_ep0_prev_setup_request
   0A68 E0                 3596 	movx	a,@dptr
   0A69 FA                 3597 	mov	r2,a
   0A6A BA 28 02           3598 	cjne	r2,#0x28,00111$
   0A6D 80 1A              3599 	sjmp	00103$
   0A6F                    3600 00111$:
   0A6F BA 38 02           3601 	cjne	r2,#0x38,00112$
   0A72 80 05              3602 	sjmp	00101$
   0A74                    3603 00112$:
                           3604 ;	../../../include/ztex-conf.h:95: case $0:
   0A74 BA 3A 22           3605 	cjne	r2,#0x3A,00104$
   0A77 80 29              3606 	sjmp	00105$
   0A79                    3607 00101$:
                           3608 ;	../../../include/ztex-eeprom.h:219: EP0BCH = 0;
   0A79 90 E6 8A           3609 	mov	dptr,#_EP0BCH
   0A7C E4                 3610 	clr	a
   0A7D F0                 3611 	movx	@dptr,a
                           3612 ;	../../../include/ztex-eeprom.h:220: EP0BCL = eeprom_read_ep0(); 
   0A7E 12s02rF0           3613 	lcall	_eeprom_read_ep0
   0A81 E5 82              3614 	mov	a,dpl
   0A83 90 E6 8B           3615 	mov	dptr,#_EP0BCL
   0A86 F0                 3616 	movx	@dptr,a
                           3617 ;	../../../include/ztex-conf.h:97: break;
                           3618 ;	../../../include/ztex-conf.h:95: case $0:
   0A87 80 19              3619 	sjmp	00105$
   0A89                    3620 00103$:
                           3621 ;	../../../include/ztex-debug.h:86: EP0BCH = 0;
   0A89 90 E6 8A           3622 	mov	dptr,#_EP0BCH
   0A8C E4                 3623 	clr	a
   0A8D F0                 3624 	movx	@dptr,a
                           3625 ;	../../../include/ztex-debug.h:87: EP0BCL = debug_read_ep0(); 
   0A8E 12s03rB3           3626 	lcall	_debug_read_ep0
   0A91 E5 82              3627 	mov	a,dpl
   0A93 90 E6 8B           3628 	mov	dptr,#_EP0BCL
   0A96 F0                 3629 	movx	@dptr,a
                           3630 ;	../../../include/ztex-conf.h:97: break;
                           3631 ;	../../../include/ztex-isr.h:385: default:
   0A97 80 09              3632 	sjmp	00105$
   0A99                    3633 00104$:
                           3634 ;	../../../include/ztex-isr.h:386: EP0BCH = 0;
   0A99 90 E6 8A           3635 	mov	dptr,#_EP0BCH
                           3636 ;	../../../include/ztex-isr.h:387: EP0BCL = 0;
   0A9C E4                 3637 	clr	a
   0A9D F0                 3638 	movx	@dptr,a
   0A9E 90 E6 8B           3639 	mov	dptr,#_EP0BCL
   0AA1 F0                 3640 	movx	@dptr,a
                           3641 ;	../../../include/ztex-isr.h:388: }
   0AA2                    3642 00105$:
                           3643 ;	../../../include/ztex-conf.h:30: ][#noexpand[!dnapxeon!]//$0!dnapxeon!
   0AA2 53 91 EF           3644 	anl	_EXIF,#0xEF
   0AA5 90 E6 5F           3645 	mov	dptr,#_EPIRQ
   0AA8 74 01              3646 	mov	a,#0x01
   0AAA F0                 3647 	movx	@dptr,a
                           3648 ;	../../../include/ztex-isr.h:391: EUSB = 1;
   0AAB D2 E8              3649 	setb	_EUSB
   0AAD D0 D0              3650 	pop	psw
   0AAF D0 01              3651 	pop	(0+1)
   0AB1 D0 00              3652 	pop	(0+0)
   0AB3 D0 07              3653 	pop	(0+7)
   0AB5 D0 06              3654 	pop	(0+6)
   0AB7 D0 05              3655 	pop	(0+5)
   0AB9 D0 04              3656 	pop	(0+4)
   0ABB D0 03              3657 	pop	(0+3)
   0ABD D0 02              3658 	pop	(0+2)
   0ABF D0 83              3659 	pop	dph
   0AC1 D0 82              3660 	pop	dpl
   0AC3 D0 F0              3661 	pop	b
   0AC5 D0 E0              3662 	pop	acc
   0AC7 D0*00              3663 	pop	bits
   0AC9 32                 3664 	reti
                           3665 ;------------------------------------------------------------
                           3666 ;Allocation info for local variables in function 'EP0OUT_ISR'
                           3667 ;------------------------------------------------------------
                           3668 ;------------------------------------------------------------
                           3669 ;	../../../include/ztex-isr.h:397: static void EP0OUT_ISR () interrupt
                           3670 ;	-----------------------------------------
                           3671 ;	 function EP0OUT_ISR
                           3672 ;	-----------------------------------------
   0ACA                    3673 _EP0OUT_ISR:
   0ACA C0*00              3674 	push	bits
   0ACC C0 E0              3675 	push	acc
   0ACE C0 F0              3676 	push	b
   0AD0 C0 82              3677 	push	dpl
   0AD2 C0 83              3678 	push	dph
   0AD4 C0 02              3679 	push	(0+2)
   0AD6 C0 03              3680 	push	(0+3)
   0AD8 C0 04              3681 	push	(0+4)
   0ADA C0 05              3682 	push	(0+5)
   0ADC C0 06              3683 	push	(0+6)
   0ADE C0 07              3684 	push	(0+7)
   0AE0 C0 00              3685 	push	(0+0)
   0AE2 C0 01              3686 	push	(0+1)
   0AE4 C0 D0              3687 	push	psw
   0AE6 75 D0 00           3688 	mov	psw,#0x00
                           3689 ;	../../../include/ztex-conf.h:30: ][#noexpand[!dnapxeon!]//$0!dnapxeon!
   0AE9 C2 E8              3690 	clr	_EUSB
                           3691 ;	../../../include/ztex-isr.h:400: if ( ep0_vendor_cmd_setup ) {
   0AEB 90s00r04           3692 	mov	dptr,#_ep0_vendor_cmd_setup
   0AEE E0                 3693 	movx	a,@dptr
   0AEF FA                 3694 	mov	r2,a
   0AF0 60 20              3695 	jz	00102$
                           3696 ;	../../../include/ztex-isr.h:401: ep0_vendor_cmd_setup = 0;
   0AF2 90s00r04           3697 	mov	dptr,#_ep0_vendor_cmd_setup
   0AF5 E4                 3698 	clr	a
   0AF6 F0                 3699 	movx	@dptr,a
                           3700 ;	../../../include/ztex-isr.h:402: ep0_payload_remaining = (SETUPDAT[7] << 8) | SETUPDAT[6];
   0AF7 90 E6 BF           3701 	mov	dptr,#(_SETUPDAT + 0x0007)
   0AFA E0                 3702 	movx	a,@dptr
   0AFB FB                 3703 	mov	r3,a
   0AFC 7A 00              3704 	mov	r2,#0x00
   0AFE 90 E6 BE           3705 	mov	dptr,#(_SETUPDAT + 0x0006)
   0B01 E0                 3706 	movx	a,@dptr
   0B02 FC                 3707 	mov	r4,a
   0B03 7D 00              3708 	mov	r5,#0x00
   0B05 90s00r00           3709 	mov	dptr,#_ep0_payload_remaining
   0B08 EC                 3710 	mov	a,r4
   0B09 4A                 3711 	orl	a,r2
   0B0A F0                 3712 	movx	@dptr,a
   0B0B ED                 3713 	mov	a,r5
   0B0C 4B                 3714 	orl	a,r3
   0B0D A3                 3715 	inc	dptr
   0B0E F0                 3716 	movx	@dptr,a
                           3717 ;	../../../include/ztex-isr.h:403: ep0_vendor_cmd_su();
   0B0F 12s04r8B           3718 	lcall	_ep0_vendor_cmd_su
   0B12                    3719 00102$:
                           3720 ;	../../../include/ztex-isr.h:406: ep0_payload_update();
   0B12 12s04r5E           3721 	lcall	_ep0_payload_update
                           3722 ;	../../../include/ztex-isr.h:408: switch ( ep0_prev_setup_request ) {
   0B15 90s00r03           3723 	mov	dptr,#_ep0_prev_setup_request
   0B18 E0                 3724 	movx	a,@dptr
   0B19 FA                 3725 	mov	r2,a
   0B1A BA 39 09           3726 	cjne	r2,#0x39,00104$
                           3727 ;	../../../include/ztex-eeprom.h:237: eeprom_write_ep0(EP0BCL);
   0B1D 90 E6 8B           3728 	mov	dptr,#_EP0BCL
   0B20 E0                 3729 	movx	a,@dptr
   0B21 F5 82              3730 	mov	dpl,a
   0B23 12s03r24           3731 	lcall	_eeprom_write_ep0
                           3732 ;	../../../include/ztex-isr.h:410: } 
   0B26                    3733 00104$:
                           3734 ;	../../../include/ztex-isr.h:412: EP0BCL = 0;
   0B26 90 E6 8B           3735 	mov	dptr,#_EP0BCL
   0B29 E4                 3736 	clr	a
   0B2A F0                 3737 	movx	@dptr,a
                           3738 ;	../../../include/ztex-conf.h:30: ][#noexpand[!dnapxeon!]//$0!dnapxeon!
   0B2B 53 91 EF           3739 	anl	_EXIF,#0xEF
   0B2E 90 E6 5F           3740 	mov	dptr,#_EPIRQ
   0B31 74 02              3741 	mov	a,#0x02
   0B33 F0                 3742 	movx	@dptr,a
                           3743 ;	../../../include/ztex-isr.h:416: if ( ep0_payload_remaining == 0 ) {
   0B34 90s00r00           3744 	mov	dptr,#_ep0_payload_remaining
   0B37 E0                 3745 	movx	a,@dptr
   0B38 FA                 3746 	mov	r2,a
   0B39 A3                 3747 	inc	dptr
   0B3A E0                 3748 	movx	a,@dptr
   0B3B FB                 3749 	mov	r3,a
   0B3C 4A                 3750 	orl	a,r2
   0B3D 70 08              3751 	jnz	00106$
                           3752 ;	../../../include/ztex-conf.h:30: ][#noexpand[!dnapxeon!]//$0!dnapxeon!
   0B3F 90 E6 A0           3753 	mov	dptr,#_EP0CS
   0B42 E0                 3754 	movx	a,@dptr
   0B43 FA                 3755 	mov	r2,a
   0B44 44 80              3756 	orl	a,#0x80
   0B46 F0                 3757 	movx	@dptr,a
   0B47                    3758 00106$:
                           3759 ;	../../../include/ztex-isr.h:419: EUSB = 1;
   0B47 D2 E8              3760 	setb	_EUSB
   0B49 D0 D0              3761 	pop	psw
   0B4B D0 01              3762 	pop	(0+1)
   0B4D D0 00              3763 	pop	(0+0)
   0B4F D0 07              3764 	pop	(0+7)
   0B51 D0 06              3765 	pop	(0+6)
   0B53 D0 05              3766 	pop	(0+5)
   0B55 D0 04              3767 	pop	(0+4)
   0B57 D0 03              3768 	pop	(0+3)
   0B59 D0 02              3769 	pop	(0+2)
   0B5B D0 83              3770 	pop	dph
   0B5D D0 82              3771 	pop	dpl
   0B5F D0 F0              3772 	pop	b
   0B61 D0 E0              3773 	pop	acc
   0B63 D0*00              3774 	pop	bits
   0B65 32                 3775 	reti
                           3776 ;------------------------------------------------------------
                           3777 ;Allocation info for local variables in function 'EP1IN_ISR'
                           3778 ;------------------------------------------------------------
                           3779 ;------------------------------------------------------------
                           3780 ;	../../../include/ztex-isr.h:426: void EP1IN_ISR() interrupt
                           3781 ;	-----------------------------------------
                           3782 ;	 function EP1IN_ISR
                           3783 ;	-----------------------------------------
   0B66                    3784 _EP1IN_ISR:
   0B66 C0 E0              3785 	push	acc
   0B68 C0 82              3786 	push	dpl
   0B6A C0 83              3787 	push	dph
                           3788 ;	../../../include/ztex-isr.h:428: EXIF &= ~bmBIT4;
   0B6C 53 91 EF           3789 	anl	_EXIF,#0xEF
                           3790 ;	../../../include/ztex-isr.h:429: EPIRQ = bmBIT2;
   0B6F 90 E6 5F           3791 	mov	dptr,#_EPIRQ
   0B72 74 04              3792 	mov	a,#0x04
   0B74 F0                 3793 	movx	@dptr,a
   0B75 D0 83              3794 	pop	dph
   0B77 D0 82              3795 	pop	dpl
   0B79 D0 E0              3796 	pop	acc
   0B7B 32                 3797 	reti
                           3798 ;	eliminated unneeded push/pop psw
                           3799 ;	eliminated unneeded push/pop b
                           3800 ;------------------------------------------------------------
                           3801 ;Allocation info for local variables in function 'EP1OUT_ISR'
                           3802 ;------------------------------------------------------------
                           3803 ;------------------------------------------------------------
                           3804 ;	../../../include/ztex-isr.h:436: void EP1OUT_ISR() interrupt
                           3805 ;	-----------------------------------------
                           3806 ;	 function EP1OUT_ISR
                           3807 ;	-----------------------------------------
   0B7C                    3808 _EP1OUT_ISR:
   0B7C C0 E0              3809 	push	acc
   0B7E C0 82              3810 	push	dpl
   0B80 C0 83              3811 	push	dph
                           3812 ;	../../../include/ztex-isr.h:438: EXIF &= ~bmBIT4;
   0B82 53 91 EF           3813 	anl	_EXIF,#0xEF
                           3814 ;	../../../include/ztex-isr.h:439: EPIRQ = bmBIT3;
   0B85 90 E6 5F           3815 	mov	dptr,#_EPIRQ
   0B88 74 08              3816 	mov	a,#0x08
   0B8A F0                 3817 	movx	@dptr,a
   0B8B D0 83              3818 	pop	dph
   0B8D D0 82              3819 	pop	dpl
   0B8F D0 E0              3820 	pop	acc
   0B91 32                 3821 	reti
                           3822 ;	eliminated unneeded push/pop psw
                           3823 ;	eliminated unneeded push/pop b
                           3824 ;------------------------------------------------------------
                           3825 ;Allocation info for local variables in function 'EP2_ISR'
                           3826 ;------------------------------------------------------------
                           3827 ;------------------------------------------------------------
                           3828 ;	../../../include/ztex-isr.h:445: void EP2_ISR() interrupt
                           3829 ;	-----------------------------------------
                           3830 ;	 function EP2_ISR
                           3831 ;	-----------------------------------------
   0B92                    3832 _EP2_ISR:
   0B92 C0 E0              3833 	push	acc
   0B94 C0 82              3834 	push	dpl
   0B96 C0 83              3835 	push	dph
                           3836 ;	../../../include/ztex-isr.h:447: EXIF &= ~bmBIT4;
   0B98 53 91 EF           3837 	anl	_EXIF,#0xEF
                           3838 ;	../../../include/ztex-isr.h:448: EPIRQ = bmBIT4;
   0B9B 90 E6 5F           3839 	mov	dptr,#_EPIRQ
   0B9E 74 10              3840 	mov	a,#0x10
   0BA0 F0                 3841 	movx	@dptr,a
   0BA1 D0 83              3842 	pop	dph
   0BA3 D0 82              3843 	pop	dpl
   0BA5 D0 E0              3844 	pop	acc
   0BA7 32                 3845 	reti
                           3846 ;	eliminated unneeded push/pop psw
                           3847 ;	eliminated unneeded push/pop b
                           3848 ;------------------------------------------------------------
                           3849 ;Allocation info for local variables in function 'EP4_ISR'
                           3850 ;------------------------------------------------------------
                           3851 ;------------------------------------------------------------
                           3852 ;	../../../include/ztex-isr.h:454: void EP4_ISR() interrupt
                           3853 ;	-----------------------------------------
                           3854 ;	 function EP4_ISR
                           3855 ;	-----------------------------------------
   0BA8                    3856 _EP4_ISR:
   0BA8 C0 E0              3857 	push	acc
   0BAA C0 82              3858 	push	dpl
   0BAC C0 83              3859 	push	dph
                           3860 ;	../../../include/ztex-isr.h:456: EXIF &= ~bmBIT4;
   0BAE 53 91 EF           3861 	anl	_EXIF,#0xEF
                           3862 ;	../../../include/ztex-isr.h:457: EPIRQ = bmBIT5;
   0BB1 90 E6 5F           3863 	mov	dptr,#_EPIRQ
   0BB4 74 20              3864 	mov	a,#0x20
   0BB6 F0                 3865 	movx	@dptr,a
   0BB7 D0 83              3866 	pop	dph
   0BB9 D0 82              3867 	pop	dpl
   0BBB D0 E0              3868 	pop	acc
   0BBD 32                 3869 	reti
                           3870 ;	eliminated unneeded push/pop psw
                           3871 ;	eliminated unneeded push/pop b
                           3872 ;------------------------------------------------------------
                           3873 ;Allocation info for local variables in function 'EP6_ISR'
                           3874 ;------------------------------------------------------------
                           3875 ;------------------------------------------------------------
                           3876 ;	../../../include/ztex-isr.h:463: void EP6_ISR() interrupt
                           3877 ;	-----------------------------------------
                           3878 ;	 function EP6_ISR
                           3879 ;	-----------------------------------------
   0BBE                    3880 _EP6_ISR:
   0BBE C0 E0              3881 	push	acc
   0BC0 C0 82              3882 	push	dpl
   0BC2 C0 83              3883 	push	dph
                           3884 ;	../../../include/ztex-isr.h:465: EXIF &= ~bmBIT4;
   0BC4 53 91 EF           3885 	anl	_EXIF,#0xEF
                           3886 ;	../../../include/ztex-isr.h:466: EPIRQ = bmBIT6;
   0BC7 90 E6 5F           3887 	mov	dptr,#_EPIRQ
   0BCA 74 40              3888 	mov	a,#0x40
   0BCC F0                 3889 	movx	@dptr,a
   0BCD D0 83              3890 	pop	dph
   0BCF D0 82              3891 	pop	dpl
   0BD1 D0 E0              3892 	pop	acc
   0BD3 32                 3893 	reti
                           3894 ;	eliminated unneeded push/pop psw
                           3895 ;	eliminated unneeded push/pop b
                           3896 ;------------------------------------------------------------
                           3897 ;Allocation info for local variables in function 'EP8_ISR'
                           3898 ;------------------------------------------------------------
                           3899 ;------------------------------------------------------------
                           3900 ;	../../../include/ztex-isr.h:472: void EP8_ISR() interrupt
                           3901 ;	-----------------------------------------
                           3902 ;	 function EP8_ISR
                           3903 ;	-----------------------------------------
   0BD4                    3904 _EP8_ISR:
   0BD4 C0 E0              3905 	push	acc
   0BD6 C0 82              3906 	push	dpl
   0BD8 C0 83              3907 	push	dph
                           3908 ;	../../../include/ztex-isr.h:474: EXIF &= ~bmBIT4;
   0BDA 53 91 EF           3909 	anl	_EXIF,#0xEF
                           3910 ;	../../../include/ztex-isr.h:475: EPIRQ = bmBIT7;
   0BDD 90 E6 5F           3911 	mov	dptr,#_EPIRQ
   0BE0 74 80              3912 	mov	a,#0x80
   0BE2 F0                 3913 	movx	@dptr,a
   0BE3 D0 83              3914 	pop	dph
   0BE5 D0 82              3915 	pop	dpl
   0BE7 D0 E0              3916 	pop	acc
   0BE9 32                 3917 	reti
                           3918 ;	eliminated unneeded push/pop psw
                           3919 ;	eliminated unneeded push/pop b
                           3920 ;------------------------------------------------------------
                           3921 ;Allocation info for local variables in function 'init_USB'
                           3922 ;------------------------------------------------------------
                           3923 ;------------------------------------------------------------
                           3924 ;	../../../include/ztex.h:165: void init_USB ()
                           3925 ;	-----------------------------------------
                           3926 ;	 function init_USB
                           3927 ;	-----------------------------------------
   0BEA                    3928 _init_USB:
                           3929 ;	../../../include/ztex.h:167: USBCS |= 0x08;
   0BEA 90 E6 80           3930 	mov	dptr,#_USBCS
   0BED E0                 3931 	movx	a,@dptr
   0BEE 44 08              3932 	orl	a,#0x08
   0BF0 F0                 3933 	movx	@dptr,a
                           3934 ;	../../../include/ztex.h:169: CPUCS = bmBIT4 | bmBIT1;
   0BF1 90 E6 00           3935 	mov	dptr,#_CPUCS
   0BF4 74 12              3936 	mov	a,#0x12
   0BF6 F0                 3937 	movx	@dptr,a
                           3938 ;	../../../include/ztex.h:170: CKCON &= ~7;
   0BF7 53 8E F8           3939 	anl	_CKCON,#0xF8
                           3940 ;	../../../include/ztex.h:191: EA = 0;
   0BFA C2 AF              3941 	clr	_EA
                           3942 ;	../../../include/ztex.h:192: EUSB = 0;
   0BFC C2 E8              3943 	clr	_EUSB
                           3944 ;	../../../include/ezintavecs.h:123: INT8VEC_USB.op=0x02;
   0BFE 90 00 43           3945 	mov	dptr,#_INT8VEC_USB
   0C01 74 02              3946 	mov	a,#0x02
   0C03 F0                 3947 	movx	@dptr,a
                           3948 ;	../../../include/ezintavecs.h:124: INT8VEC_USB.addrH = 0x01;
   0C04 90 00 44           3949 	mov	dptr,#(_INT8VEC_USB + 0x0001)
   0C07 74 01              3950 	mov	a,#0x01
   0C09 F0                 3951 	movx	@dptr,a
                           3952 ;	../../../include/ezintavecs.h:125: INT8VEC_USB.addrL = 0xb8;
   0C0A 90 00 45           3953 	mov	dptr,#(_INT8VEC_USB + 0x0002)
   0C0D 74 B8              3954 	mov	a,#0xB8
   0C0F F0                 3955 	movx	@dptr,a
                           3956 ;	../../../include/ezintavecs.h:126: INTSETUP |= 8;
   0C10 90 E6 68           3957 	mov	dptr,#_INTSETUP
   0C13 E0                 3958 	movx	a,@dptr
   0C14 44 08              3959 	orl	a,#0x08
   0C16 F0                 3960 	movx	@dptr,a
                           3961 ;	../../../include/ezintavecs.h:115: $0.op=0x02;
   0C17 90 01 00           3962 	mov	dptr,#_INTVEC_SUDAV
   0C1A 74 02              3963 	mov	a,#0x02
   0C1C F0                 3964 	movx	@dptr,a
                           3965 ;	../../../include/ezintavecs.h:116: $0.addrH=((unsigned short)(&$1)) >> 8;
   0C1D 7ArBF              3966 	mov	r2,#_SUDAV_ISR
   0C1F 7Bs04              3967 	mov	r3,#(_SUDAV_ISR >> 8)
   0C21 8B 04              3968 	mov	ar4,r3
   0C23 90 01 01           3969 	mov	dptr,#(_INTVEC_SUDAV + 0x0001)
   0C26 EC                 3970 	mov	a,r4
   0C27 F0                 3971 	movx	@dptr,a
                           3972 ;	../../../include/ezintavecs.h:117: $0.addrL=(unsigned short)(&$1);
   0C28 90 01 02           3973 	mov	dptr,#(_INTVEC_SUDAV + 0x0002)
   0C2B EA                 3974 	mov	a,r2
   0C2C F0                 3975 	movx	@dptr,a
                           3976 ;	../../../include/ezintavecs.h:115: $0.op=0x02;
   0C2D 90 01 04           3977 	mov	dptr,#_INTVEC_SOF
   0C30 74 02              3978 	mov	a,#0x02
   0C32 F0                 3979 	movx	@dptr,a
                           3980 ;	../../../include/ezintavecs.h:116: $0.addrH=((unsigned short)(&$1)) >> 8;
   0C33 7ArBD              3981 	mov	r2,#_SOF_ISR
   0C35 7Bs09              3982 	mov	r3,#(_SOF_ISR >> 8)
   0C37 8B 04              3983 	mov	ar4,r3
   0C39 90 01 05           3984 	mov	dptr,#(_INTVEC_SOF + 0x0001)
   0C3C EC                 3985 	mov	a,r4
   0C3D F0                 3986 	movx	@dptr,a
                           3987 ;	../../../include/ezintavecs.h:117: $0.addrL=(unsigned short)(&$1);
   0C3E 90 01 06           3988 	mov	dptr,#(_INTVEC_SOF + 0x0002)
   0C41 EA                 3989 	mov	a,r2
   0C42 F0                 3990 	movx	@dptr,a
                           3991 ;	../../../include/ezintavecs.h:115: $0.op=0x02;
   0C43 90 01 08           3992 	mov	dptr,#_INTVEC_SUTOK
   0C46 74 02              3993 	mov	a,#0x02
   0C48 F0                 3994 	movx	@dptr,a
                           3995 ;	../../../include/ezintavecs.h:116: $0.addrH=((unsigned short)(&$1)) >> 8;
   0C49 7ArD3              3996 	mov	r2,#_SUTOK_ISR
   0C4B 7Bs09              3997 	mov	r3,#(_SUTOK_ISR >> 8)
   0C4D 8B 04              3998 	mov	ar4,r3
   0C4F 90 01 09           3999 	mov	dptr,#(_INTVEC_SUTOK + 0x0001)
   0C52 EC                 4000 	mov	a,r4
   0C53 F0                 4001 	movx	@dptr,a
                           4002 ;	../../../include/ezintavecs.h:117: $0.addrL=(unsigned short)(&$1);
   0C54 90 01 0A           4003 	mov	dptr,#(_INTVEC_SUTOK + 0x0002)
   0C57 EA                 4004 	mov	a,r2
   0C58 F0                 4005 	movx	@dptr,a
                           4006 ;	../../../include/ezintavecs.h:115: $0.op=0x02;
   0C59 90 01 0C           4007 	mov	dptr,#_INTVEC_SUSPEND
   0C5C 74 02              4008 	mov	a,#0x02
   0C5E F0                 4009 	movx	@dptr,a
                           4010 ;	../../../include/ezintavecs.h:116: $0.addrH=((unsigned short)(&$1)) >> 8;
   0C5F 7ArE9              4011 	mov	r2,#_SUSP_ISR
   0C61 7Bs09              4012 	mov	r3,#(_SUSP_ISR >> 8)
   0C63 8B 04              4013 	mov	ar4,r3
   0C65 90 01 0D           4014 	mov	dptr,#(_INTVEC_SUSPEND + 0x0001)
   0C68 EC                 4015 	mov	a,r4
   0C69 F0                 4016 	movx	@dptr,a
                           4017 ;	../../../include/ezintavecs.h:117: $0.addrL=(unsigned short)(&$1);
   0C6A 90 01 0E           4018 	mov	dptr,#(_INTVEC_SUSPEND + 0x0002)
   0C6D EA                 4019 	mov	a,r2
   0C6E F0                 4020 	movx	@dptr,a
                           4021 ;	../../../include/ezintavecs.h:115: $0.op=0x02;
   0C6F 90 01 10           4022 	mov	dptr,#_INTVEC_USBRESET
   0C72 74 02              4023 	mov	a,#0x02
   0C74 F0                 4024 	movx	@dptr,a
                           4025 ;	../../../include/ezintavecs.h:116: $0.addrH=((unsigned short)(&$1)) >> 8;
   0C75 7ArFF              4026 	mov	r2,#_URES_ISR
   0C77 7Bs09              4027 	mov	r3,#(_URES_ISR >> 8)
   0C79 8B 04              4028 	mov	ar4,r3
   0C7B 90 01 11           4029 	mov	dptr,#(_INTVEC_USBRESET + 0x0001)
   0C7E EC                 4030 	mov	a,r4
   0C7F F0                 4031 	movx	@dptr,a
                           4032 ;	../../../include/ezintavecs.h:117: $0.addrL=(unsigned short)(&$1);
   0C80 90 01 12           4033 	mov	dptr,#(_INTVEC_USBRESET + 0x0002)
   0C83 EA                 4034 	mov	a,r2
   0C84 F0                 4035 	movx	@dptr,a
                           4036 ;	../../../include/ezintavecs.h:115: $0.op=0x02;
   0C85 90 01 14           4037 	mov	dptr,#_INTVEC_HISPEED
   0C88 74 02              4038 	mov	a,#0x02
   0C8A F0                 4039 	movx	@dptr,a
                           4040 ;	../../../include/ezintavecs.h:116: $0.addrH=((unsigned short)(&$1)) >> 8;
   0C8B 7Ar15              4041 	mov	r2,#_HSGRANT_ISR
   0C8D 7Bs0A              4042 	mov	r3,#(_HSGRANT_ISR >> 8)
   0C8F 8B 04              4043 	mov	ar4,r3
   0C91 90 01 15           4044 	mov	dptr,#(_INTVEC_HISPEED + 0x0001)
   0C94 EC                 4045 	mov	a,r4
   0C95 F0                 4046 	movx	@dptr,a
                           4047 ;	../../../include/ezintavecs.h:117: $0.addrL=(unsigned short)(&$1);
   0C96 90 01 16           4048 	mov	dptr,#(_INTVEC_HISPEED + 0x0002)
   0C99 EA                 4049 	mov	a,r2
   0C9A F0                 4050 	movx	@dptr,a
                           4051 ;	../../../include/ezintavecs.h:115: $0.op=0x02;
   0C9B 90 01 18           4052 	mov	dptr,#_INTVEC_EP0ACK
   0C9E 74 02              4053 	mov	a,#0x02
   0CA0 F0                 4054 	movx	@dptr,a
                           4055 ;	../../../include/ezintavecs.h:116: $0.addrH=((unsigned short)(&$1)) >> 8;
   0CA1 7Ar2B              4056 	mov	r2,#_EP0ACK_ISR
   0CA3 7Bs0A              4057 	mov	r3,#(_EP0ACK_ISR >> 8)
   0CA5 8B 04              4058 	mov	ar4,r3
   0CA7 90 01 19           4059 	mov	dptr,#(_INTVEC_EP0ACK + 0x0001)
   0CAA EC                 4060 	mov	a,r4
   0CAB F0                 4061 	movx	@dptr,a
                           4062 ;	../../../include/ezintavecs.h:117: $0.addrL=(unsigned short)(&$1);
   0CAC 90 01 1A           4063 	mov	dptr,#(_INTVEC_EP0ACK + 0x0002)
   0CAF EA                 4064 	mov	a,r2
   0CB0 F0                 4065 	movx	@dptr,a
                           4066 ;	../../../include/ezintavecs.h:115: $0.op=0x02;
   0CB1 90 01 20           4067 	mov	dptr,#_INTVEC_EP0IN
   0CB4 74 02              4068 	mov	a,#0x02
   0CB6 F0                 4069 	movx	@dptr,a
                           4070 ;	../../../include/ezintavecs.h:116: $0.addrH=((unsigned short)(&$1)) >> 8;
   0CB7 7Ar41              4071 	mov	r2,#_EP0IN_ISR
   0CB9 7Bs0A              4072 	mov	r3,#(_EP0IN_ISR >> 8)
   0CBB 8B 04              4073 	mov	ar4,r3
   0CBD 90 01 21           4074 	mov	dptr,#(_INTVEC_EP0IN + 0x0001)
   0CC0 EC                 4075 	mov	a,r4
   0CC1 F0                 4076 	movx	@dptr,a
                           4077 ;	../../../include/ezintavecs.h:117: $0.addrL=(unsigned short)(&$1);
   0CC2 90 01 22           4078 	mov	dptr,#(_INTVEC_EP0IN + 0x0002)
   0CC5 EA                 4079 	mov	a,r2
   0CC6 F0                 4080 	movx	@dptr,a
                           4081 ;	../../../include/ezintavecs.h:115: $0.op=0x02;
   0CC7 90 01 24           4082 	mov	dptr,#_INTVEC_EP0OUT
   0CCA 74 02              4083 	mov	a,#0x02
   0CCC F0                 4084 	movx	@dptr,a
                           4085 ;	../../../include/ezintavecs.h:116: $0.addrH=((unsigned short)(&$1)) >> 8;
   0CCD 7ArCA              4086 	mov	r2,#_EP0OUT_ISR
   0CCF 7Bs0A              4087 	mov	r3,#(_EP0OUT_ISR >> 8)
   0CD1 8B 04              4088 	mov	ar4,r3
   0CD3 90 01 25           4089 	mov	dptr,#(_INTVEC_EP0OUT + 0x0001)
   0CD6 EC                 4090 	mov	a,r4
   0CD7 F0                 4091 	movx	@dptr,a
                           4092 ;	../../../include/ezintavecs.h:117: $0.addrL=(unsigned short)(&$1);
   0CD8 90 01 26           4093 	mov	dptr,#(_INTVEC_EP0OUT + 0x0002)
   0CDB EA                 4094 	mov	a,r2
   0CDC F0                 4095 	movx	@dptr,a
                           4096 ;	../../../include/ezintavecs.h:115: $0.op=0x02;
   0CDD 90 01 28           4097 	mov	dptr,#_INTVEC_EP1IN
   0CE0 74 02              4098 	mov	a,#0x02
   0CE2 F0                 4099 	movx	@dptr,a
                           4100 ;	../../../include/ezintavecs.h:116: $0.addrH=((unsigned short)(&$1)) >> 8;
   0CE3 7Ar66              4101 	mov	r2,#_EP1IN_ISR
   0CE5 7Bs0B              4102 	mov	r3,#(_EP1IN_ISR >> 8)
   0CE7 8B 04              4103 	mov	ar4,r3
   0CE9 90 01 29           4104 	mov	dptr,#(_INTVEC_EP1IN + 0x0001)
   0CEC EC                 4105 	mov	a,r4
   0CED F0                 4106 	movx	@dptr,a
                           4107 ;	../../../include/ezintavecs.h:117: $0.addrL=(unsigned short)(&$1);
   0CEE 90 01 2A           4108 	mov	dptr,#(_INTVEC_EP1IN + 0x0002)
   0CF1 EA                 4109 	mov	a,r2
   0CF2 F0                 4110 	movx	@dptr,a
                           4111 ;	../../../include/ezintavecs.h:115: $0.op=0x02;
   0CF3 90 01 2C           4112 	mov	dptr,#_INTVEC_EP1OUT
   0CF6 74 02              4113 	mov	a,#0x02
   0CF8 F0                 4114 	movx	@dptr,a
                           4115 ;	../../../include/ezintavecs.h:116: $0.addrH=((unsigned short)(&$1)) >> 8;
   0CF9 7Ar7C              4116 	mov	r2,#_EP1OUT_ISR
   0CFB 7Bs0B              4117 	mov	r3,#(_EP1OUT_ISR >> 8)
   0CFD 8B 04              4118 	mov	ar4,r3
   0CFF 90 01 2D           4119 	mov	dptr,#(_INTVEC_EP1OUT + 0x0001)
   0D02 EC                 4120 	mov	a,r4
   0D03 F0                 4121 	movx	@dptr,a
                           4122 ;	../../../include/ezintavecs.h:117: $0.addrL=(unsigned short)(&$1);
   0D04 90 01 2E           4123 	mov	dptr,#(_INTVEC_EP1OUT + 0x0002)
   0D07 EA                 4124 	mov	a,r2
   0D08 F0                 4125 	movx	@dptr,a
                           4126 ;	../../../include/ezintavecs.h:115: $0.op=0x02;
   0D09 90 01 30           4127 	mov	dptr,#_INTVEC_EP2
   0D0C 74 02              4128 	mov	a,#0x02
   0D0E F0                 4129 	movx	@dptr,a
                           4130 ;	../../../include/ezintavecs.h:116: $0.addrH=((unsigned short)(&$1)) >> 8;
   0D0F 7Ar92              4131 	mov	r2,#_EP2_ISR
   0D11 7Bs0B              4132 	mov	r3,#(_EP2_ISR >> 8)
   0D13 8B 04              4133 	mov	ar4,r3
   0D15 90 01 31           4134 	mov	dptr,#(_INTVEC_EP2 + 0x0001)
   0D18 EC                 4135 	mov	a,r4
   0D19 F0                 4136 	movx	@dptr,a
                           4137 ;	../../../include/ezintavecs.h:117: $0.addrL=(unsigned short)(&$1);
   0D1A 90 01 32           4138 	mov	dptr,#(_INTVEC_EP2 + 0x0002)
   0D1D EA                 4139 	mov	a,r2
   0D1E F0                 4140 	movx	@dptr,a
                           4141 ;	../../../include/ezintavecs.h:115: $0.op=0x02;
   0D1F 90 01 34           4142 	mov	dptr,#_INTVEC_EP4
   0D22 74 02              4143 	mov	a,#0x02
   0D24 F0                 4144 	movx	@dptr,a
                           4145 ;	../../../include/ezintavecs.h:116: $0.addrH=((unsigned short)(&$1)) >> 8;
   0D25 7ArA8              4146 	mov	r2,#_EP4_ISR
   0D27 7Bs0B              4147 	mov	r3,#(_EP4_ISR >> 8)
   0D29 8B 04              4148 	mov	ar4,r3
   0D2B 90 01 35           4149 	mov	dptr,#(_INTVEC_EP4 + 0x0001)
   0D2E EC                 4150 	mov	a,r4
   0D2F F0                 4151 	movx	@dptr,a
                           4152 ;	../../../include/ezintavecs.h:117: $0.addrL=(unsigned short)(&$1);
   0D30 90 01 36           4153 	mov	dptr,#(_INTVEC_EP4 + 0x0002)
   0D33 EA                 4154 	mov	a,r2
   0D34 F0                 4155 	movx	@dptr,a
                           4156 ;	../../../include/ezintavecs.h:115: $0.op=0x02;
   0D35 90 01 38           4157 	mov	dptr,#_INTVEC_EP6
   0D38 74 02              4158 	mov	a,#0x02
   0D3A F0                 4159 	movx	@dptr,a
                           4160 ;	../../../include/ezintavecs.h:116: $0.addrH=((unsigned short)(&$1)) >> 8;
   0D3B 7ArBE              4161 	mov	r2,#_EP6_ISR
   0D3D 7Bs0B              4162 	mov	r3,#(_EP6_ISR >> 8)
   0D3F 8B 04              4163 	mov	ar4,r3
   0D41 90 01 39           4164 	mov	dptr,#(_INTVEC_EP6 + 0x0001)
   0D44 EC                 4165 	mov	a,r4
   0D45 F0                 4166 	movx	@dptr,a
                           4167 ;	../../../include/ezintavecs.h:117: $0.addrL=(unsigned short)(&$1);
   0D46 90 01 3A           4168 	mov	dptr,#(_INTVEC_EP6 + 0x0002)
   0D49 EA                 4169 	mov	a,r2
   0D4A F0                 4170 	movx	@dptr,a
                           4171 ;	../../../include/ezintavecs.h:115: $0.op=0x02;
   0D4B 90 01 3C           4172 	mov	dptr,#_INTVEC_EP8
   0D4E 74 02              4173 	mov	a,#0x02
   0D50 F0                 4174 	movx	@dptr,a
                           4175 ;	../../../include/ezintavecs.h:116: $0.addrH=((unsigned short)(&$1)) >> 8;
   0D51 7ArD4              4176 	mov	r2,#_EP8_ISR
   0D53 7Bs0B              4177 	mov	r3,#(_EP8_ISR >> 8)
   0D55 8B 04              4178 	mov	ar4,r3
   0D57 90 01 3D           4179 	mov	dptr,#(_INTVEC_EP8 + 0x0001)
   0D5A EC                 4180 	mov	a,r4
   0D5B F0                 4181 	movx	@dptr,a
                           4182 ;	../../../include/ezintavecs.h:117: $0.addrL=(unsigned short)(&$1);
   0D5C 90 01 3E           4183 	mov	dptr,#(_INTVEC_EP8 + 0x0002)
   0D5F EA                 4184 	mov	a,r2
   0D60 F0                 4185 	movx	@dptr,a
                           4186 ;	../../../include/ztex.h:213: EXIF &= ~bmBIT4;
   0D61 53 91 EF           4187 	anl	_EXIF,#0xEF
                           4188 ;	../../../include/ztex.h:214: USBIRQ = 0x7f;
   0D64 90 E6 5D           4189 	mov	dptr,#_USBIRQ
   0D67 74 7F              4190 	mov	a,#0x7F
   0D69 F0                 4191 	movx	@dptr,a
                           4192 ;	../../../include/ztex.h:215: USBIE |= 0x7f; 
   0D6A 90 E6 5C           4193 	mov	dptr,#_USBIE
   0D6D E0                 4194 	movx	a,@dptr
   0D6E FA                 4195 	mov	r2,a
   0D6F 44 7F              4196 	orl	a,#0x7F
   0D71 F0                 4197 	movx	@dptr,a
                           4198 ;	../../../include/ztex.h:216: EPIRQ = 0xff;
   0D72 90 E6 5F           4199 	mov	dptr,#_EPIRQ
   0D75 74 FF              4200 	mov	a,#0xFF
   0D77 F0                 4201 	movx	@dptr,a
                           4202 ;	../../../include/ztex.h:217: EPIE = 0xff;
   0D78 90 E6 5E           4203 	mov	dptr,#_EPIE
   0D7B 74 FF              4204 	mov	a,#0xFF
   0D7D F0                 4205 	movx	@dptr,a
                           4206 ;	../../../include/ztex.h:219: EUSB = 1;
   0D7E D2 E8              4207 	setb	_EUSB
                           4208 ;	../../../include/ztex.h:220: EA = 1;
   0D80 D2 AF              4209 	setb	_EA
                           4210 ;	../../../include/ztex.h:154: EP$0CFG = bmBIT7 | bmBIT5;
   0D82 90 E6 11           4211 	mov	dptr,#_EP1INCFG
   0D85 74 A0              4212 	mov	a,#0xA0
   0D87 F0                 4213 	movx	@dptr,a
                           4214 ;	../../../include/ezregs.h:46: _endasm;
                           4215 	
   0D88 00                 4216 	 nop
   0D89 00                 4217 	 nop
   0D8A 00                 4218 	 nop
   0D8B 00                 4219 	 nop
                           4220 	    
                           4221 ;	../../../include/ztex.h:154: EP$0CFG = bmBIT7 | bmBIT5;
   0D8C 90 E6 10           4222 	mov	dptr,#_EP1OUTCFG
   0D8F 74 A0              4223 	mov	a,#0xA0
   0D91 F0                 4224 	movx	@dptr,a
                           4225 ;	../../../include/ezregs.h:46: _endasm;
                           4226 	
   0D92 00                 4227 	 nop
   0D93 00                 4228 	 nop
   0D94 00                 4229 	 nop
   0D95 00                 4230 	 nop
                           4231 	    
                           4232 ;	../../../include/ztex.h:149: ;
   0D96 90 E6 12           4233 	mov	dptr,#_EP2CFG
   0D99 E4                 4234 	clr	a
   0D9A F0                 4235 	movx	@dptr,a
                           4236 ;	../../../include/ezregs.h:46: _endasm;
                           4237 	
   0D9B 00                 4238 	 nop
   0D9C 00                 4239 	 nop
   0D9D 00                 4240 	 nop
   0D9E 00                 4241 	 nop
                           4242 	    
                           4243 ;	../../../include/ztex.h:149: ;
   0D9F 90 E6 13           4244 	mov	dptr,#_EP4CFG
   0DA2 E4                 4245 	clr	a
   0DA3 F0                 4246 	movx	@dptr,a
                           4247 ;	../../../include/ezregs.h:46: _endasm;
                           4248 	
   0DA4 00                 4249 	 nop
   0DA5 00                 4250 	 nop
   0DA6 00                 4251 	 nop
   0DA7 00                 4252 	 nop
                           4253 	    
                           4254 ;	../../../include/ztex.h:149: ;
   0DA8 90 E6 14           4255 	mov	dptr,#_EP6CFG
   0DAB E4                 4256 	clr	a
   0DAC F0                 4257 	movx	@dptr,a
                           4258 ;	../../../include/ezregs.h:46: _endasm;
                           4259 	
   0DAD 00                 4260 	 nop
   0DAE 00                 4261 	 nop
   0DAF 00                 4262 	 nop
   0DB0 00                 4263 	 nop
                           4264 	    
                           4265 ;	../../../include/ztex.h:149: ;
   0DB1 90 E6 15           4266 	mov	dptr,#_EP8CFG
   0DB4 E4                 4267 	clr	a
   0DB5 F0                 4268 	movx	@dptr,a
                           4269 ;	../../../include/ezregs.h:46: _endasm;
                           4270 	
   0DB6 00                 4271 	 nop
   0DB7 00                 4272 	 nop
   0DB8 00                 4273 	 nop
   0DB9 00                 4274 	 nop
                           4275 	    
                           4276 ;	../../../include/ztex.h:236: debug_init();
   0DBA 12s03r95           4277 	lcall	_debug_init
                           4278 ;	../../../include/ztex.h:239: USBCS |= bmBIT7 | bmBIT1;
   0DBD 90 E6 80           4279 	mov	dptr,#_USBCS
   0DC0 E0                 4280 	movx	a,@dptr
   0DC1 44 82              4281 	orl	a,#0x82
   0DC3 F0                 4282 	movx	@dptr,a
                           4283 ;	../../../include/ztex.h:240: wait(250);
   0DC4 90 00 FA           4284 	mov	dptr,#0x00FA
   0DC7 12s00r00           4285 	lcall	_wait
                           4286 ;	../../../include/ztex.h:241: USBCS &= ~0x08;
   0DCA 90 E6 80           4287 	mov	dptr,#_USBCS
   0DCD E0                 4288 	movx	a,@dptr
   0DCE 54 F7              4289 	anl	a,#0xF7
   0DD0 F0                 4290 	movx	@dptr,a
   0DD1 22                 4291 	ret
                           4292 ;------------------------------------------------------------
                           4293 ;Allocation info for local variables in function 'main'
                           4294 ;------------------------------------------------------------
                           4295 ;i                         Allocated to registers 
                           4296 ;b                         Allocated to registers r4 
                           4297 ;------------------------------------------------------------
                           4298 ;	debug.c:32: void main(void)	
                           4299 ;	-----------------------------------------
                           4300 ;	 function main
                           4301 ;	-----------------------------------------
   0DD2                    4302 _main:
                           4303 ;	debug.c:38: init_USB();
   0DD2 12s0BrEA           4304 	lcall	_init_USB
                           4305 ;	debug.c:41: while (1) {	
   0DD5 7A 00              4306 	mov	r2,#0x00
   0DD7 7B 00              4307 	mov	r3,#0x00
   0DD9                    4308 00102$:
                           4309 ;	../../../include/ztex-conf.h:30: ][#noexpand[!dnapxeon!]//$0!dnapxeon!
   0DD9 8A 04              4310 	mov	ar4,r2
   0DDB 90s00r6B           4311 	mov	dptr,#_debug_msg_buf
   0DDE EC                 4312 	mov	a,r4
   0DDF F0                 4313 	movx	@dptr,a
                           4314 ;	debug.c:44: debug_msg_buf[1] = i >> 8;
   0DE0 8B 04              4315 	mov	ar4,r3
   0DE2 90s00r6C           4316 	mov	dptr,#(_debug_msg_buf + 0x0001)
   0DE5 EC                 4317 	mov	a,r4
   0DE6 F0                 4318 	movx	@dptr,a
                           4319 ;	../../../include/ztex-conf.h:30: ][#noexpand[!dnapxeon!]//$0!dnapxeon!
   0DE7 C0 02              4320 	push	ar2
   0DE9 C0 03              4321 	push	ar3
   0DEB 12s03r51           4322 	lcall	_debug_add_msg
   0DEE D0 03              4323 	pop	ar3
   0DF0 D0 02              4324 	pop	ar2
                           4325 ;	debug.c:46: i+=1;
   0DF2 0A                 4326 	inc	r2
   0DF3 BA 00 01           4327 	cjne	r2,#0x00,00113$
   0DF6 0B                 4328 	inc	r3
   0DF7                    4329 00113$:
                           4330 ;	debug.c:30: #include[ztex.h]
   0DF7 7C 00              4331 	mov	r4,#0x00
   0DF9                    4332 00104$:
   0DF9 BC 64 00           4333 	cjne	r4,#0x64,00114$
   0DFC                    4334 00114$:
   0DFC 50 DB              4335 	jnc	00102$
   0DFE 90s00r69           4336 	mov	dptr,#_debug_stack_ptr
   0E01 E0                 4337 	movx	a,@dptr
   0E02 FD                 4338 	mov	r5,a
   0E03 A3                 4339 	inc	dptr
   0E04 E0                 4340 	movx	a,@dptr
   0E05 FE                 4341 	mov	r6,a
   0E06 8D 82              4342 	mov	dpl,r5
   0E08 8E 83              4343 	mov	dph,r6
   0E0A A3                 4344 	inc	dptr
   0E0B A3                 4345 	inc	dptr
   0E0C EC                 4346 	mov	a,r4
   0E0D F0                 4347 	movx	@dptr,a
   0E0E 90 00 0A           4348 	mov	dptr,#0x000A
   0E11 C0 02              4349 	push	ar2
   0E13 C0 03              4350 	push	ar3
   0E15 C0 04              4351 	push	ar4
   0E17 12s00r00           4352 	lcall	_wait
   0E1A D0 04              4353 	pop	ar4
   0E1C D0 03              4354 	pop	ar3
   0E1E D0 02              4355 	pop	ar2
   0E20 0C                 4356 	inc	r4
   0E21 80 D6              4357 	sjmp	00104$
                           4358 	.area CSEG    (CODE)
                           4359 	.area CONST   (CODE)
   0000                    4360 _manufacturerString:
   0000 5A 54 45 58        4361 	.ascii "ZTEX"
   0004 00                 4362 	.db 0x00
   0005                    4363 _productString:
   0005 64 65 62 75 67 20  4364 	.ascii "debug for EZ-USB devices"
        66 6F 72 20 45 5A
        2D 55 53 42 20 64
        65 76 69 63 65 73
   001D 00                 4365 	.db 0x00
   001E                    4366 _configurationString:
   001E 28 75 6E 6B 6E 6F  4367 	.ascii "(unknown)"
        77 6E 29
   0027 00                 4368 	.db 0x00
   0028                    4369 _PadByte:
   0028 00                 4370 	.db #0x00
   0029                    4371 _DeviceDescriptor:
   0029 12                 4372 	.db #0x12
   002A 01                 4373 	.db #0x01
   002B 00                 4374 	.db #0x00
   002C 02                 4375 	.db #0x02
   002D FF                 4376 	.db #0xFF
   002E FF                 4377 	.db #0xFF
   002F FF                 4378 	.db #0xFF
   0030 40                 4379 	.db #0x40
   0031 1A                 4380 	.db #0x1A
   0032 22                 4381 	.db #0x22
   0033 00                 4382 	.db #0x00
   0034 01                 4383 	.db #0x01
   0035 00                 4384 	.db #0x00
   0036 00                 4385 	.db #0x00
   0037 01                 4386 	.db #0x01
   0038 02                 4387 	.db #0x02
   0039 03                 4388 	.db #0x03
   003A 01                 4389 	.db #0x01
   003B                    4390 _DeviceQualifierDescriptor:
   003B 0A                 4391 	.db #0x0A
   003C 06                 4392 	.db #0x06
   003D 00                 4393 	.db #0x00
   003E 02                 4394 	.db #0x02
   003F FF                 4395 	.db #0xFF
   0040 FF                 4396 	.db #0xFF
   0041 FF                 4397 	.db #0xFF
   0042 40                 4398 	.db #0x40
   0043 01                 4399 	.db #0x01
   0044 00                 4400 	.db #0x00
   0045                    4401 _HighSpeedConfigDescriptor:
   0045 09                 4402 	.db #0x09
   0046 02                 4403 	.db #0x02
   0047 20                 4404 	.db #0x20
   0048 00                 4405 	.db #0x00
   0049 01                 4406 	.db #0x01
   004A 01                 4407 	.db #0x01
   004B 04                 4408 	.db #0x04
   004C C0                 4409 	.db #0xC0
   004D 32                 4410 	.db #0x32
   004E 09                 4411 	.db #0x09
   004F 04                 4412 	.db #0x04
   0050 00                 4413 	.db #0x00
   0051 00                 4414 	.db #0x00
   0052 02                 4415 	.db #0x02
   0053 FF                 4416 	.db #0xFF
   0054 FF                 4417 	.db #0xFF
   0055 FF                 4418 	.db #0xFF
   0056 00                 4419 	.db #0x00
   0057 07                 4420 	.db #0x07
   0058 05                 4421 	.db #0x05
   0059 81                 4422 	.db #0x81
   005A 02                 4423 	.db #0x02
   005B 00                 4424 	.db #0x00
   005C 02                 4425 	.db #0x02
   005D 00                 4426 	.db #0x00
   005E 07                 4427 	.db #0x07
   005F 05                 4428 	.db #0x05
   0060 01                 4429 	.db #0x01
   0061 02                 4430 	.db #0x02
   0062 00                 4431 	.db #0x00
   0063 02                 4432 	.db #0x02
   0064 00                 4433 	.db #0x00
   0065                    4434 _HighSpeedConfigDescriptor_PadByte:
   0065 00                 4435 	.db #0x00
   0066 00                 4436 	.db 0x00
   0067                    4437 _FullSpeedConfigDescriptor:
   0067 09                 4438 	.db #0x09
   0068 02                 4439 	.db #0x02
   0069 20                 4440 	.db #0x20
   006A 00                 4441 	.db #0x00
   006B 01                 4442 	.db #0x01
   006C 01                 4443 	.db #0x01
   006D 04                 4444 	.db #0x04
   006E C0                 4445 	.db #0xC0
   006F 32                 4446 	.db #0x32
   0070 09                 4447 	.db #0x09
   0071 04                 4448 	.db #0x04
   0072 00                 4449 	.db #0x00
   0073 00                 4450 	.db #0x00
   0074 02                 4451 	.db #0x02
   0075 FF                 4452 	.db #0xFF
   0076 FF                 4453 	.db #0xFF
   0077 FF                 4454 	.db #0xFF
   0078 00                 4455 	.db #0x00
   0079 07                 4456 	.db #0x07
   007A 05                 4457 	.db #0x05
   007B 81                 4458 	.db #0x81
   007C 02                 4459 	.db #0x02
   007D 40                 4460 	.db #0x40
   007E 00                 4461 	.db #0x00
   007F 00                 4462 	.db #0x00
   0080 07                 4463 	.db #0x07
   0081 05                 4464 	.db #0x05
   0082 01                 4465 	.db #0x01
   0083 02                 4466 	.db #0x02
   0084 40                 4467 	.db #0x40
   0085 00                 4468 	.db #0x00
   0086 00                 4469 	.db #0x00
   0087                    4470 _FullSpeedConfigDescriptor_PadByte:
   0087 00                 4471 	.db #0x00
   0088 00                 4472 	.db 0x00
   0089                    4473 _EmptyStringDescriptor:
   0089 04                 4474 	.db #0x04
   008A 03                 4475 	.db #0x03
   008B 00                 4476 	.db #0x00
   008C 00                 4477 	.db #0x00
                           4478 	.area XINIT   (CODE)
   0000                    4479 __xinit__ep0_payload_remaining:
   0000 00 00              4480 	.byte #0x00,#0x00
   0002                    4481 __xinit__ep0_payload_transfer:
   0002 00                 4482 	.db #0x00
   0003                    4483 __xinit__ep0_prev_setup_request:
   0003 FF                 4484 	.db #0xFF
   0004                    4485 __xinit__ep0_vendor_cmd_setup:
   0004 00                 4486 	.db #0x00
   0005                    4487 __xinit__ISOFRAME_COUNTER:
   0005 00 00              4488 	.byte #0x00,#0x00
   0007 00 00              4489 	.byte #0x00,#0x00
   0009 00 00              4490 	.byte #0x00,#0x00
   000B 00 00              4491 	.byte #0x00,#0x00
                           4492 	.area CABS    (ABS,CODE)
